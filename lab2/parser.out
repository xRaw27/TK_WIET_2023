Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> instructions_opt
Rule 1     instructions_opt -> instructions
Rule 2     instructions_opt -> <empty>
Rule 3     instructions -> instructions instruction
Rule 4     instructions -> instruction
Rule 5     instruction -> sys_instruction ;
Rule 6     instruction -> assignment ;
Rule 7     instruction -> { instructions }
Rule 8     sys_instruction -> RETURN expression
Rule 9     sys_instruction -> BREAK
Rule 10    sys_instruction -> CONTINUE
Rule 11    sys_instruction -> PRINT print_values
Rule 12    instruction -> IF ( condition ) instruction
Rule 13    instruction -> IF ( condition ) instruction ELSE instruction
Rule 14    instruction -> FOR var = expression : expression instruction
Rule 15    instruction -> WHILE ( condition ) instruction
Rule 16    assignment -> var assignment_operator expression
Rule 17    assignment -> matrix_element assignment_operator expression
Rule 18    assignment -> vector_element assignment_operator expression
Rule 19    assignment_operator -> =
Rule 20    assignment_operator -> ADDASSIGN
Rule 21    assignment_operator -> SUBASSIGN
Rule 22    assignment_operator -> MULASSIGN
Rule 23    assignment_operator -> DIVASSIGN
Rule 24    matrix -> [ vectors ]
Rule 25    vector -> [ variables ]
Rule 26    vectors -> vectors , vector
Rule 27    vectors -> vector
Rule 28    matrix_function -> function_name ( INTNUM )
Rule 29    function_name -> EYE
Rule 30    function_name -> ONES
Rule 31    function_name -> ZEROS
Rule 32    var -> ID
Rule 33    number -> INTNUM
Rule 34    number -> FLOATNUM
Rule 35    string -> STRING
Rule 36    variable -> number
Rule 37    variable -> var
Rule 38    variable -> element
Rule 39    vector_element -> ID [ INTNUM ]
Rule 40    matrix_element -> ID [ INTNUM , INTNUM ]
Rule 41    element -> vector_element
Rule 42    element -> matrix_element
Rule 43    variables -> variables , variable
Rule 44    variables -> variable
Rule 45    expression -> number
Rule 46    expression -> var
Rule 47    expression -> matrix
Rule 48    expression -> matrix_function
Rule 49    expression -> uminus
Rule 50    expression -> transposition
Rule 51    expression -> matrix_element
Rule 52    expression -> vector_element
Rule 53    expression -> expression + expression
Rule 54    expression -> expression - expression
Rule 55    expression -> expression * expression
Rule 56    expression -> expression / expression
Rule 57    expression -> expression DOTADD expression
Rule 58    expression -> expression DOTSUB expression
Rule 59    expression -> expression DOTMUL expression
Rule 60    expression -> expression DOTDIV expression
Rule 61    condition -> expression EQ expression
Rule 62    condition -> expression NE expression
Rule 63    condition -> expression LE expression
Rule 64    condition -> expression GE expression
Rule 65    condition -> expression LT expression
Rule 66    condition -> expression GT expression
Rule 67    uminus -> - expression
Rule 68    transposition -> expression '
Rule 69    print_values -> print_values , string
Rule 70    print_values -> print_values , expression
Rule 71    print_values -> string
Rule 72    print_values -> expression

Terminals, with rules where they appear

'                    : 68
(                    : 12 13 15 28
)                    : 12 13 15 28
*                    : 55
+                    : 53
,                    : 26 40 43 69 70
-                    : 54 67
/                    : 56
:                    : 14
;                    : 5 6
=                    : 14 19
ADDASSIGN            : 20
BREAK                : 9
CONTINUE             : 10
DIVASSIGN            : 23
DOTADD               : 57
DOTDIV               : 60
DOTMUL               : 59
DOTSUB               : 58
ELSE                 : 13
EQ                   : 61
EYE                  : 29
FLOATNUM             : 34
FOR                  : 14
GE                   : 64
GT                   : 66
ID                   : 32 39 40
IF                   : 12 13
INTNUM               : 28 33 39 40 40
LE                   : 63
LT                   : 65
MULASSIGN            : 22
NE                   : 62
ONES                 : 30
PRINT                : 11
RETURN               : 8
STRING               : 35
SUBASSIGN            : 21
WHILE                : 15
ZEROS                : 31
[                    : 24 25 39 40
]                    : 24 25 39 40
error                : 
{                    : 7
}                    : 7

Nonterminals, with rules where they appear

assignment           : 6
assignment_operator  : 16 17 18
condition            : 12 13 15
element              : 38
expression           : 8 14 14 16 17 18 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 62 63 63 64 64 65 65 66 66 67 68 70 72
function_name        : 28
instruction          : 3 4 12 13 13 14 15
instructions         : 1 3 7
instructions_opt     : 0
matrix               : 47
matrix_element       : 17 42 51
matrix_function      : 48
number               : 36 45
print_values         : 11 69 70
string               : 69 71
sys_instruction      : 5
transposition        : 50
uminus               : 49
var                  : 14 16 37 46
variable             : 43 44
variables            : 25 43
vector               : 26 27
vector_element       : 18 41 52
vectors              : 24 26

Parsing method: LALR

state 0

    (0) S' -> . instructions_opt
    (1) instructions_opt -> . instructions
    (2) instructions_opt -> .
    (3) instructions -> . instructions instruction
    (4) instructions -> . instruction
    (5) instruction -> . sys_instruction ;
    (6) instruction -> . assignment ;
    (7) instruction -> . { instructions }
    (12) instruction -> . IF ( condition ) instruction
    (13) instruction -> . IF ( condition ) instruction ELSE instruction
    (14) instruction -> . FOR var = expression : expression instruction
    (15) instruction -> . WHILE ( condition ) instruction
    (8) sys_instruction -> . RETURN expression
    (9) sys_instruction -> . BREAK
    (10) sys_instruction -> . CONTINUE
    (11) sys_instruction -> . PRINT print_values
    (16) assignment -> . var assignment_operator expression
    (17) assignment -> . matrix_element assignment_operator expression
    (18) assignment -> . vector_element assignment_operator expression
    (32) var -> . ID
    (40) matrix_element -> . ID [ INTNUM , INTNUM ]
    (39) vector_element -> . ID [ INTNUM ]

    $end            reduce using rule 2 (instructions_opt -> .)
    {               shift and go to state 6
    IF              shift and go to state 7
    FOR             shift and go to state 8
    WHILE           shift and go to state 10
    RETURN          shift and go to state 11
    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    PRINT           shift and go to state 14
    ID              shift and go to state 17

    instructions_opt               shift and go to state 1
    instructions                   shift and go to state 2
    instruction                    shift and go to state 3
    sys_instruction                shift and go to state 4
    assignment                     shift and go to state 5
    var                            shift and go to state 9
    matrix_element                 shift and go to state 15
    vector_element                 shift and go to state 16

state 1

    (0) S' -> instructions_opt .



state 2

    (1) instructions_opt -> instructions .
    (3) instructions -> instructions . instruction
    (5) instruction -> . sys_instruction ;
    (6) instruction -> . assignment ;
    (7) instruction -> . { instructions }
    (12) instruction -> . IF ( condition ) instruction
    (13) instruction -> . IF ( condition ) instruction ELSE instruction
    (14) instruction -> . FOR var = expression : expression instruction
    (15) instruction -> . WHILE ( condition ) instruction
    (8) sys_instruction -> . RETURN expression
    (9) sys_instruction -> . BREAK
    (10) sys_instruction -> . CONTINUE
    (11) sys_instruction -> . PRINT print_values
    (16) assignment -> . var assignment_operator expression
    (17) assignment -> . matrix_element assignment_operator expression
    (18) assignment -> . vector_element assignment_operator expression
    (32) var -> . ID
    (40) matrix_element -> . ID [ INTNUM , INTNUM ]
    (39) vector_element -> . ID [ INTNUM ]

    $end            reduce using rule 1 (instructions_opt -> instructions .)
    {               shift and go to state 6
    IF              shift and go to state 7
    FOR             shift and go to state 8
    WHILE           shift and go to state 10
    RETURN          shift and go to state 11
    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    PRINT           shift and go to state 14
    ID              shift and go to state 17

    instruction                    shift and go to state 18
    sys_instruction                shift and go to state 4
    assignment                     shift and go to state 5
    var                            shift and go to state 9
    matrix_element                 shift and go to state 15
    vector_element                 shift and go to state 16

state 3

    (4) instructions -> instruction .

    {               reduce using rule 4 (instructions -> instruction .)
    IF              reduce using rule 4 (instructions -> instruction .)
    FOR             reduce using rule 4 (instructions -> instruction .)
    WHILE           reduce using rule 4 (instructions -> instruction .)
    RETURN          reduce using rule 4 (instructions -> instruction .)
    BREAK           reduce using rule 4 (instructions -> instruction .)
    CONTINUE        reduce using rule 4 (instructions -> instruction .)
    PRINT           reduce using rule 4 (instructions -> instruction .)
    ID              reduce using rule 4 (instructions -> instruction .)
    $end            reduce using rule 4 (instructions -> instruction .)
    }               reduce using rule 4 (instructions -> instruction .)


state 4

    (5) instruction -> sys_instruction . ;

    ;               shift and go to state 19


state 5

    (6) instruction -> assignment . ;

    ;               shift and go to state 20


state 6

    (7) instruction -> { . instructions }
    (3) instructions -> . instructions instruction
    (4) instructions -> . instruction
    (5) instruction -> . sys_instruction ;
    (6) instruction -> . assignment ;
    (7) instruction -> . { instructions }
    (12) instruction -> . IF ( condition ) instruction
    (13) instruction -> . IF ( condition ) instruction ELSE instruction
    (14) instruction -> . FOR var = expression : expression instruction
    (15) instruction -> . WHILE ( condition ) instruction
    (8) sys_instruction -> . RETURN expression
    (9) sys_instruction -> . BREAK
    (10) sys_instruction -> . CONTINUE
    (11) sys_instruction -> . PRINT print_values
    (16) assignment -> . var assignment_operator expression
    (17) assignment -> . matrix_element assignment_operator expression
    (18) assignment -> . vector_element assignment_operator expression
    (32) var -> . ID
    (40) matrix_element -> . ID [ INTNUM , INTNUM ]
    (39) vector_element -> . ID [ INTNUM ]

    {               shift and go to state 6
    IF              shift and go to state 7
    FOR             shift and go to state 8
    WHILE           shift and go to state 10
    RETURN          shift and go to state 11
    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    PRINT           shift and go to state 14
    ID              shift and go to state 17

    instructions                   shift and go to state 21
    instruction                    shift and go to state 3
    sys_instruction                shift and go to state 4
    assignment                     shift and go to state 5
    var                            shift and go to state 9
    matrix_element                 shift and go to state 15
    vector_element                 shift and go to state 16

state 7

    (12) instruction -> IF . ( condition ) instruction
    (13) instruction -> IF . ( condition ) instruction ELSE instruction

    (               shift and go to state 22


state 8

    (14) instruction -> FOR . var = expression : expression instruction
    (32) var -> . ID

    ID              shift and go to state 24

    var                            shift and go to state 23

state 9

    (16) assignment -> var . assignment_operator expression
    (19) assignment_operator -> . =
    (20) assignment_operator -> . ADDASSIGN
    (21) assignment_operator -> . SUBASSIGN
    (22) assignment_operator -> . MULASSIGN
    (23) assignment_operator -> . DIVASSIGN

    =               shift and go to state 26
    ADDASSIGN       shift and go to state 27
    SUBASSIGN       shift and go to state 28
    MULASSIGN       shift and go to state 29
    DIVASSIGN       shift and go to state 30

    assignment_operator            shift and go to state 25

state 10

    (15) instruction -> WHILE . ( condition ) instruction

    (               shift and go to state 31


state 11

    (8) sys_instruction -> RETURN . expression
    (45) expression -> . number
    (46) expression -> . var
    (47) expression -> . matrix
    (48) expression -> . matrix_function
    (49) expression -> . uminus
    (50) expression -> . transposition
    (51) expression -> . matrix_element
    (52) expression -> . vector_element
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (33) number -> . INTNUM
    (34) number -> . FLOATNUM
    (32) var -> . ID
    (24) matrix -> . [ vectors ]
    (28) matrix_function -> . function_name ( INTNUM )
    (67) uminus -> . - expression
    (68) transposition -> . expression '
    (40) matrix_element -> . ID [ INTNUM , INTNUM ]
    (39) vector_element -> . ID [ INTNUM ]
    (29) function_name -> . EYE
    (30) function_name -> . ONES
    (31) function_name -> . ZEROS

    INTNUM          shift and go to state 42
    FLOATNUM        shift and go to state 43
    ID              shift and go to state 17
    [               shift and go to state 44
    -               shift and go to state 41
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48

    expression                     shift and go to state 32
    number                         shift and go to state 33
    var                            shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    uminus                         shift and go to state 37
    transposition                  shift and go to state 38
    matrix_element                 shift and go to state 39
    vector_element                 shift and go to state 40
    function_name                  shift and go to state 45

state 12

    (9) sys_instruction -> BREAK .

    ;               reduce using rule 9 (sys_instruction -> BREAK .)


state 13

    (10) sys_instruction -> CONTINUE .

    ;               reduce using rule 10 (sys_instruction -> CONTINUE .)


state 14

    (11) sys_instruction -> PRINT . print_values
    (69) print_values -> . print_values , string
    (70) print_values -> . print_values , expression
    (71) print_values -> . string
    (72) print_values -> . expression
    (35) string -> . STRING
    (45) expression -> . number
    (46) expression -> . var
    (47) expression -> . matrix
    (48) expression -> . matrix_function
    (49) expression -> . uminus
    (50) expression -> . transposition
    (51) expression -> . matrix_element
    (52) expression -> . vector_element
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (33) number -> . INTNUM
    (34) number -> . FLOATNUM
    (32) var -> . ID
    (24) matrix -> . [ vectors ]
    (28) matrix_function -> . function_name ( INTNUM )
    (67) uminus -> . - expression
    (68) transposition -> . expression '
    (40) matrix_element -> . ID [ INTNUM , INTNUM ]
    (39) vector_element -> . ID [ INTNUM ]
    (29) function_name -> . EYE
    (30) function_name -> . ONES
    (31) function_name -> . ZEROS

    STRING          shift and go to state 52
    INTNUM          shift and go to state 42
    FLOATNUM        shift and go to state 43
    ID              shift and go to state 17
    [               shift and go to state 44
    -               shift and go to state 41
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48

    print_values                   shift and go to state 49
    string                         shift and go to state 50
    expression                     shift and go to state 51
    number                         shift and go to state 33
    var                            shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    uminus                         shift and go to state 37
    transposition                  shift and go to state 38
    matrix_element                 shift and go to state 39
    vector_element                 shift and go to state 40
    function_name                  shift and go to state 45

state 15

    (17) assignment -> matrix_element . assignment_operator expression
    (19) assignment_operator -> . =
    (20) assignment_operator -> . ADDASSIGN
    (21) assignment_operator -> . SUBASSIGN
    (22) assignment_operator -> . MULASSIGN
    (23) assignment_operator -> . DIVASSIGN

    =               shift and go to state 26
    ADDASSIGN       shift and go to state 27
    SUBASSIGN       shift and go to state 28
    MULASSIGN       shift and go to state 29
    DIVASSIGN       shift and go to state 30

    assignment_operator            shift and go to state 53

state 16

    (18) assignment -> vector_element . assignment_operator expression
    (19) assignment_operator -> . =
    (20) assignment_operator -> . ADDASSIGN
    (21) assignment_operator -> . SUBASSIGN
    (22) assignment_operator -> . MULASSIGN
    (23) assignment_operator -> . DIVASSIGN

    =               shift and go to state 26
    ADDASSIGN       shift and go to state 27
    SUBASSIGN       shift and go to state 28
    MULASSIGN       shift and go to state 29
    DIVASSIGN       shift and go to state 30

    assignment_operator            shift and go to state 54

state 17

    (32) var -> ID .
    (40) matrix_element -> ID . [ INTNUM , INTNUM ]
    (39) vector_element -> ID . [ INTNUM ]

    =               reduce using rule 32 (var -> ID .)
    ADDASSIGN       reduce using rule 32 (var -> ID .)
    SUBASSIGN       reduce using rule 32 (var -> ID .)
    MULASSIGN       reduce using rule 32 (var -> ID .)
    DIVASSIGN       reduce using rule 32 (var -> ID .)
    +               reduce using rule 32 (var -> ID .)
    -               reduce using rule 32 (var -> ID .)
    *               reduce using rule 32 (var -> ID .)
    /               reduce using rule 32 (var -> ID .)
    DOTADD          reduce using rule 32 (var -> ID .)
    DOTSUB          reduce using rule 32 (var -> ID .)
    DOTMUL          reduce using rule 32 (var -> ID .)
    DOTDIV          reduce using rule 32 (var -> ID .)
    '               reduce using rule 32 (var -> ID .)
    ;               reduce using rule 32 (var -> ID .)
    ,               reduce using rule 32 (var -> ID .)
    EQ              reduce using rule 32 (var -> ID .)
    NE              reduce using rule 32 (var -> ID .)
    LE              reduce using rule 32 (var -> ID .)
    GE              reduce using rule 32 (var -> ID .)
    LT              reduce using rule 32 (var -> ID .)
    GT              reduce using rule 32 (var -> ID .)
    :               reduce using rule 32 (var -> ID .)
    )               reduce using rule 32 (var -> ID .)
    {               reduce using rule 32 (var -> ID .)
    IF              reduce using rule 32 (var -> ID .)
    FOR             reduce using rule 32 (var -> ID .)
    WHILE           reduce using rule 32 (var -> ID .)
    RETURN          reduce using rule 32 (var -> ID .)
    BREAK           reduce using rule 32 (var -> ID .)
    CONTINUE        reduce using rule 32 (var -> ID .)
    PRINT           reduce using rule 32 (var -> ID .)
    ID              reduce using rule 32 (var -> ID .)
    [               shift and go to state 55


state 18

    (3) instructions -> instructions instruction .

    {               reduce using rule 3 (instructions -> instructions instruction .)
    IF              reduce using rule 3 (instructions -> instructions instruction .)
    FOR             reduce using rule 3 (instructions -> instructions instruction .)
    WHILE           reduce using rule 3 (instructions -> instructions instruction .)
    RETURN          reduce using rule 3 (instructions -> instructions instruction .)
    BREAK           reduce using rule 3 (instructions -> instructions instruction .)
    CONTINUE        reduce using rule 3 (instructions -> instructions instruction .)
    PRINT           reduce using rule 3 (instructions -> instructions instruction .)
    ID              reduce using rule 3 (instructions -> instructions instruction .)
    $end            reduce using rule 3 (instructions -> instructions instruction .)
    }               reduce using rule 3 (instructions -> instructions instruction .)


state 19

    (5) instruction -> sys_instruction ; .

    {               reduce using rule 5 (instruction -> sys_instruction ; .)
    IF              reduce using rule 5 (instruction -> sys_instruction ; .)
    FOR             reduce using rule 5 (instruction -> sys_instruction ; .)
    WHILE           reduce using rule 5 (instruction -> sys_instruction ; .)
    RETURN          reduce using rule 5 (instruction -> sys_instruction ; .)
    BREAK           reduce using rule 5 (instruction -> sys_instruction ; .)
    CONTINUE        reduce using rule 5 (instruction -> sys_instruction ; .)
    PRINT           reduce using rule 5 (instruction -> sys_instruction ; .)
    ID              reduce using rule 5 (instruction -> sys_instruction ; .)
    $end            reduce using rule 5 (instruction -> sys_instruction ; .)
    }               reduce using rule 5 (instruction -> sys_instruction ; .)
    ELSE            reduce using rule 5 (instruction -> sys_instruction ; .)


state 20

    (6) instruction -> assignment ; .

    {               reduce using rule 6 (instruction -> assignment ; .)
    IF              reduce using rule 6 (instruction -> assignment ; .)
    FOR             reduce using rule 6 (instruction -> assignment ; .)
    WHILE           reduce using rule 6 (instruction -> assignment ; .)
    RETURN          reduce using rule 6 (instruction -> assignment ; .)
    BREAK           reduce using rule 6 (instruction -> assignment ; .)
    CONTINUE        reduce using rule 6 (instruction -> assignment ; .)
    PRINT           reduce using rule 6 (instruction -> assignment ; .)
    ID              reduce using rule 6 (instruction -> assignment ; .)
    $end            reduce using rule 6 (instruction -> assignment ; .)
    }               reduce using rule 6 (instruction -> assignment ; .)
    ELSE            reduce using rule 6 (instruction -> assignment ; .)


state 21

    (7) instruction -> { instructions . }
    (3) instructions -> instructions . instruction
    (5) instruction -> . sys_instruction ;
    (6) instruction -> . assignment ;
    (7) instruction -> . { instructions }
    (12) instruction -> . IF ( condition ) instruction
    (13) instruction -> . IF ( condition ) instruction ELSE instruction
    (14) instruction -> . FOR var = expression : expression instruction
    (15) instruction -> . WHILE ( condition ) instruction
    (8) sys_instruction -> . RETURN expression
    (9) sys_instruction -> . BREAK
    (10) sys_instruction -> . CONTINUE
    (11) sys_instruction -> . PRINT print_values
    (16) assignment -> . var assignment_operator expression
    (17) assignment -> . matrix_element assignment_operator expression
    (18) assignment -> . vector_element assignment_operator expression
    (32) var -> . ID
    (40) matrix_element -> . ID [ INTNUM , INTNUM ]
    (39) vector_element -> . ID [ INTNUM ]

    }               shift and go to state 56
    {               shift and go to state 6
    IF              shift and go to state 7
    FOR             shift and go to state 8
    WHILE           shift and go to state 10
    RETURN          shift and go to state 11
    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    PRINT           shift and go to state 14
    ID              shift and go to state 17

    instruction                    shift and go to state 18
    sys_instruction                shift and go to state 4
    assignment                     shift and go to state 5
    var                            shift and go to state 9
    matrix_element                 shift and go to state 15
    vector_element                 shift and go to state 16

state 22

    (12) instruction -> IF ( . condition ) instruction
    (13) instruction -> IF ( . condition ) instruction ELSE instruction
    (61) condition -> . expression EQ expression
    (62) condition -> . expression NE expression
    (63) condition -> . expression LE expression
    (64) condition -> . expression GE expression
    (65) condition -> . expression LT expression
    (66) condition -> . expression GT expression
    (45) expression -> . number
    (46) expression -> . var
    (47) expression -> . matrix
    (48) expression -> . matrix_function
    (49) expression -> . uminus
    (50) expression -> . transposition
    (51) expression -> . matrix_element
    (52) expression -> . vector_element
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (33) number -> . INTNUM
    (34) number -> . FLOATNUM
    (32) var -> . ID
    (24) matrix -> . [ vectors ]
    (28) matrix_function -> . function_name ( INTNUM )
    (67) uminus -> . - expression
    (68) transposition -> . expression '
    (40) matrix_element -> . ID [ INTNUM , INTNUM ]
    (39) vector_element -> . ID [ INTNUM ]
    (29) function_name -> . EYE
    (30) function_name -> . ONES
    (31) function_name -> . ZEROS

    INTNUM          shift and go to state 42
    FLOATNUM        shift and go to state 43
    ID              shift and go to state 17
    [               shift and go to state 44
    -               shift and go to state 41
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48

    condition                      shift and go to state 57
    expression                     shift and go to state 58
    number                         shift and go to state 33
    var                            shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    uminus                         shift and go to state 37
    transposition                  shift and go to state 38
    matrix_element                 shift and go to state 39
    vector_element                 shift and go to state 40
    function_name                  shift and go to state 45

state 23

    (14) instruction -> FOR var . = expression : expression instruction

    =               shift and go to state 59


state 24

    (32) var -> ID .

    =               reduce using rule 32 (var -> ID .)


state 25

    (16) assignment -> var assignment_operator . expression
    (45) expression -> . number
    (46) expression -> . var
    (47) expression -> . matrix
    (48) expression -> . matrix_function
    (49) expression -> . uminus
    (50) expression -> . transposition
    (51) expression -> . matrix_element
    (52) expression -> . vector_element
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (33) number -> . INTNUM
    (34) number -> . FLOATNUM
    (32) var -> . ID
    (24) matrix -> . [ vectors ]
    (28) matrix_function -> . function_name ( INTNUM )
    (67) uminus -> . - expression
    (68) transposition -> . expression '
    (40) matrix_element -> . ID [ INTNUM , INTNUM ]
    (39) vector_element -> . ID [ INTNUM ]
    (29) function_name -> . EYE
    (30) function_name -> . ONES
    (31) function_name -> . ZEROS

    INTNUM          shift and go to state 42
    FLOATNUM        shift and go to state 43
    ID              shift and go to state 17
    [               shift and go to state 44
    -               shift and go to state 41
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48

    var                            shift and go to state 34
    expression                     shift and go to state 60
    number                         shift and go to state 33
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    uminus                         shift and go to state 37
    transposition                  shift and go to state 38
    matrix_element                 shift and go to state 39
    vector_element                 shift and go to state 40
    function_name                  shift and go to state 45

state 26

    (19) assignment_operator -> = .

    INTNUM          reduce using rule 19 (assignment_operator -> = .)
    FLOATNUM        reduce using rule 19 (assignment_operator -> = .)
    ID              reduce using rule 19 (assignment_operator -> = .)
    [               reduce using rule 19 (assignment_operator -> = .)
    -               reduce using rule 19 (assignment_operator -> = .)
    EYE             reduce using rule 19 (assignment_operator -> = .)
    ONES            reduce using rule 19 (assignment_operator -> = .)
    ZEROS           reduce using rule 19 (assignment_operator -> = .)


state 27

    (20) assignment_operator -> ADDASSIGN .

    INTNUM          reduce using rule 20 (assignment_operator -> ADDASSIGN .)
    FLOATNUM        reduce using rule 20 (assignment_operator -> ADDASSIGN .)
    ID              reduce using rule 20 (assignment_operator -> ADDASSIGN .)
    [               reduce using rule 20 (assignment_operator -> ADDASSIGN .)
    -               reduce using rule 20 (assignment_operator -> ADDASSIGN .)
    EYE             reduce using rule 20 (assignment_operator -> ADDASSIGN .)
    ONES            reduce using rule 20 (assignment_operator -> ADDASSIGN .)
    ZEROS           reduce using rule 20 (assignment_operator -> ADDASSIGN .)


state 28

    (21) assignment_operator -> SUBASSIGN .

    INTNUM          reduce using rule 21 (assignment_operator -> SUBASSIGN .)
    FLOATNUM        reduce using rule 21 (assignment_operator -> SUBASSIGN .)
    ID              reduce using rule 21 (assignment_operator -> SUBASSIGN .)
    [               reduce using rule 21 (assignment_operator -> SUBASSIGN .)
    -               reduce using rule 21 (assignment_operator -> SUBASSIGN .)
    EYE             reduce using rule 21 (assignment_operator -> SUBASSIGN .)
    ONES            reduce using rule 21 (assignment_operator -> SUBASSIGN .)
    ZEROS           reduce using rule 21 (assignment_operator -> SUBASSIGN .)


state 29

    (22) assignment_operator -> MULASSIGN .

    INTNUM          reduce using rule 22 (assignment_operator -> MULASSIGN .)
    FLOATNUM        reduce using rule 22 (assignment_operator -> MULASSIGN .)
    ID              reduce using rule 22 (assignment_operator -> MULASSIGN .)
    [               reduce using rule 22 (assignment_operator -> MULASSIGN .)
    -               reduce using rule 22 (assignment_operator -> MULASSIGN .)
    EYE             reduce using rule 22 (assignment_operator -> MULASSIGN .)
    ONES            reduce using rule 22 (assignment_operator -> MULASSIGN .)
    ZEROS           reduce using rule 22 (assignment_operator -> MULASSIGN .)


state 30

    (23) assignment_operator -> DIVASSIGN .

    INTNUM          reduce using rule 23 (assignment_operator -> DIVASSIGN .)
    FLOATNUM        reduce using rule 23 (assignment_operator -> DIVASSIGN .)
    ID              reduce using rule 23 (assignment_operator -> DIVASSIGN .)
    [               reduce using rule 23 (assignment_operator -> DIVASSIGN .)
    -               reduce using rule 23 (assignment_operator -> DIVASSIGN .)
    EYE             reduce using rule 23 (assignment_operator -> DIVASSIGN .)
    ONES            reduce using rule 23 (assignment_operator -> DIVASSIGN .)
    ZEROS           reduce using rule 23 (assignment_operator -> DIVASSIGN .)


state 31

    (15) instruction -> WHILE ( . condition ) instruction
    (61) condition -> . expression EQ expression
    (62) condition -> . expression NE expression
    (63) condition -> . expression LE expression
    (64) condition -> . expression GE expression
    (65) condition -> . expression LT expression
    (66) condition -> . expression GT expression
    (45) expression -> . number
    (46) expression -> . var
    (47) expression -> . matrix
    (48) expression -> . matrix_function
    (49) expression -> . uminus
    (50) expression -> . transposition
    (51) expression -> . matrix_element
    (52) expression -> . vector_element
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (33) number -> . INTNUM
    (34) number -> . FLOATNUM
    (32) var -> . ID
    (24) matrix -> . [ vectors ]
    (28) matrix_function -> . function_name ( INTNUM )
    (67) uminus -> . - expression
    (68) transposition -> . expression '
    (40) matrix_element -> . ID [ INTNUM , INTNUM ]
    (39) vector_element -> . ID [ INTNUM ]
    (29) function_name -> . EYE
    (30) function_name -> . ONES
    (31) function_name -> . ZEROS

    INTNUM          shift and go to state 42
    FLOATNUM        shift and go to state 43
    ID              shift and go to state 17
    [               shift and go to state 44
    -               shift and go to state 41
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48

    condition                      shift and go to state 61
    expression                     shift and go to state 58
    number                         shift and go to state 33
    var                            shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    uminus                         shift and go to state 37
    transposition                  shift and go to state 38
    matrix_element                 shift and go to state 39
    vector_element                 shift and go to state 40
    function_name                  shift and go to state 45

state 32

    (8) sys_instruction -> RETURN expression .
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (68) transposition -> expression . '

    ;               reduce using rule 8 (sys_instruction -> RETURN expression .)
    +               shift and go to state 62
    -               shift and go to state 63
    *               shift and go to state 64
    /               shift and go to state 65
    DOTADD          shift and go to state 66
    DOTSUB          shift and go to state 67
    DOTMUL          shift and go to state 68
    DOTDIV          shift and go to state 69
    '               shift and go to state 70


state 33

    (45) expression -> number .

    +               reduce using rule 45 (expression -> number .)
    -               reduce using rule 45 (expression -> number .)
    *               reduce using rule 45 (expression -> number .)
    /               reduce using rule 45 (expression -> number .)
    DOTADD          reduce using rule 45 (expression -> number .)
    DOTSUB          reduce using rule 45 (expression -> number .)
    DOTMUL          reduce using rule 45 (expression -> number .)
    DOTDIV          reduce using rule 45 (expression -> number .)
    '               reduce using rule 45 (expression -> number .)
    ;               reduce using rule 45 (expression -> number .)
    ,               reduce using rule 45 (expression -> number .)
    EQ              reduce using rule 45 (expression -> number .)
    NE              reduce using rule 45 (expression -> number .)
    LE              reduce using rule 45 (expression -> number .)
    GE              reduce using rule 45 (expression -> number .)
    LT              reduce using rule 45 (expression -> number .)
    GT              reduce using rule 45 (expression -> number .)
    :               reduce using rule 45 (expression -> number .)
    )               reduce using rule 45 (expression -> number .)
    {               reduce using rule 45 (expression -> number .)
    IF              reduce using rule 45 (expression -> number .)
    FOR             reduce using rule 45 (expression -> number .)
    WHILE           reduce using rule 45 (expression -> number .)
    RETURN          reduce using rule 45 (expression -> number .)
    BREAK           reduce using rule 45 (expression -> number .)
    CONTINUE        reduce using rule 45 (expression -> number .)
    PRINT           reduce using rule 45 (expression -> number .)
    ID              reduce using rule 45 (expression -> number .)


state 34

    (46) expression -> var .

    +               reduce using rule 46 (expression -> var .)
    -               reduce using rule 46 (expression -> var .)
    *               reduce using rule 46 (expression -> var .)
    /               reduce using rule 46 (expression -> var .)
    DOTADD          reduce using rule 46 (expression -> var .)
    DOTSUB          reduce using rule 46 (expression -> var .)
    DOTMUL          reduce using rule 46 (expression -> var .)
    DOTDIV          reduce using rule 46 (expression -> var .)
    '               reduce using rule 46 (expression -> var .)
    ;               reduce using rule 46 (expression -> var .)
    ,               reduce using rule 46 (expression -> var .)
    EQ              reduce using rule 46 (expression -> var .)
    NE              reduce using rule 46 (expression -> var .)
    LE              reduce using rule 46 (expression -> var .)
    GE              reduce using rule 46 (expression -> var .)
    LT              reduce using rule 46 (expression -> var .)
    GT              reduce using rule 46 (expression -> var .)
    :               reduce using rule 46 (expression -> var .)
    )               reduce using rule 46 (expression -> var .)
    {               reduce using rule 46 (expression -> var .)
    IF              reduce using rule 46 (expression -> var .)
    FOR             reduce using rule 46 (expression -> var .)
    WHILE           reduce using rule 46 (expression -> var .)
    RETURN          reduce using rule 46 (expression -> var .)
    BREAK           reduce using rule 46 (expression -> var .)
    CONTINUE        reduce using rule 46 (expression -> var .)
    PRINT           reduce using rule 46 (expression -> var .)
    ID              reduce using rule 46 (expression -> var .)


state 35

    (47) expression -> matrix .

    +               reduce using rule 47 (expression -> matrix .)
    -               reduce using rule 47 (expression -> matrix .)
    *               reduce using rule 47 (expression -> matrix .)
    /               reduce using rule 47 (expression -> matrix .)
    DOTADD          reduce using rule 47 (expression -> matrix .)
    DOTSUB          reduce using rule 47 (expression -> matrix .)
    DOTMUL          reduce using rule 47 (expression -> matrix .)
    DOTDIV          reduce using rule 47 (expression -> matrix .)
    '               reduce using rule 47 (expression -> matrix .)
    ;               reduce using rule 47 (expression -> matrix .)
    ,               reduce using rule 47 (expression -> matrix .)
    EQ              reduce using rule 47 (expression -> matrix .)
    NE              reduce using rule 47 (expression -> matrix .)
    LE              reduce using rule 47 (expression -> matrix .)
    GE              reduce using rule 47 (expression -> matrix .)
    LT              reduce using rule 47 (expression -> matrix .)
    GT              reduce using rule 47 (expression -> matrix .)
    :               reduce using rule 47 (expression -> matrix .)
    )               reduce using rule 47 (expression -> matrix .)
    {               reduce using rule 47 (expression -> matrix .)
    IF              reduce using rule 47 (expression -> matrix .)
    FOR             reduce using rule 47 (expression -> matrix .)
    WHILE           reduce using rule 47 (expression -> matrix .)
    RETURN          reduce using rule 47 (expression -> matrix .)
    BREAK           reduce using rule 47 (expression -> matrix .)
    CONTINUE        reduce using rule 47 (expression -> matrix .)
    PRINT           reduce using rule 47 (expression -> matrix .)
    ID              reduce using rule 47 (expression -> matrix .)


state 36

    (48) expression -> matrix_function .

    +               reduce using rule 48 (expression -> matrix_function .)
    -               reduce using rule 48 (expression -> matrix_function .)
    *               reduce using rule 48 (expression -> matrix_function .)
    /               reduce using rule 48 (expression -> matrix_function .)
    DOTADD          reduce using rule 48 (expression -> matrix_function .)
    DOTSUB          reduce using rule 48 (expression -> matrix_function .)
    DOTMUL          reduce using rule 48 (expression -> matrix_function .)
    DOTDIV          reduce using rule 48 (expression -> matrix_function .)
    '               reduce using rule 48 (expression -> matrix_function .)
    ;               reduce using rule 48 (expression -> matrix_function .)
    ,               reduce using rule 48 (expression -> matrix_function .)
    EQ              reduce using rule 48 (expression -> matrix_function .)
    NE              reduce using rule 48 (expression -> matrix_function .)
    LE              reduce using rule 48 (expression -> matrix_function .)
    GE              reduce using rule 48 (expression -> matrix_function .)
    LT              reduce using rule 48 (expression -> matrix_function .)
    GT              reduce using rule 48 (expression -> matrix_function .)
    :               reduce using rule 48 (expression -> matrix_function .)
    )               reduce using rule 48 (expression -> matrix_function .)
    {               reduce using rule 48 (expression -> matrix_function .)
    IF              reduce using rule 48 (expression -> matrix_function .)
    FOR             reduce using rule 48 (expression -> matrix_function .)
    WHILE           reduce using rule 48 (expression -> matrix_function .)
    RETURN          reduce using rule 48 (expression -> matrix_function .)
    BREAK           reduce using rule 48 (expression -> matrix_function .)
    CONTINUE        reduce using rule 48 (expression -> matrix_function .)
    PRINT           reduce using rule 48 (expression -> matrix_function .)
    ID              reduce using rule 48 (expression -> matrix_function .)


state 37

    (49) expression -> uminus .

    +               reduce using rule 49 (expression -> uminus .)
    -               reduce using rule 49 (expression -> uminus .)
    *               reduce using rule 49 (expression -> uminus .)
    /               reduce using rule 49 (expression -> uminus .)
    DOTADD          reduce using rule 49 (expression -> uminus .)
    DOTSUB          reduce using rule 49 (expression -> uminus .)
    DOTMUL          reduce using rule 49 (expression -> uminus .)
    DOTDIV          reduce using rule 49 (expression -> uminus .)
    '               reduce using rule 49 (expression -> uminus .)
    ;               reduce using rule 49 (expression -> uminus .)
    ,               reduce using rule 49 (expression -> uminus .)
    EQ              reduce using rule 49 (expression -> uminus .)
    NE              reduce using rule 49 (expression -> uminus .)
    LE              reduce using rule 49 (expression -> uminus .)
    GE              reduce using rule 49 (expression -> uminus .)
    LT              reduce using rule 49 (expression -> uminus .)
    GT              reduce using rule 49 (expression -> uminus .)
    :               reduce using rule 49 (expression -> uminus .)
    )               reduce using rule 49 (expression -> uminus .)
    {               reduce using rule 49 (expression -> uminus .)
    IF              reduce using rule 49 (expression -> uminus .)
    FOR             reduce using rule 49 (expression -> uminus .)
    WHILE           reduce using rule 49 (expression -> uminus .)
    RETURN          reduce using rule 49 (expression -> uminus .)
    BREAK           reduce using rule 49 (expression -> uminus .)
    CONTINUE        reduce using rule 49 (expression -> uminus .)
    PRINT           reduce using rule 49 (expression -> uminus .)
    ID              reduce using rule 49 (expression -> uminus .)


state 38

    (50) expression -> transposition .

    +               reduce using rule 50 (expression -> transposition .)
    -               reduce using rule 50 (expression -> transposition .)
    *               reduce using rule 50 (expression -> transposition .)
    /               reduce using rule 50 (expression -> transposition .)
    DOTADD          reduce using rule 50 (expression -> transposition .)
    DOTSUB          reduce using rule 50 (expression -> transposition .)
    DOTMUL          reduce using rule 50 (expression -> transposition .)
    DOTDIV          reduce using rule 50 (expression -> transposition .)
    '               reduce using rule 50 (expression -> transposition .)
    ;               reduce using rule 50 (expression -> transposition .)
    ,               reduce using rule 50 (expression -> transposition .)
    EQ              reduce using rule 50 (expression -> transposition .)
    NE              reduce using rule 50 (expression -> transposition .)
    LE              reduce using rule 50 (expression -> transposition .)
    GE              reduce using rule 50 (expression -> transposition .)
    LT              reduce using rule 50 (expression -> transposition .)
    GT              reduce using rule 50 (expression -> transposition .)
    :               reduce using rule 50 (expression -> transposition .)
    )               reduce using rule 50 (expression -> transposition .)
    {               reduce using rule 50 (expression -> transposition .)
    IF              reduce using rule 50 (expression -> transposition .)
    FOR             reduce using rule 50 (expression -> transposition .)
    WHILE           reduce using rule 50 (expression -> transposition .)
    RETURN          reduce using rule 50 (expression -> transposition .)
    BREAK           reduce using rule 50 (expression -> transposition .)
    CONTINUE        reduce using rule 50 (expression -> transposition .)
    PRINT           reduce using rule 50 (expression -> transposition .)
    ID              reduce using rule 50 (expression -> transposition .)


state 39

    (51) expression -> matrix_element .

    +               reduce using rule 51 (expression -> matrix_element .)
    -               reduce using rule 51 (expression -> matrix_element .)
    *               reduce using rule 51 (expression -> matrix_element .)
    /               reduce using rule 51 (expression -> matrix_element .)
    DOTADD          reduce using rule 51 (expression -> matrix_element .)
    DOTSUB          reduce using rule 51 (expression -> matrix_element .)
    DOTMUL          reduce using rule 51 (expression -> matrix_element .)
    DOTDIV          reduce using rule 51 (expression -> matrix_element .)
    '               reduce using rule 51 (expression -> matrix_element .)
    ;               reduce using rule 51 (expression -> matrix_element .)
    ,               reduce using rule 51 (expression -> matrix_element .)
    EQ              reduce using rule 51 (expression -> matrix_element .)
    NE              reduce using rule 51 (expression -> matrix_element .)
    LE              reduce using rule 51 (expression -> matrix_element .)
    GE              reduce using rule 51 (expression -> matrix_element .)
    LT              reduce using rule 51 (expression -> matrix_element .)
    GT              reduce using rule 51 (expression -> matrix_element .)
    :               reduce using rule 51 (expression -> matrix_element .)
    )               reduce using rule 51 (expression -> matrix_element .)
    {               reduce using rule 51 (expression -> matrix_element .)
    IF              reduce using rule 51 (expression -> matrix_element .)
    FOR             reduce using rule 51 (expression -> matrix_element .)
    WHILE           reduce using rule 51 (expression -> matrix_element .)
    RETURN          reduce using rule 51 (expression -> matrix_element .)
    BREAK           reduce using rule 51 (expression -> matrix_element .)
    CONTINUE        reduce using rule 51 (expression -> matrix_element .)
    PRINT           reduce using rule 51 (expression -> matrix_element .)
    ID              reduce using rule 51 (expression -> matrix_element .)


state 40

    (52) expression -> vector_element .

    +               reduce using rule 52 (expression -> vector_element .)
    -               reduce using rule 52 (expression -> vector_element .)
    *               reduce using rule 52 (expression -> vector_element .)
    /               reduce using rule 52 (expression -> vector_element .)
    DOTADD          reduce using rule 52 (expression -> vector_element .)
    DOTSUB          reduce using rule 52 (expression -> vector_element .)
    DOTMUL          reduce using rule 52 (expression -> vector_element .)
    DOTDIV          reduce using rule 52 (expression -> vector_element .)
    '               reduce using rule 52 (expression -> vector_element .)
    ;               reduce using rule 52 (expression -> vector_element .)
    ,               reduce using rule 52 (expression -> vector_element .)
    EQ              reduce using rule 52 (expression -> vector_element .)
    NE              reduce using rule 52 (expression -> vector_element .)
    LE              reduce using rule 52 (expression -> vector_element .)
    GE              reduce using rule 52 (expression -> vector_element .)
    LT              reduce using rule 52 (expression -> vector_element .)
    GT              reduce using rule 52 (expression -> vector_element .)
    :               reduce using rule 52 (expression -> vector_element .)
    )               reduce using rule 52 (expression -> vector_element .)
    {               reduce using rule 52 (expression -> vector_element .)
    IF              reduce using rule 52 (expression -> vector_element .)
    FOR             reduce using rule 52 (expression -> vector_element .)
    WHILE           reduce using rule 52 (expression -> vector_element .)
    RETURN          reduce using rule 52 (expression -> vector_element .)
    BREAK           reduce using rule 52 (expression -> vector_element .)
    CONTINUE        reduce using rule 52 (expression -> vector_element .)
    PRINT           reduce using rule 52 (expression -> vector_element .)
    ID              reduce using rule 52 (expression -> vector_element .)


state 41

    (67) uminus -> - . expression
    (45) expression -> . number
    (46) expression -> . var
    (47) expression -> . matrix
    (48) expression -> . matrix_function
    (49) expression -> . uminus
    (50) expression -> . transposition
    (51) expression -> . matrix_element
    (52) expression -> . vector_element
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (33) number -> . INTNUM
    (34) number -> . FLOATNUM
    (32) var -> . ID
    (24) matrix -> . [ vectors ]
    (28) matrix_function -> . function_name ( INTNUM )
    (67) uminus -> . - expression
    (68) transposition -> . expression '
    (40) matrix_element -> . ID [ INTNUM , INTNUM ]
    (39) vector_element -> . ID [ INTNUM ]
    (29) function_name -> . EYE
    (30) function_name -> . ONES
    (31) function_name -> . ZEROS

    INTNUM          shift and go to state 42
    FLOATNUM        shift and go to state 43
    ID              shift and go to state 17
    [               shift and go to state 44
    -               shift and go to state 41
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48

    expression                     shift and go to state 71
    number                         shift and go to state 33
    var                            shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    uminus                         shift and go to state 37
    transposition                  shift and go to state 38
    matrix_element                 shift and go to state 39
    vector_element                 shift and go to state 40
    function_name                  shift and go to state 45

state 42

    (33) number -> INTNUM .

    +               reduce using rule 33 (number -> INTNUM .)
    -               reduce using rule 33 (number -> INTNUM .)
    *               reduce using rule 33 (number -> INTNUM .)
    /               reduce using rule 33 (number -> INTNUM .)
    DOTADD          reduce using rule 33 (number -> INTNUM .)
    DOTSUB          reduce using rule 33 (number -> INTNUM .)
    DOTMUL          reduce using rule 33 (number -> INTNUM .)
    DOTDIV          reduce using rule 33 (number -> INTNUM .)
    '               reduce using rule 33 (number -> INTNUM .)
    ;               reduce using rule 33 (number -> INTNUM .)
    ,               reduce using rule 33 (number -> INTNUM .)
    EQ              reduce using rule 33 (number -> INTNUM .)
    NE              reduce using rule 33 (number -> INTNUM .)
    LE              reduce using rule 33 (number -> INTNUM .)
    GE              reduce using rule 33 (number -> INTNUM .)
    LT              reduce using rule 33 (number -> INTNUM .)
    GT              reduce using rule 33 (number -> INTNUM .)
    :               reduce using rule 33 (number -> INTNUM .)
    )               reduce using rule 33 (number -> INTNUM .)
    {               reduce using rule 33 (number -> INTNUM .)
    IF              reduce using rule 33 (number -> INTNUM .)
    FOR             reduce using rule 33 (number -> INTNUM .)
    WHILE           reduce using rule 33 (number -> INTNUM .)
    RETURN          reduce using rule 33 (number -> INTNUM .)
    BREAK           reduce using rule 33 (number -> INTNUM .)
    CONTINUE        reduce using rule 33 (number -> INTNUM .)
    PRINT           reduce using rule 33 (number -> INTNUM .)
    ID              reduce using rule 33 (number -> INTNUM .)
    ]               reduce using rule 33 (number -> INTNUM .)


state 43

    (34) number -> FLOATNUM .

    +               reduce using rule 34 (number -> FLOATNUM .)
    -               reduce using rule 34 (number -> FLOATNUM .)
    *               reduce using rule 34 (number -> FLOATNUM .)
    /               reduce using rule 34 (number -> FLOATNUM .)
    DOTADD          reduce using rule 34 (number -> FLOATNUM .)
    DOTSUB          reduce using rule 34 (number -> FLOATNUM .)
    DOTMUL          reduce using rule 34 (number -> FLOATNUM .)
    DOTDIV          reduce using rule 34 (number -> FLOATNUM .)
    '               reduce using rule 34 (number -> FLOATNUM .)
    ;               reduce using rule 34 (number -> FLOATNUM .)
    ,               reduce using rule 34 (number -> FLOATNUM .)
    EQ              reduce using rule 34 (number -> FLOATNUM .)
    NE              reduce using rule 34 (number -> FLOATNUM .)
    LE              reduce using rule 34 (number -> FLOATNUM .)
    GE              reduce using rule 34 (number -> FLOATNUM .)
    LT              reduce using rule 34 (number -> FLOATNUM .)
    GT              reduce using rule 34 (number -> FLOATNUM .)
    :               reduce using rule 34 (number -> FLOATNUM .)
    )               reduce using rule 34 (number -> FLOATNUM .)
    {               reduce using rule 34 (number -> FLOATNUM .)
    IF              reduce using rule 34 (number -> FLOATNUM .)
    FOR             reduce using rule 34 (number -> FLOATNUM .)
    WHILE           reduce using rule 34 (number -> FLOATNUM .)
    RETURN          reduce using rule 34 (number -> FLOATNUM .)
    BREAK           reduce using rule 34 (number -> FLOATNUM .)
    CONTINUE        reduce using rule 34 (number -> FLOATNUM .)
    PRINT           reduce using rule 34 (number -> FLOATNUM .)
    ID              reduce using rule 34 (number -> FLOATNUM .)
    ]               reduce using rule 34 (number -> FLOATNUM .)


state 44

    (24) matrix -> [ . vectors ]
    (26) vectors -> . vectors , vector
    (27) vectors -> . vector
    (25) vector -> . [ variables ]

    [               shift and go to state 72

    vectors                        shift and go to state 73
    vector                         shift and go to state 74

state 45

    (28) matrix_function -> function_name . ( INTNUM )

    (               shift and go to state 75


state 46

    (29) function_name -> EYE .

    (               reduce using rule 29 (function_name -> EYE .)


state 47

    (30) function_name -> ONES .

    (               reduce using rule 30 (function_name -> ONES .)


state 48

    (31) function_name -> ZEROS .

    (               reduce using rule 31 (function_name -> ZEROS .)


state 49

    (11) sys_instruction -> PRINT print_values .
    (69) print_values -> print_values . , string
    (70) print_values -> print_values . , expression

    ;               reduce using rule 11 (sys_instruction -> PRINT print_values .)
    ,               shift and go to state 76


state 50

    (71) print_values -> string .

    ,               reduce using rule 71 (print_values -> string .)
    ;               reduce using rule 71 (print_values -> string .)


state 51

    (72) print_values -> expression .
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (68) transposition -> expression . '

    ,               reduce using rule 72 (print_values -> expression .)
    ;               reduce using rule 72 (print_values -> expression .)
    +               shift and go to state 62
    -               shift and go to state 63
    *               shift and go to state 64
    /               shift and go to state 65
    DOTADD          shift and go to state 66
    DOTSUB          shift and go to state 67
    DOTMUL          shift and go to state 68
    DOTDIV          shift and go to state 69
    '               shift and go to state 70


state 52

    (35) string -> STRING .

    ,               reduce using rule 35 (string -> STRING .)
    ;               reduce using rule 35 (string -> STRING .)


state 53

    (17) assignment -> matrix_element assignment_operator . expression
    (45) expression -> . number
    (46) expression -> . var
    (47) expression -> . matrix
    (48) expression -> . matrix_function
    (49) expression -> . uminus
    (50) expression -> . transposition
    (51) expression -> . matrix_element
    (52) expression -> . vector_element
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (33) number -> . INTNUM
    (34) number -> . FLOATNUM
    (32) var -> . ID
    (24) matrix -> . [ vectors ]
    (28) matrix_function -> . function_name ( INTNUM )
    (67) uminus -> . - expression
    (68) transposition -> . expression '
    (40) matrix_element -> . ID [ INTNUM , INTNUM ]
    (39) vector_element -> . ID [ INTNUM ]
    (29) function_name -> . EYE
    (30) function_name -> . ONES
    (31) function_name -> . ZEROS

    INTNUM          shift and go to state 42
    FLOATNUM        shift and go to state 43
    ID              shift and go to state 17
    [               shift and go to state 44
    -               shift and go to state 41
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48

    matrix_element                 shift and go to state 39
    expression                     shift and go to state 77
    number                         shift and go to state 33
    var                            shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    uminus                         shift and go to state 37
    transposition                  shift and go to state 38
    vector_element                 shift and go to state 40
    function_name                  shift and go to state 45

state 54

    (18) assignment -> vector_element assignment_operator . expression
    (45) expression -> . number
    (46) expression -> . var
    (47) expression -> . matrix
    (48) expression -> . matrix_function
    (49) expression -> . uminus
    (50) expression -> . transposition
    (51) expression -> . matrix_element
    (52) expression -> . vector_element
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (33) number -> . INTNUM
    (34) number -> . FLOATNUM
    (32) var -> . ID
    (24) matrix -> . [ vectors ]
    (28) matrix_function -> . function_name ( INTNUM )
    (67) uminus -> . - expression
    (68) transposition -> . expression '
    (40) matrix_element -> . ID [ INTNUM , INTNUM ]
    (39) vector_element -> . ID [ INTNUM ]
    (29) function_name -> . EYE
    (30) function_name -> . ONES
    (31) function_name -> . ZEROS

    INTNUM          shift and go to state 42
    FLOATNUM        shift and go to state 43
    ID              shift and go to state 17
    [               shift and go to state 44
    -               shift and go to state 41
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48

    vector_element                 shift and go to state 40
    expression                     shift and go to state 78
    number                         shift and go to state 33
    var                            shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    uminus                         shift and go to state 37
    transposition                  shift and go to state 38
    matrix_element                 shift and go to state 39
    function_name                  shift and go to state 45

state 55

    (40) matrix_element -> ID [ . INTNUM , INTNUM ]
    (39) vector_element -> ID [ . INTNUM ]

    INTNUM          shift and go to state 79


state 56

    (7) instruction -> { instructions } .

    {               reduce using rule 7 (instruction -> { instructions } .)
    IF              reduce using rule 7 (instruction -> { instructions } .)
    FOR             reduce using rule 7 (instruction -> { instructions } .)
    WHILE           reduce using rule 7 (instruction -> { instructions } .)
    RETURN          reduce using rule 7 (instruction -> { instructions } .)
    BREAK           reduce using rule 7 (instruction -> { instructions } .)
    CONTINUE        reduce using rule 7 (instruction -> { instructions } .)
    PRINT           reduce using rule 7 (instruction -> { instructions } .)
    ID              reduce using rule 7 (instruction -> { instructions } .)
    $end            reduce using rule 7 (instruction -> { instructions } .)
    }               reduce using rule 7 (instruction -> { instructions } .)
    ELSE            reduce using rule 7 (instruction -> { instructions } .)


state 57

    (12) instruction -> IF ( condition . ) instruction
    (13) instruction -> IF ( condition . ) instruction ELSE instruction

    )               shift and go to state 80


state 58

    (61) condition -> expression . EQ expression
    (62) condition -> expression . NE expression
    (63) condition -> expression . LE expression
    (64) condition -> expression . GE expression
    (65) condition -> expression . LT expression
    (66) condition -> expression . GT expression
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (68) transposition -> expression . '

    EQ              shift and go to state 81
    NE              shift and go to state 82
    LE              shift and go to state 83
    GE              shift and go to state 84
    LT              shift and go to state 85
    GT              shift and go to state 86
    +               shift and go to state 62
    -               shift and go to state 63
    *               shift and go to state 64
    /               shift and go to state 65
    DOTADD          shift and go to state 66
    DOTSUB          shift and go to state 67
    DOTMUL          shift and go to state 68
    DOTDIV          shift and go to state 69
    '               shift and go to state 70


state 59

    (14) instruction -> FOR var = . expression : expression instruction
    (45) expression -> . number
    (46) expression -> . var
    (47) expression -> . matrix
    (48) expression -> . matrix_function
    (49) expression -> . uminus
    (50) expression -> . transposition
    (51) expression -> . matrix_element
    (52) expression -> . vector_element
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (33) number -> . INTNUM
    (34) number -> . FLOATNUM
    (32) var -> . ID
    (24) matrix -> . [ vectors ]
    (28) matrix_function -> . function_name ( INTNUM )
    (67) uminus -> . - expression
    (68) transposition -> . expression '
    (40) matrix_element -> . ID [ INTNUM , INTNUM ]
    (39) vector_element -> . ID [ INTNUM ]
    (29) function_name -> . EYE
    (30) function_name -> . ONES
    (31) function_name -> . ZEROS

    INTNUM          shift and go to state 42
    FLOATNUM        shift and go to state 43
    ID              shift and go to state 17
    [               shift and go to state 44
    -               shift and go to state 41
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48

    var                            shift and go to state 34
    expression                     shift and go to state 87
    number                         shift and go to state 33
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    uminus                         shift and go to state 37
    transposition                  shift and go to state 38
    matrix_element                 shift and go to state 39
    vector_element                 shift and go to state 40
    function_name                  shift and go to state 45

state 60

    (16) assignment -> var assignment_operator expression .
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (68) transposition -> expression . '

    ;               reduce using rule 16 (assignment -> var assignment_operator expression .)
    +               shift and go to state 62
    -               shift and go to state 63
    *               shift and go to state 64
    /               shift and go to state 65
    DOTADD          shift and go to state 66
    DOTSUB          shift and go to state 67
    DOTMUL          shift and go to state 68
    DOTDIV          shift and go to state 69
    '               shift and go to state 70


state 61

    (15) instruction -> WHILE ( condition . ) instruction

    )               shift and go to state 88


state 62

    (53) expression -> expression + . expression
    (45) expression -> . number
    (46) expression -> . var
    (47) expression -> . matrix
    (48) expression -> . matrix_function
    (49) expression -> . uminus
    (50) expression -> . transposition
    (51) expression -> . matrix_element
    (52) expression -> . vector_element
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (33) number -> . INTNUM
    (34) number -> . FLOATNUM
    (32) var -> . ID
    (24) matrix -> . [ vectors ]
    (28) matrix_function -> . function_name ( INTNUM )
    (67) uminus -> . - expression
    (68) transposition -> . expression '
    (40) matrix_element -> . ID [ INTNUM , INTNUM ]
    (39) vector_element -> . ID [ INTNUM ]
    (29) function_name -> . EYE
    (30) function_name -> . ONES
    (31) function_name -> . ZEROS

    INTNUM          shift and go to state 42
    FLOATNUM        shift and go to state 43
    ID              shift and go to state 17
    [               shift and go to state 44
    -               shift and go to state 41
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48

    expression                     shift and go to state 89
    number                         shift and go to state 33
    var                            shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    uminus                         shift and go to state 37
    transposition                  shift and go to state 38
    matrix_element                 shift and go to state 39
    vector_element                 shift and go to state 40
    function_name                  shift and go to state 45

state 63

    (54) expression -> expression - . expression
    (45) expression -> . number
    (46) expression -> . var
    (47) expression -> . matrix
    (48) expression -> . matrix_function
    (49) expression -> . uminus
    (50) expression -> . transposition
    (51) expression -> . matrix_element
    (52) expression -> . vector_element
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (33) number -> . INTNUM
    (34) number -> . FLOATNUM
    (32) var -> . ID
    (24) matrix -> . [ vectors ]
    (28) matrix_function -> . function_name ( INTNUM )
    (67) uminus -> . - expression
    (68) transposition -> . expression '
    (40) matrix_element -> . ID [ INTNUM , INTNUM ]
    (39) vector_element -> . ID [ INTNUM ]
    (29) function_name -> . EYE
    (30) function_name -> . ONES
    (31) function_name -> . ZEROS

    INTNUM          shift and go to state 42
    FLOATNUM        shift and go to state 43
    ID              shift and go to state 17
    [               shift and go to state 44
    -               shift and go to state 41
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48

    expression                     shift and go to state 90
    number                         shift and go to state 33
    var                            shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    uminus                         shift and go to state 37
    transposition                  shift and go to state 38
    matrix_element                 shift and go to state 39
    vector_element                 shift and go to state 40
    function_name                  shift and go to state 45

state 64

    (55) expression -> expression * . expression
    (45) expression -> . number
    (46) expression -> . var
    (47) expression -> . matrix
    (48) expression -> . matrix_function
    (49) expression -> . uminus
    (50) expression -> . transposition
    (51) expression -> . matrix_element
    (52) expression -> . vector_element
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (33) number -> . INTNUM
    (34) number -> . FLOATNUM
    (32) var -> . ID
    (24) matrix -> . [ vectors ]
    (28) matrix_function -> . function_name ( INTNUM )
    (67) uminus -> . - expression
    (68) transposition -> . expression '
    (40) matrix_element -> . ID [ INTNUM , INTNUM ]
    (39) vector_element -> . ID [ INTNUM ]
    (29) function_name -> . EYE
    (30) function_name -> . ONES
    (31) function_name -> . ZEROS

    INTNUM          shift and go to state 42
    FLOATNUM        shift and go to state 43
    ID              shift and go to state 17
    [               shift and go to state 44
    -               shift and go to state 41
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48

    expression                     shift and go to state 91
    number                         shift and go to state 33
    var                            shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    uminus                         shift and go to state 37
    transposition                  shift and go to state 38
    matrix_element                 shift and go to state 39
    vector_element                 shift and go to state 40
    function_name                  shift and go to state 45

state 65

    (56) expression -> expression / . expression
    (45) expression -> . number
    (46) expression -> . var
    (47) expression -> . matrix
    (48) expression -> . matrix_function
    (49) expression -> . uminus
    (50) expression -> . transposition
    (51) expression -> . matrix_element
    (52) expression -> . vector_element
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (33) number -> . INTNUM
    (34) number -> . FLOATNUM
    (32) var -> . ID
    (24) matrix -> . [ vectors ]
    (28) matrix_function -> . function_name ( INTNUM )
    (67) uminus -> . - expression
    (68) transposition -> . expression '
    (40) matrix_element -> . ID [ INTNUM , INTNUM ]
    (39) vector_element -> . ID [ INTNUM ]
    (29) function_name -> . EYE
    (30) function_name -> . ONES
    (31) function_name -> . ZEROS

    INTNUM          shift and go to state 42
    FLOATNUM        shift and go to state 43
    ID              shift and go to state 17
    [               shift and go to state 44
    -               shift and go to state 41
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48

    expression                     shift and go to state 92
    number                         shift and go to state 33
    var                            shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    uminus                         shift and go to state 37
    transposition                  shift and go to state 38
    matrix_element                 shift and go to state 39
    vector_element                 shift and go to state 40
    function_name                  shift and go to state 45

state 66

    (57) expression -> expression DOTADD . expression
    (45) expression -> . number
    (46) expression -> . var
    (47) expression -> . matrix
    (48) expression -> . matrix_function
    (49) expression -> . uminus
    (50) expression -> . transposition
    (51) expression -> . matrix_element
    (52) expression -> . vector_element
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (33) number -> . INTNUM
    (34) number -> . FLOATNUM
    (32) var -> . ID
    (24) matrix -> . [ vectors ]
    (28) matrix_function -> . function_name ( INTNUM )
    (67) uminus -> . - expression
    (68) transposition -> . expression '
    (40) matrix_element -> . ID [ INTNUM , INTNUM ]
    (39) vector_element -> . ID [ INTNUM ]
    (29) function_name -> . EYE
    (30) function_name -> . ONES
    (31) function_name -> . ZEROS

    INTNUM          shift and go to state 42
    FLOATNUM        shift and go to state 43
    ID              shift and go to state 17
    [               shift and go to state 44
    -               shift and go to state 41
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48

    expression                     shift and go to state 93
    number                         shift and go to state 33
    var                            shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    uminus                         shift and go to state 37
    transposition                  shift and go to state 38
    matrix_element                 shift and go to state 39
    vector_element                 shift and go to state 40
    function_name                  shift and go to state 45

state 67

    (58) expression -> expression DOTSUB . expression
    (45) expression -> . number
    (46) expression -> . var
    (47) expression -> . matrix
    (48) expression -> . matrix_function
    (49) expression -> . uminus
    (50) expression -> . transposition
    (51) expression -> . matrix_element
    (52) expression -> . vector_element
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (33) number -> . INTNUM
    (34) number -> . FLOATNUM
    (32) var -> . ID
    (24) matrix -> . [ vectors ]
    (28) matrix_function -> . function_name ( INTNUM )
    (67) uminus -> . - expression
    (68) transposition -> . expression '
    (40) matrix_element -> . ID [ INTNUM , INTNUM ]
    (39) vector_element -> . ID [ INTNUM ]
    (29) function_name -> . EYE
    (30) function_name -> . ONES
    (31) function_name -> . ZEROS

    INTNUM          shift and go to state 42
    FLOATNUM        shift and go to state 43
    ID              shift and go to state 17
    [               shift and go to state 44
    -               shift and go to state 41
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48

    expression                     shift and go to state 94
    number                         shift and go to state 33
    var                            shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    uminus                         shift and go to state 37
    transposition                  shift and go to state 38
    matrix_element                 shift and go to state 39
    vector_element                 shift and go to state 40
    function_name                  shift and go to state 45

state 68

    (59) expression -> expression DOTMUL . expression
    (45) expression -> . number
    (46) expression -> . var
    (47) expression -> . matrix
    (48) expression -> . matrix_function
    (49) expression -> . uminus
    (50) expression -> . transposition
    (51) expression -> . matrix_element
    (52) expression -> . vector_element
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (33) number -> . INTNUM
    (34) number -> . FLOATNUM
    (32) var -> . ID
    (24) matrix -> . [ vectors ]
    (28) matrix_function -> . function_name ( INTNUM )
    (67) uminus -> . - expression
    (68) transposition -> . expression '
    (40) matrix_element -> . ID [ INTNUM , INTNUM ]
    (39) vector_element -> . ID [ INTNUM ]
    (29) function_name -> . EYE
    (30) function_name -> . ONES
    (31) function_name -> . ZEROS

    INTNUM          shift and go to state 42
    FLOATNUM        shift and go to state 43
    ID              shift and go to state 17
    [               shift and go to state 44
    -               shift and go to state 41
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48

    expression                     shift and go to state 95
    number                         shift and go to state 33
    var                            shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    uminus                         shift and go to state 37
    transposition                  shift and go to state 38
    matrix_element                 shift and go to state 39
    vector_element                 shift and go to state 40
    function_name                  shift and go to state 45

state 69

    (60) expression -> expression DOTDIV . expression
    (45) expression -> . number
    (46) expression -> . var
    (47) expression -> . matrix
    (48) expression -> . matrix_function
    (49) expression -> . uminus
    (50) expression -> . transposition
    (51) expression -> . matrix_element
    (52) expression -> . vector_element
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (33) number -> . INTNUM
    (34) number -> . FLOATNUM
    (32) var -> . ID
    (24) matrix -> . [ vectors ]
    (28) matrix_function -> . function_name ( INTNUM )
    (67) uminus -> . - expression
    (68) transposition -> . expression '
    (40) matrix_element -> . ID [ INTNUM , INTNUM ]
    (39) vector_element -> . ID [ INTNUM ]
    (29) function_name -> . EYE
    (30) function_name -> . ONES
    (31) function_name -> . ZEROS

    INTNUM          shift and go to state 42
    FLOATNUM        shift and go to state 43
    ID              shift and go to state 17
    [               shift and go to state 44
    -               shift and go to state 41
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48

    expression                     shift and go to state 96
    number                         shift and go to state 33
    var                            shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    uminus                         shift and go to state 37
    transposition                  shift and go to state 38
    matrix_element                 shift and go to state 39
    vector_element                 shift and go to state 40
    function_name                  shift and go to state 45

state 70

    (68) transposition -> expression ' .

    +               reduce using rule 68 (transposition -> expression ' .)
    -               reduce using rule 68 (transposition -> expression ' .)
    *               reduce using rule 68 (transposition -> expression ' .)
    /               reduce using rule 68 (transposition -> expression ' .)
    DOTADD          reduce using rule 68 (transposition -> expression ' .)
    DOTSUB          reduce using rule 68 (transposition -> expression ' .)
    DOTMUL          reduce using rule 68 (transposition -> expression ' .)
    DOTDIV          reduce using rule 68 (transposition -> expression ' .)
    '               reduce using rule 68 (transposition -> expression ' .)
    ;               reduce using rule 68 (transposition -> expression ' .)
    ,               reduce using rule 68 (transposition -> expression ' .)
    EQ              reduce using rule 68 (transposition -> expression ' .)
    NE              reduce using rule 68 (transposition -> expression ' .)
    LE              reduce using rule 68 (transposition -> expression ' .)
    GE              reduce using rule 68 (transposition -> expression ' .)
    LT              reduce using rule 68 (transposition -> expression ' .)
    GT              reduce using rule 68 (transposition -> expression ' .)
    :               reduce using rule 68 (transposition -> expression ' .)
    )               reduce using rule 68 (transposition -> expression ' .)
    {               reduce using rule 68 (transposition -> expression ' .)
    IF              reduce using rule 68 (transposition -> expression ' .)
    FOR             reduce using rule 68 (transposition -> expression ' .)
    WHILE           reduce using rule 68 (transposition -> expression ' .)
    RETURN          reduce using rule 68 (transposition -> expression ' .)
    BREAK           reduce using rule 68 (transposition -> expression ' .)
    CONTINUE        reduce using rule 68 (transposition -> expression ' .)
    PRINT           reduce using rule 68 (transposition -> expression ' .)
    ID              reduce using rule 68 (transposition -> expression ' .)


state 71

    (67) uminus -> - expression .
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (68) transposition -> expression . '

    +               reduce using rule 67 (uminus -> - expression .)
    -               reduce using rule 67 (uminus -> - expression .)
    *               reduce using rule 67 (uminus -> - expression .)
    /               reduce using rule 67 (uminus -> - expression .)
    DOTADD          reduce using rule 67 (uminus -> - expression .)
    DOTSUB          reduce using rule 67 (uminus -> - expression .)
    DOTMUL          reduce using rule 67 (uminus -> - expression .)
    DOTDIV          reduce using rule 67 (uminus -> - expression .)
    ;               reduce using rule 67 (uminus -> - expression .)
    ,               reduce using rule 67 (uminus -> - expression .)
    EQ              reduce using rule 67 (uminus -> - expression .)
    NE              reduce using rule 67 (uminus -> - expression .)
    LE              reduce using rule 67 (uminus -> - expression .)
    GE              reduce using rule 67 (uminus -> - expression .)
    LT              reduce using rule 67 (uminus -> - expression .)
    GT              reduce using rule 67 (uminus -> - expression .)
    :               reduce using rule 67 (uminus -> - expression .)
    )               reduce using rule 67 (uminus -> - expression .)
    {               reduce using rule 67 (uminus -> - expression .)
    IF              reduce using rule 67 (uminus -> - expression .)
    FOR             reduce using rule 67 (uminus -> - expression .)
    WHILE           reduce using rule 67 (uminus -> - expression .)
    RETURN          reduce using rule 67 (uminus -> - expression .)
    BREAK           reduce using rule 67 (uminus -> - expression .)
    CONTINUE        reduce using rule 67 (uminus -> - expression .)
    PRINT           reduce using rule 67 (uminus -> - expression .)
    ID              reduce using rule 67 (uminus -> - expression .)
    '               shift and go to state 70

  ! '               [ reduce using rule 67 (uminus -> - expression .) ]
  ! +               [ shift and go to state 62 ]
  ! -               [ shift and go to state 63 ]
  ! *               [ shift and go to state 64 ]
  ! /               [ shift and go to state 65 ]
  ! DOTADD          [ shift and go to state 66 ]
  ! DOTSUB          [ shift and go to state 67 ]
  ! DOTMUL          [ shift and go to state 68 ]
  ! DOTDIV          [ shift and go to state 69 ]


state 72

    (25) vector -> [ . variables ]
    (43) variables -> . variables , variable
    (44) variables -> . variable
    (36) variable -> . number
    (37) variable -> . var
    (38) variable -> . element
    (33) number -> . INTNUM
    (34) number -> . FLOATNUM
    (32) var -> . ID
    (41) element -> . vector_element
    (42) element -> . matrix_element
    (39) vector_element -> . ID [ INTNUM ]
    (40) matrix_element -> . ID [ INTNUM , INTNUM ]

    INTNUM          shift and go to state 42
    FLOATNUM        shift and go to state 43
    ID              shift and go to state 102

    variables                      shift and go to state 97
    variable                       shift and go to state 98
    number                         shift and go to state 99
    var                            shift and go to state 100
    element                        shift and go to state 101
    vector_element                 shift and go to state 103
    matrix_element                 shift and go to state 104

state 73

    (24) matrix -> [ vectors . ]
    (26) vectors -> vectors . , vector

    ]               shift and go to state 105
    ,               shift and go to state 106


state 74

    (27) vectors -> vector .

    ]               reduce using rule 27 (vectors -> vector .)
    ,               reduce using rule 27 (vectors -> vector .)


state 75

    (28) matrix_function -> function_name ( . INTNUM )

    INTNUM          shift and go to state 107


state 76

    (69) print_values -> print_values , . string
    (70) print_values -> print_values , . expression
    (35) string -> . STRING
    (45) expression -> . number
    (46) expression -> . var
    (47) expression -> . matrix
    (48) expression -> . matrix_function
    (49) expression -> . uminus
    (50) expression -> . transposition
    (51) expression -> . matrix_element
    (52) expression -> . vector_element
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (33) number -> . INTNUM
    (34) number -> . FLOATNUM
    (32) var -> . ID
    (24) matrix -> . [ vectors ]
    (28) matrix_function -> . function_name ( INTNUM )
    (67) uminus -> . - expression
    (68) transposition -> . expression '
    (40) matrix_element -> . ID [ INTNUM , INTNUM ]
    (39) vector_element -> . ID [ INTNUM ]
    (29) function_name -> . EYE
    (30) function_name -> . ONES
    (31) function_name -> . ZEROS

    STRING          shift and go to state 52
    INTNUM          shift and go to state 42
    FLOATNUM        shift and go to state 43
    ID              shift and go to state 17
    [               shift and go to state 44
    -               shift and go to state 41
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48

    string                         shift and go to state 108
    expression                     shift and go to state 109
    number                         shift and go to state 33
    var                            shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    uminus                         shift and go to state 37
    transposition                  shift and go to state 38
    matrix_element                 shift and go to state 39
    vector_element                 shift and go to state 40
    function_name                  shift and go to state 45

state 77

    (17) assignment -> matrix_element assignment_operator expression .
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (68) transposition -> expression . '

    ;               reduce using rule 17 (assignment -> matrix_element assignment_operator expression .)
    +               shift and go to state 62
    -               shift and go to state 63
    *               shift and go to state 64
    /               shift and go to state 65
    DOTADD          shift and go to state 66
    DOTSUB          shift and go to state 67
    DOTMUL          shift and go to state 68
    DOTDIV          shift and go to state 69
    '               shift and go to state 70


state 78

    (18) assignment -> vector_element assignment_operator expression .
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (68) transposition -> expression . '

    ;               reduce using rule 18 (assignment -> vector_element assignment_operator expression .)
    +               shift and go to state 62
    -               shift and go to state 63
    *               shift and go to state 64
    /               shift and go to state 65
    DOTADD          shift and go to state 66
    DOTSUB          shift and go to state 67
    DOTMUL          shift and go to state 68
    DOTDIV          shift and go to state 69
    '               shift and go to state 70


state 79

    (40) matrix_element -> ID [ INTNUM . , INTNUM ]
    (39) vector_element -> ID [ INTNUM . ]

    ,               shift and go to state 110
    ]               shift and go to state 111


state 80

    (12) instruction -> IF ( condition ) . instruction
    (13) instruction -> IF ( condition ) . instruction ELSE instruction
    (5) instruction -> . sys_instruction ;
    (6) instruction -> . assignment ;
    (7) instruction -> . { instructions }
    (12) instruction -> . IF ( condition ) instruction
    (13) instruction -> . IF ( condition ) instruction ELSE instruction
    (14) instruction -> . FOR var = expression : expression instruction
    (15) instruction -> . WHILE ( condition ) instruction
    (8) sys_instruction -> . RETURN expression
    (9) sys_instruction -> . BREAK
    (10) sys_instruction -> . CONTINUE
    (11) sys_instruction -> . PRINT print_values
    (16) assignment -> . var assignment_operator expression
    (17) assignment -> . matrix_element assignment_operator expression
    (18) assignment -> . vector_element assignment_operator expression
    (32) var -> . ID
    (40) matrix_element -> . ID [ INTNUM , INTNUM ]
    (39) vector_element -> . ID [ INTNUM ]

    {               shift and go to state 6
    IF              shift and go to state 7
    FOR             shift and go to state 8
    WHILE           shift and go to state 10
    RETURN          shift and go to state 11
    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    PRINT           shift and go to state 14
    ID              shift and go to state 17

    instruction                    shift and go to state 112
    sys_instruction                shift and go to state 4
    assignment                     shift and go to state 5
    var                            shift and go to state 9
    matrix_element                 shift and go to state 15
    vector_element                 shift and go to state 16

state 81

    (61) condition -> expression EQ . expression
    (45) expression -> . number
    (46) expression -> . var
    (47) expression -> . matrix
    (48) expression -> . matrix_function
    (49) expression -> . uminus
    (50) expression -> . transposition
    (51) expression -> . matrix_element
    (52) expression -> . vector_element
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (33) number -> . INTNUM
    (34) number -> . FLOATNUM
    (32) var -> . ID
    (24) matrix -> . [ vectors ]
    (28) matrix_function -> . function_name ( INTNUM )
    (67) uminus -> . - expression
    (68) transposition -> . expression '
    (40) matrix_element -> . ID [ INTNUM , INTNUM ]
    (39) vector_element -> . ID [ INTNUM ]
    (29) function_name -> . EYE
    (30) function_name -> . ONES
    (31) function_name -> . ZEROS

    INTNUM          shift and go to state 42
    FLOATNUM        shift and go to state 43
    ID              shift and go to state 17
    [               shift and go to state 44
    -               shift and go to state 41
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48

    expression                     shift and go to state 113
    number                         shift and go to state 33
    var                            shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    uminus                         shift and go to state 37
    transposition                  shift and go to state 38
    matrix_element                 shift and go to state 39
    vector_element                 shift and go to state 40
    function_name                  shift and go to state 45

state 82

    (62) condition -> expression NE . expression
    (45) expression -> . number
    (46) expression -> . var
    (47) expression -> . matrix
    (48) expression -> . matrix_function
    (49) expression -> . uminus
    (50) expression -> . transposition
    (51) expression -> . matrix_element
    (52) expression -> . vector_element
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (33) number -> . INTNUM
    (34) number -> . FLOATNUM
    (32) var -> . ID
    (24) matrix -> . [ vectors ]
    (28) matrix_function -> . function_name ( INTNUM )
    (67) uminus -> . - expression
    (68) transposition -> . expression '
    (40) matrix_element -> . ID [ INTNUM , INTNUM ]
    (39) vector_element -> . ID [ INTNUM ]
    (29) function_name -> . EYE
    (30) function_name -> . ONES
    (31) function_name -> . ZEROS

    INTNUM          shift and go to state 42
    FLOATNUM        shift and go to state 43
    ID              shift and go to state 17
    [               shift and go to state 44
    -               shift and go to state 41
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48

    expression                     shift and go to state 114
    number                         shift and go to state 33
    var                            shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    uminus                         shift and go to state 37
    transposition                  shift and go to state 38
    matrix_element                 shift and go to state 39
    vector_element                 shift and go to state 40
    function_name                  shift and go to state 45

state 83

    (63) condition -> expression LE . expression
    (45) expression -> . number
    (46) expression -> . var
    (47) expression -> . matrix
    (48) expression -> . matrix_function
    (49) expression -> . uminus
    (50) expression -> . transposition
    (51) expression -> . matrix_element
    (52) expression -> . vector_element
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (33) number -> . INTNUM
    (34) number -> . FLOATNUM
    (32) var -> . ID
    (24) matrix -> . [ vectors ]
    (28) matrix_function -> . function_name ( INTNUM )
    (67) uminus -> . - expression
    (68) transposition -> . expression '
    (40) matrix_element -> . ID [ INTNUM , INTNUM ]
    (39) vector_element -> . ID [ INTNUM ]
    (29) function_name -> . EYE
    (30) function_name -> . ONES
    (31) function_name -> . ZEROS

    INTNUM          shift and go to state 42
    FLOATNUM        shift and go to state 43
    ID              shift and go to state 17
    [               shift and go to state 44
    -               shift and go to state 41
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48

    expression                     shift and go to state 115
    number                         shift and go to state 33
    var                            shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    uminus                         shift and go to state 37
    transposition                  shift and go to state 38
    matrix_element                 shift and go to state 39
    vector_element                 shift and go to state 40
    function_name                  shift and go to state 45

state 84

    (64) condition -> expression GE . expression
    (45) expression -> . number
    (46) expression -> . var
    (47) expression -> . matrix
    (48) expression -> . matrix_function
    (49) expression -> . uminus
    (50) expression -> . transposition
    (51) expression -> . matrix_element
    (52) expression -> . vector_element
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (33) number -> . INTNUM
    (34) number -> . FLOATNUM
    (32) var -> . ID
    (24) matrix -> . [ vectors ]
    (28) matrix_function -> . function_name ( INTNUM )
    (67) uminus -> . - expression
    (68) transposition -> . expression '
    (40) matrix_element -> . ID [ INTNUM , INTNUM ]
    (39) vector_element -> . ID [ INTNUM ]
    (29) function_name -> . EYE
    (30) function_name -> . ONES
    (31) function_name -> . ZEROS

    INTNUM          shift and go to state 42
    FLOATNUM        shift and go to state 43
    ID              shift and go to state 17
    [               shift and go to state 44
    -               shift and go to state 41
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48

    expression                     shift and go to state 116
    number                         shift and go to state 33
    var                            shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    uminus                         shift and go to state 37
    transposition                  shift and go to state 38
    matrix_element                 shift and go to state 39
    vector_element                 shift and go to state 40
    function_name                  shift and go to state 45

state 85

    (65) condition -> expression LT . expression
    (45) expression -> . number
    (46) expression -> . var
    (47) expression -> . matrix
    (48) expression -> . matrix_function
    (49) expression -> . uminus
    (50) expression -> . transposition
    (51) expression -> . matrix_element
    (52) expression -> . vector_element
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (33) number -> . INTNUM
    (34) number -> . FLOATNUM
    (32) var -> . ID
    (24) matrix -> . [ vectors ]
    (28) matrix_function -> . function_name ( INTNUM )
    (67) uminus -> . - expression
    (68) transposition -> . expression '
    (40) matrix_element -> . ID [ INTNUM , INTNUM ]
    (39) vector_element -> . ID [ INTNUM ]
    (29) function_name -> . EYE
    (30) function_name -> . ONES
    (31) function_name -> . ZEROS

    INTNUM          shift and go to state 42
    FLOATNUM        shift and go to state 43
    ID              shift and go to state 17
    [               shift and go to state 44
    -               shift and go to state 41
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48

    expression                     shift and go to state 117
    number                         shift and go to state 33
    var                            shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    uminus                         shift and go to state 37
    transposition                  shift and go to state 38
    matrix_element                 shift and go to state 39
    vector_element                 shift and go to state 40
    function_name                  shift and go to state 45

state 86

    (66) condition -> expression GT . expression
    (45) expression -> . number
    (46) expression -> . var
    (47) expression -> . matrix
    (48) expression -> . matrix_function
    (49) expression -> . uminus
    (50) expression -> . transposition
    (51) expression -> . matrix_element
    (52) expression -> . vector_element
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (33) number -> . INTNUM
    (34) number -> . FLOATNUM
    (32) var -> . ID
    (24) matrix -> . [ vectors ]
    (28) matrix_function -> . function_name ( INTNUM )
    (67) uminus -> . - expression
    (68) transposition -> . expression '
    (40) matrix_element -> . ID [ INTNUM , INTNUM ]
    (39) vector_element -> . ID [ INTNUM ]
    (29) function_name -> . EYE
    (30) function_name -> . ONES
    (31) function_name -> . ZEROS

    INTNUM          shift and go to state 42
    FLOATNUM        shift and go to state 43
    ID              shift and go to state 17
    [               shift and go to state 44
    -               shift and go to state 41
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48

    expression                     shift and go to state 118
    number                         shift and go to state 33
    var                            shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    uminus                         shift and go to state 37
    transposition                  shift and go to state 38
    matrix_element                 shift and go to state 39
    vector_element                 shift and go to state 40
    function_name                  shift and go to state 45

state 87

    (14) instruction -> FOR var = expression . : expression instruction
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (68) transposition -> expression . '

    :               shift and go to state 119
    +               shift and go to state 62
    -               shift and go to state 63
    *               shift and go to state 64
    /               shift and go to state 65
    DOTADD          shift and go to state 66
    DOTSUB          shift and go to state 67
    DOTMUL          shift and go to state 68
    DOTDIV          shift and go to state 69
    '               shift and go to state 70


state 88

    (15) instruction -> WHILE ( condition ) . instruction
    (5) instruction -> . sys_instruction ;
    (6) instruction -> . assignment ;
    (7) instruction -> . { instructions }
    (12) instruction -> . IF ( condition ) instruction
    (13) instruction -> . IF ( condition ) instruction ELSE instruction
    (14) instruction -> . FOR var = expression : expression instruction
    (15) instruction -> . WHILE ( condition ) instruction
    (8) sys_instruction -> . RETURN expression
    (9) sys_instruction -> . BREAK
    (10) sys_instruction -> . CONTINUE
    (11) sys_instruction -> . PRINT print_values
    (16) assignment -> . var assignment_operator expression
    (17) assignment -> . matrix_element assignment_operator expression
    (18) assignment -> . vector_element assignment_operator expression
    (32) var -> . ID
    (40) matrix_element -> . ID [ INTNUM , INTNUM ]
    (39) vector_element -> . ID [ INTNUM ]

    {               shift and go to state 6
    IF              shift and go to state 7
    FOR             shift and go to state 8
    WHILE           shift and go to state 10
    RETURN          shift and go to state 11
    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    PRINT           shift and go to state 14
    ID              shift and go to state 17

    instruction                    shift and go to state 120
    sys_instruction                shift and go to state 4
    assignment                     shift and go to state 5
    var                            shift and go to state 9
    matrix_element                 shift and go to state 15
    vector_element                 shift and go to state 16

state 89

    (53) expression -> expression + expression .
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (68) transposition -> expression . '

    +               reduce using rule 53 (expression -> expression + expression .)
    -               reduce using rule 53 (expression -> expression + expression .)
    ;               reduce using rule 53 (expression -> expression + expression .)
    ,               reduce using rule 53 (expression -> expression + expression .)
    EQ              reduce using rule 53 (expression -> expression + expression .)
    NE              reduce using rule 53 (expression -> expression + expression .)
    LE              reduce using rule 53 (expression -> expression + expression .)
    GE              reduce using rule 53 (expression -> expression + expression .)
    LT              reduce using rule 53 (expression -> expression + expression .)
    GT              reduce using rule 53 (expression -> expression + expression .)
    :               reduce using rule 53 (expression -> expression + expression .)
    )               reduce using rule 53 (expression -> expression + expression .)
    {               reduce using rule 53 (expression -> expression + expression .)
    IF              reduce using rule 53 (expression -> expression + expression .)
    FOR             reduce using rule 53 (expression -> expression + expression .)
    WHILE           reduce using rule 53 (expression -> expression + expression .)
    RETURN          reduce using rule 53 (expression -> expression + expression .)
    BREAK           reduce using rule 53 (expression -> expression + expression .)
    CONTINUE        reduce using rule 53 (expression -> expression + expression .)
    PRINT           reduce using rule 53 (expression -> expression + expression .)
    ID              reduce using rule 53 (expression -> expression + expression .)
    *               shift and go to state 64
    /               shift and go to state 65
    DOTADD          shift and go to state 66
    DOTSUB          shift and go to state 67
    DOTMUL          shift and go to state 68
    DOTDIV          shift and go to state 69
    '               shift and go to state 70

  ! *               [ reduce using rule 53 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 53 (expression -> expression + expression .) ]
  ! DOTADD          [ reduce using rule 53 (expression -> expression + expression .) ]
  ! DOTSUB          [ reduce using rule 53 (expression -> expression + expression .) ]
  ! DOTMUL          [ reduce using rule 53 (expression -> expression + expression .) ]
  ! DOTDIV          [ reduce using rule 53 (expression -> expression + expression .) ]
  ! '               [ reduce using rule 53 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 62 ]
  ! -               [ shift and go to state 63 ]


state 90

    (54) expression -> expression - expression .
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (68) transposition -> expression . '

    +               reduce using rule 54 (expression -> expression - expression .)
    -               reduce using rule 54 (expression -> expression - expression .)
    ;               reduce using rule 54 (expression -> expression - expression .)
    ,               reduce using rule 54 (expression -> expression - expression .)
    EQ              reduce using rule 54 (expression -> expression - expression .)
    NE              reduce using rule 54 (expression -> expression - expression .)
    LE              reduce using rule 54 (expression -> expression - expression .)
    GE              reduce using rule 54 (expression -> expression - expression .)
    LT              reduce using rule 54 (expression -> expression - expression .)
    GT              reduce using rule 54 (expression -> expression - expression .)
    :               reduce using rule 54 (expression -> expression - expression .)
    )               reduce using rule 54 (expression -> expression - expression .)
    {               reduce using rule 54 (expression -> expression - expression .)
    IF              reduce using rule 54 (expression -> expression - expression .)
    FOR             reduce using rule 54 (expression -> expression - expression .)
    WHILE           reduce using rule 54 (expression -> expression - expression .)
    RETURN          reduce using rule 54 (expression -> expression - expression .)
    BREAK           reduce using rule 54 (expression -> expression - expression .)
    CONTINUE        reduce using rule 54 (expression -> expression - expression .)
    PRINT           reduce using rule 54 (expression -> expression - expression .)
    ID              reduce using rule 54 (expression -> expression - expression .)
    *               shift and go to state 64
    /               shift and go to state 65
    DOTADD          shift and go to state 66
    DOTSUB          shift and go to state 67
    DOTMUL          shift and go to state 68
    DOTDIV          shift and go to state 69
    '               shift and go to state 70

  ! *               [ reduce using rule 54 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 54 (expression -> expression - expression .) ]
  ! DOTADD          [ reduce using rule 54 (expression -> expression - expression .) ]
  ! DOTSUB          [ reduce using rule 54 (expression -> expression - expression .) ]
  ! DOTMUL          [ reduce using rule 54 (expression -> expression - expression .) ]
  ! DOTDIV          [ reduce using rule 54 (expression -> expression - expression .) ]
  ! '               [ reduce using rule 54 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 62 ]
  ! -               [ shift and go to state 63 ]


state 91

    (55) expression -> expression * expression .
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (68) transposition -> expression . '

    +               reduce using rule 55 (expression -> expression * expression .)
    -               reduce using rule 55 (expression -> expression * expression .)
    *               reduce using rule 55 (expression -> expression * expression .)
    /               reduce using rule 55 (expression -> expression * expression .)
    DOTADD          reduce using rule 55 (expression -> expression * expression .)
    DOTSUB          reduce using rule 55 (expression -> expression * expression .)
    ;               reduce using rule 55 (expression -> expression * expression .)
    ,               reduce using rule 55 (expression -> expression * expression .)
    EQ              reduce using rule 55 (expression -> expression * expression .)
    NE              reduce using rule 55 (expression -> expression * expression .)
    LE              reduce using rule 55 (expression -> expression * expression .)
    GE              reduce using rule 55 (expression -> expression * expression .)
    LT              reduce using rule 55 (expression -> expression * expression .)
    GT              reduce using rule 55 (expression -> expression * expression .)
    :               reduce using rule 55 (expression -> expression * expression .)
    )               reduce using rule 55 (expression -> expression * expression .)
    {               reduce using rule 55 (expression -> expression * expression .)
    IF              reduce using rule 55 (expression -> expression * expression .)
    FOR             reduce using rule 55 (expression -> expression * expression .)
    WHILE           reduce using rule 55 (expression -> expression * expression .)
    RETURN          reduce using rule 55 (expression -> expression * expression .)
    BREAK           reduce using rule 55 (expression -> expression * expression .)
    CONTINUE        reduce using rule 55 (expression -> expression * expression .)
    PRINT           reduce using rule 55 (expression -> expression * expression .)
    ID              reduce using rule 55 (expression -> expression * expression .)
    DOTMUL          shift and go to state 68
    DOTDIV          shift and go to state 69
    '               shift and go to state 70

  ! DOTMUL          [ reduce using rule 55 (expression -> expression * expression .) ]
  ! DOTDIV          [ reduce using rule 55 (expression -> expression * expression .) ]
  ! '               [ reduce using rule 55 (expression -> expression * expression .) ]
  ! +               [ shift and go to state 62 ]
  ! -               [ shift and go to state 63 ]
  ! *               [ shift and go to state 64 ]
  ! /               [ shift and go to state 65 ]
  ! DOTADD          [ shift and go to state 66 ]
  ! DOTSUB          [ shift and go to state 67 ]


state 92

    (56) expression -> expression / expression .
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (68) transposition -> expression . '

    +               reduce using rule 56 (expression -> expression / expression .)
    -               reduce using rule 56 (expression -> expression / expression .)
    *               reduce using rule 56 (expression -> expression / expression .)
    /               reduce using rule 56 (expression -> expression / expression .)
    DOTADD          reduce using rule 56 (expression -> expression / expression .)
    DOTSUB          reduce using rule 56 (expression -> expression / expression .)
    ;               reduce using rule 56 (expression -> expression / expression .)
    ,               reduce using rule 56 (expression -> expression / expression .)
    EQ              reduce using rule 56 (expression -> expression / expression .)
    NE              reduce using rule 56 (expression -> expression / expression .)
    LE              reduce using rule 56 (expression -> expression / expression .)
    GE              reduce using rule 56 (expression -> expression / expression .)
    LT              reduce using rule 56 (expression -> expression / expression .)
    GT              reduce using rule 56 (expression -> expression / expression .)
    :               reduce using rule 56 (expression -> expression / expression .)
    )               reduce using rule 56 (expression -> expression / expression .)
    {               reduce using rule 56 (expression -> expression / expression .)
    IF              reduce using rule 56 (expression -> expression / expression .)
    FOR             reduce using rule 56 (expression -> expression / expression .)
    WHILE           reduce using rule 56 (expression -> expression / expression .)
    RETURN          reduce using rule 56 (expression -> expression / expression .)
    BREAK           reduce using rule 56 (expression -> expression / expression .)
    CONTINUE        reduce using rule 56 (expression -> expression / expression .)
    PRINT           reduce using rule 56 (expression -> expression / expression .)
    ID              reduce using rule 56 (expression -> expression / expression .)
    DOTMUL          shift and go to state 68
    DOTDIV          shift and go to state 69
    '               shift and go to state 70

  ! DOTMUL          [ reduce using rule 56 (expression -> expression / expression .) ]
  ! DOTDIV          [ reduce using rule 56 (expression -> expression / expression .) ]
  ! '               [ reduce using rule 56 (expression -> expression / expression .) ]
  ! +               [ shift and go to state 62 ]
  ! -               [ shift and go to state 63 ]
  ! *               [ shift and go to state 64 ]
  ! /               [ shift and go to state 65 ]
  ! DOTADD          [ shift and go to state 66 ]
  ! DOTSUB          [ shift and go to state 67 ]


state 93

    (57) expression -> expression DOTADD expression .
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (68) transposition -> expression . '

    +               reduce using rule 57 (expression -> expression DOTADD expression .)
    -               reduce using rule 57 (expression -> expression DOTADD expression .)
    DOTADD          reduce using rule 57 (expression -> expression DOTADD expression .)
    DOTSUB          reduce using rule 57 (expression -> expression DOTADD expression .)
    ;               reduce using rule 57 (expression -> expression DOTADD expression .)
    ,               reduce using rule 57 (expression -> expression DOTADD expression .)
    EQ              reduce using rule 57 (expression -> expression DOTADD expression .)
    NE              reduce using rule 57 (expression -> expression DOTADD expression .)
    LE              reduce using rule 57 (expression -> expression DOTADD expression .)
    GE              reduce using rule 57 (expression -> expression DOTADD expression .)
    LT              reduce using rule 57 (expression -> expression DOTADD expression .)
    GT              reduce using rule 57 (expression -> expression DOTADD expression .)
    :               reduce using rule 57 (expression -> expression DOTADD expression .)
    )               reduce using rule 57 (expression -> expression DOTADD expression .)
    {               reduce using rule 57 (expression -> expression DOTADD expression .)
    IF              reduce using rule 57 (expression -> expression DOTADD expression .)
    FOR             reduce using rule 57 (expression -> expression DOTADD expression .)
    WHILE           reduce using rule 57 (expression -> expression DOTADD expression .)
    RETURN          reduce using rule 57 (expression -> expression DOTADD expression .)
    BREAK           reduce using rule 57 (expression -> expression DOTADD expression .)
    CONTINUE        reduce using rule 57 (expression -> expression DOTADD expression .)
    PRINT           reduce using rule 57 (expression -> expression DOTADD expression .)
    ID              reduce using rule 57 (expression -> expression DOTADD expression .)
    *               shift and go to state 64
    /               shift and go to state 65
    DOTMUL          shift and go to state 68
    DOTDIV          shift and go to state 69
    '               shift and go to state 70

  ! *               [ reduce using rule 57 (expression -> expression DOTADD expression .) ]
  ! /               [ reduce using rule 57 (expression -> expression DOTADD expression .) ]
  ! DOTMUL          [ reduce using rule 57 (expression -> expression DOTADD expression .) ]
  ! DOTDIV          [ reduce using rule 57 (expression -> expression DOTADD expression .) ]
  ! '               [ reduce using rule 57 (expression -> expression DOTADD expression .) ]
  ! +               [ shift and go to state 62 ]
  ! -               [ shift and go to state 63 ]
  ! DOTADD          [ shift and go to state 66 ]
  ! DOTSUB          [ shift and go to state 67 ]


state 94

    (58) expression -> expression DOTSUB expression .
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (68) transposition -> expression . '

    +               reduce using rule 58 (expression -> expression DOTSUB expression .)
    -               reduce using rule 58 (expression -> expression DOTSUB expression .)
    DOTADD          reduce using rule 58 (expression -> expression DOTSUB expression .)
    DOTSUB          reduce using rule 58 (expression -> expression DOTSUB expression .)
    ;               reduce using rule 58 (expression -> expression DOTSUB expression .)
    ,               reduce using rule 58 (expression -> expression DOTSUB expression .)
    EQ              reduce using rule 58 (expression -> expression DOTSUB expression .)
    NE              reduce using rule 58 (expression -> expression DOTSUB expression .)
    LE              reduce using rule 58 (expression -> expression DOTSUB expression .)
    GE              reduce using rule 58 (expression -> expression DOTSUB expression .)
    LT              reduce using rule 58 (expression -> expression DOTSUB expression .)
    GT              reduce using rule 58 (expression -> expression DOTSUB expression .)
    :               reduce using rule 58 (expression -> expression DOTSUB expression .)
    )               reduce using rule 58 (expression -> expression DOTSUB expression .)
    {               reduce using rule 58 (expression -> expression DOTSUB expression .)
    IF              reduce using rule 58 (expression -> expression DOTSUB expression .)
    FOR             reduce using rule 58 (expression -> expression DOTSUB expression .)
    WHILE           reduce using rule 58 (expression -> expression DOTSUB expression .)
    RETURN          reduce using rule 58 (expression -> expression DOTSUB expression .)
    BREAK           reduce using rule 58 (expression -> expression DOTSUB expression .)
    CONTINUE        reduce using rule 58 (expression -> expression DOTSUB expression .)
    PRINT           reduce using rule 58 (expression -> expression DOTSUB expression .)
    ID              reduce using rule 58 (expression -> expression DOTSUB expression .)
    *               shift and go to state 64
    /               shift and go to state 65
    DOTMUL          shift and go to state 68
    DOTDIV          shift and go to state 69
    '               shift and go to state 70

  ! *               [ reduce using rule 58 (expression -> expression DOTSUB expression .) ]
  ! /               [ reduce using rule 58 (expression -> expression DOTSUB expression .) ]
  ! DOTMUL          [ reduce using rule 58 (expression -> expression DOTSUB expression .) ]
  ! DOTDIV          [ reduce using rule 58 (expression -> expression DOTSUB expression .) ]
  ! '               [ reduce using rule 58 (expression -> expression DOTSUB expression .) ]
  ! +               [ shift and go to state 62 ]
  ! -               [ shift and go to state 63 ]
  ! DOTADD          [ shift and go to state 66 ]
  ! DOTSUB          [ shift and go to state 67 ]


state 95

    (59) expression -> expression DOTMUL expression .
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (68) transposition -> expression . '

    +               reduce using rule 59 (expression -> expression DOTMUL expression .)
    -               reduce using rule 59 (expression -> expression DOTMUL expression .)
    *               reduce using rule 59 (expression -> expression DOTMUL expression .)
    /               reduce using rule 59 (expression -> expression DOTMUL expression .)
    DOTADD          reduce using rule 59 (expression -> expression DOTMUL expression .)
    DOTSUB          reduce using rule 59 (expression -> expression DOTMUL expression .)
    DOTMUL          reduce using rule 59 (expression -> expression DOTMUL expression .)
    DOTDIV          reduce using rule 59 (expression -> expression DOTMUL expression .)
    ;               reduce using rule 59 (expression -> expression DOTMUL expression .)
    ,               reduce using rule 59 (expression -> expression DOTMUL expression .)
    EQ              reduce using rule 59 (expression -> expression DOTMUL expression .)
    NE              reduce using rule 59 (expression -> expression DOTMUL expression .)
    LE              reduce using rule 59 (expression -> expression DOTMUL expression .)
    GE              reduce using rule 59 (expression -> expression DOTMUL expression .)
    LT              reduce using rule 59 (expression -> expression DOTMUL expression .)
    GT              reduce using rule 59 (expression -> expression DOTMUL expression .)
    :               reduce using rule 59 (expression -> expression DOTMUL expression .)
    )               reduce using rule 59 (expression -> expression DOTMUL expression .)
    {               reduce using rule 59 (expression -> expression DOTMUL expression .)
    IF              reduce using rule 59 (expression -> expression DOTMUL expression .)
    FOR             reduce using rule 59 (expression -> expression DOTMUL expression .)
    WHILE           reduce using rule 59 (expression -> expression DOTMUL expression .)
    RETURN          reduce using rule 59 (expression -> expression DOTMUL expression .)
    BREAK           reduce using rule 59 (expression -> expression DOTMUL expression .)
    CONTINUE        reduce using rule 59 (expression -> expression DOTMUL expression .)
    PRINT           reduce using rule 59 (expression -> expression DOTMUL expression .)
    ID              reduce using rule 59 (expression -> expression DOTMUL expression .)
    '               shift and go to state 70

  ! '               [ reduce using rule 59 (expression -> expression DOTMUL expression .) ]
  ! +               [ shift and go to state 62 ]
  ! -               [ shift and go to state 63 ]
  ! *               [ shift and go to state 64 ]
  ! /               [ shift and go to state 65 ]
  ! DOTADD          [ shift and go to state 66 ]
  ! DOTSUB          [ shift and go to state 67 ]
  ! DOTMUL          [ shift and go to state 68 ]
  ! DOTDIV          [ shift and go to state 69 ]


state 96

    (60) expression -> expression DOTDIV expression .
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (68) transposition -> expression . '

    +               reduce using rule 60 (expression -> expression DOTDIV expression .)
    -               reduce using rule 60 (expression -> expression DOTDIV expression .)
    *               reduce using rule 60 (expression -> expression DOTDIV expression .)
    /               reduce using rule 60 (expression -> expression DOTDIV expression .)
    DOTADD          reduce using rule 60 (expression -> expression DOTDIV expression .)
    DOTSUB          reduce using rule 60 (expression -> expression DOTDIV expression .)
    DOTMUL          reduce using rule 60 (expression -> expression DOTDIV expression .)
    DOTDIV          reduce using rule 60 (expression -> expression DOTDIV expression .)
    ;               reduce using rule 60 (expression -> expression DOTDIV expression .)
    ,               reduce using rule 60 (expression -> expression DOTDIV expression .)
    EQ              reduce using rule 60 (expression -> expression DOTDIV expression .)
    NE              reduce using rule 60 (expression -> expression DOTDIV expression .)
    LE              reduce using rule 60 (expression -> expression DOTDIV expression .)
    GE              reduce using rule 60 (expression -> expression DOTDIV expression .)
    LT              reduce using rule 60 (expression -> expression DOTDIV expression .)
    GT              reduce using rule 60 (expression -> expression DOTDIV expression .)
    :               reduce using rule 60 (expression -> expression DOTDIV expression .)
    )               reduce using rule 60 (expression -> expression DOTDIV expression .)
    {               reduce using rule 60 (expression -> expression DOTDIV expression .)
    IF              reduce using rule 60 (expression -> expression DOTDIV expression .)
    FOR             reduce using rule 60 (expression -> expression DOTDIV expression .)
    WHILE           reduce using rule 60 (expression -> expression DOTDIV expression .)
    RETURN          reduce using rule 60 (expression -> expression DOTDIV expression .)
    BREAK           reduce using rule 60 (expression -> expression DOTDIV expression .)
    CONTINUE        reduce using rule 60 (expression -> expression DOTDIV expression .)
    PRINT           reduce using rule 60 (expression -> expression DOTDIV expression .)
    ID              reduce using rule 60 (expression -> expression DOTDIV expression .)
    '               shift and go to state 70

  ! '               [ reduce using rule 60 (expression -> expression DOTDIV expression .) ]
  ! +               [ shift and go to state 62 ]
  ! -               [ shift and go to state 63 ]
  ! *               [ shift and go to state 64 ]
  ! /               [ shift and go to state 65 ]
  ! DOTADD          [ shift and go to state 66 ]
  ! DOTSUB          [ shift and go to state 67 ]
  ! DOTMUL          [ shift and go to state 68 ]
  ! DOTDIV          [ shift and go to state 69 ]


state 97

    (25) vector -> [ variables . ]
    (43) variables -> variables . , variable

    ]               shift and go to state 121
    ,               shift and go to state 122


state 98

    (44) variables -> variable .

    ]               reduce using rule 44 (variables -> variable .)
    ,               reduce using rule 44 (variables -> variable .)


state 99

    (36) variable -> number .

    ]               reduce using rule 36 (variable -> number .)
    ,               reduce using rule 36 (variable -> number .)


state 100

    (37) variable -> var .

    ]               reduce using rule 37 (variable -> var .)
    ,               reduce using rule 37 (variable -> var .)


state 101

    (38) variable -> element .

    ]               reduce using rule 38 (variable -> element .)
    ,               reduce using rule 38 (variable -> element .)


state 102

    (32) var -> ID .
    (39) vector_element -> ID . [ INTNUM ]
    (40) matrix_element -> ID . [ INTNUM , INTNUM ]

    ]               reduce using rule 32 (var -> ID .)
    ,               reduce using rule 32 (var -> ID .)
    [               shift and go to state 123


state 103

    (41) element -> vector_element .

    ]               reduce using rule 41 (element -> vector_element .)
    ,               reduce using rule 41 (element -> vector_element .)


state 104

    (42) element -> matrix_element .

    ]               reduce using rule 42 (element -> matrix_element .)
    ,               reduce using rule 42 (element -> matrix_element .)


state 105

    (24) matrix -> [ vectors ] .

    +               reduce using rule 24 (matrix -> [ vectors ] .)
    -               reduce using rule 24 (matrix -> [ vectors ] .)
    *               reduce using rule 24 (matrix -> [ vectors ] .)
    /               reduce using rule 24 (matrix -> [ vectors ] .)
    DOTADD          reduce using rule 24 (matrix -> [ vectors ] .)
    DOTSUB          reduce using rule 24 (matrix -> [ vectors ] .)
    DOTMUL          reduce using rule 24 (matrix -> [ vectors ] .)
    DOTDIV          reduce using rule 24 (matrix -> [ vectors ] .)
    '               reduce using rule 24 (matrix -> [ vectors ] .)
    ;               reduce using rule 24 (matrix -> [ vectors ] .)
    ,               reduce using rule 24 (matrix -> [ vectors ] .)
    EQ              reduce using rule 24 (matrix -> [ vectors ] .)
    NE              reduce using rule 24 (matrix -> [ vectors ] .)
    LE              reduce using rule 24 (matrix -> [ vectors ] .)
    GE              reduce using rule 24 (matrix -> [ vectors ] .)
    LT              reduce using rule 24 (matrix -> [ vectors ] .)
    GT              reduce using rule 24 (matrix -> [ vectors ] .)
    :               reduce using rule 24 (matrix -> [ vectors ] .)
    )               reduce using rule 24 (matrix -> [ vectors ] .)
    {               reduce using rule 24 (matrix -> [ vectors ] .)
    IF              reduce using rule 24 (matrix -> [ vectors ] .)
    FOR             reduce using rule 24 (matrix -> [ vectors ] .)
    WHILE           reduce using rule 24 (matrix -> [ vectors ] .)
    RETURN          reduce using rule 24 (matrix -> [ vectors ] .)
    BREAK           reduce using rule 24 (matrix -> [ vectors ] .)
    CONTINUE        reduce using rule 24 (matrix -> [ vectors ] .)
    PRINT           reduce using rule 24 (matrix -> [ vectors ] .)
    ID              reduce using rule 24 (matrix -> [ vectors ] .)


state 106

    (26) vectors -> vectors , . vector
    (25) vector -> . [ variables ]

    [               shift and go to state 72

    vector                         shift and go to state 124

state 107

    (28) matrix_function -> function_name ( INTNUM . )

    )               shift and go to state 125


state 108

    (69) print_values -> print_values , string .

    ,               reduce using rule 69 (print_values -> print_values , string .)
    ;               reduce using rule 69 (print_values -> print_values , string .)


state 109

    (70) print_values -> print_values , expression .
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (68) transposition -> expression . '

    ,               reduce using rule 70 (print_values -> print_values , expression .)
    ;               reduce using rule 70 (print_values -> print_values , expression .)
    +               shift and go to state 62
    -               shift and go to state 63
    *               shift and go to state 64
    /               shift and go to state 65
    DOTADD          shift and go to state 66
    DOTSUB          shift and go to state 67
    DOTMUL          shift and go to state 68
    DOTDIV          shift and go to state 69
    '               shift and go to state 70


state 110

    (40) matrix_element -> ID [ INTNUM , . INTNUM ]

    INTNUM          shift and go to state 126


state 111

    (39) vector_element -> ID [ INTNUM ] .

    =               reduce using rule 39 (vector_element -> ID [ INTNUM ] .)
    ADDASSIGN       reduce using rule 39 (vector_element -> ID [ INTNUM ] .)
    SUBASSIGN       reduce using rule 39 (vector_element -> ID [ INTNUM ] .)
    MULASSIGN       reduce using rule 39 (vector_element -> ID [ INTNUM ] .)
    DIVASSIGN       reduce using rule 39 (vector_element -> ID [ INTNUM ] .)
    +               reduce using rule 39 (vector_element -> ID [ INTNUM ] .)
    -               reduce using rule 39 (vector_element -> ID [ INTNUM ] .)
    *               reduce using rule 39 (vector_element -> ID [ INTNUM ] .)
    /               reduce using rule 39 (vector_element -> ID [ INTNUM ] .)
    DOTADD          reduce using rule 39 (vector_element -> ID [ INTNUM ] .)
    DOTSUB          reduce using rule 39 (vector_element -> ID [ INTNUM ] .)
    DOTMUL          reduce using rule 39 (vector_element -> ID [ INTNUM ] .)
    DOTDIV          reduce using rule 39 (vector_element -> ID [ INTNUM ] .)
    '               reduce using rule 39 (vector_element -> ID [ INTNUM ] .)
    ;               reduce using rule 39 (vector_element -> ID [ INTNUM ] .)
    ,               reduce using rule 39 (vector_element -> ID [ INTNUM ] .)
    EQ              reduce using rule 39 (vector_element -> ID [ INTNUM ] .)
    NE              reduce using rule 39 (vector_element -> ID [ INTNUM ] .)
    LE              reduce using rule 39 (vector_element -> ID [ INTNUM ] .)
    GE              reduce using rule 39 (vector_element -> ID [ INTNUM ] .)
    LT              reduce using rule 39 (vector_element -> ID [ INTNUM ] .)
    GT              reduce using rule 39 (vector_element -> ID [ INTNUM ] .)
    :               reduce using rule 39 (vector_element -> ID [ INTNUM ] .)
    )               reduce using rule 39 (vector_element -> ID [ INTNUM ] .)
    {               reduce using rule 39 (vector_element -> ID [ INTNUM ] .)
    IF              reduce using rule 39 (vector_element -> ID [ INTNUM ] .)
    FOR             reduce using rule 39 (vector_element -> ID [ INTNUM ] .)
    WHILE           reduce using rule 39 (vector_element -> ID [ INTNUM ] .)
    RETURN          reduce using rule 39 (vector_element -> ID [ INTNUM ] .)
    BREAK           reduce using rule 39 (vector_element -> ID [ INTNUM ] .)
    CONTINUE        reduce using rule 39 (vector_element -> ID [ INTNUM ] .)
    PRINT           reduce using rule 39 (vector_element -> ID [ INTNUM ] .)
    ID              reduce using rule 39 (vector_element -> ID [ INTNUM ] .)
    ]               reduce using rule 39 (vector_element -> ID [ INTNUM ] .)


state 112

    (12) instruction -> IF ( condition ) instruction .
    (13) instruction -> IF ( condition ) instruction . ELSE instruction

    {               reduce using rule 12 (instruction -> IF ( condition ) instruction .)
    IF              reduce using rule 12 (instruction -> IF ( condition ) instruction .)
    FOR             reduce using rule 12 (instruction -> IF ( condition ) instruction .)
    WHILE           reduce using rule 12 (instruction -> IF ( condition ) instruction .)
    RETURN          reduce using rule 12 (instruction -> IF ( condition ) instruction .)
    BREAK           reduce using rule 12 (instruction -> IF ( condition ) instruction .)
    CONTINUE        reduce using rule 12 (instruction -> IF ( condition ) instruction .)
    PRINT           reduce using rule 12 (instruction -> IF ( condition ) instruction .)
    ID              reduce using rule 12 (instruction -> IF ( condition ) instruction .)
    $end            reduce using rule 12 (instruction -> IF ( condition ) instruction .)
    }               reduce using rule 12 (instruction -> IF ( condition ) instruction .)
    ELSE            shift and go to state 127

  ! ELSE            [ reduce using rule 12 (instruction -> IF ( condition ) instruction .) ]


state 113

    (61) condition -> expression EQ expression .
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (68) transposition -> expression . '

    )               reduce using rule 61 (condition -> expression EQ expression .)
    +               shift and go to state 62
    -               shift and go to state 63
    *               shift and go to state 64
    /               shift and go to state 65
    DOTADD          shift and go to state 66
    DOTSUB          shift and go to state 67
    DOTMUL          shift and go to state 68
    DOTDIV          shift and go to state 69
    '               shift and go to state 70


state 114

    (62) condition -> expression NE expression .
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (68) transposition -> expression . '

    )               reduce using rule 62 (condition -> expression NE expression .)
    +               shift and go to state 62
    -               shift and go to state 63
    *               shift and go to state 64
    /               shift and go to state 65
    DOTADD          shift and go to state 66
    DOTSUB          shift and go to state 67
    DOTMUL          shift and go to state 68
    DOTDIV          shift and go to state 69
    '               shift and go to state 70


state 115

    (63) condition -> expression LE expression .
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (68) transposition -> expression . '

    )               reduce using rule 63 (condition -> expression LE expression .)
    +               shift and go to state 62
    -               shift and go to state 63
    *               shift and go to state 64
    /               shift and go to state 65
    DOTADD          shift and go to state 66
    DOTSUB          shift and go to state 67
    DOTMUL          shift and go to state 68
    DOTDIV          shift and go to state 69
    '               shift and go to state 70


state 116

    (64) condition -> expression GE expression .
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (68) transposition -> expression . '

    )               reduce using rule 64 (condition -> expression GE expression .)
    +               shift and go to state 62
    -               shift and go to state 63
    *               shift and go to state 64
    /               shift and go to state 65
    DOTADD          shift and go to state 66
    DOTSUB          shift and go to state 67
    DOTMUL          shift and go to state 68
    DOTDIV          shift and go to state 69
    '               shift and go to state 70


state 117

    (65) condition -> expression LT expression .
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (68) transposition -> expression . '

    )               reduce using rule 65 (condition -> expression LT expression .)
    +               shift and go to state 62
    -               shift and go to state 63
    *               shift and go to state 64
    /               shift and go to state 65
    DOTADD          shift and go to state 66
    DOTSUB          shift and go to state 67
    DOTMUL          shift and go to state 68
    DOTDIV          shift and go to state 69
    '               shift and go to state 70


state 118

    (66) condition -> expression GT expression .
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (68) transposition -> expression . '

    )               reduce using rule 66 (condition -> expression GT expression .)
    +               shift and go to state 62
    -               shift and go to state 63
    *               shift and go to state 64
    /               shift and go to state 65
    DOTADD          shift and go to state 66
    DOTSUB          shift and go to state 67
    DOTMUL          shift and go to state 68
    DOTDIV          shift and go to state 69
    '               shift and go to state 70


state 119

    (14) instruction -> FOR var = expression : . expression instruction
    (45) expression -> . number
    (46) expression -> . var
    (47) expression -> . matrix
    (48) expression -> . matrix_function
    (49) expression -> . uminus
    (50) expression -> . transposition
    (51) expression -> . matrix_element
    (52) expression -> . vector_element
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (33) number -> . INTNUM
    (34) number -> . FLOATNUM
    (32) var -> . ID
    (24) matrix -> . [ vectors ]
    (28) matrix_function -> . function_name ( INTNUM )
    (67) uminus -> . - expression
    (68) transposition -> . expression '
    (40) matrix_element -> . ID [ INTNUM , INTNUM ]
    (39) vector_element -> . ID [ INTNUM ]
    (29) function_name -> . EYE
    (30) function_name -> . ONES
    (31) function_name -> . ZEROS

    INTNUM          shift and go to state 42
    FLOATNUM        shift and go to state 43
    ID              shift and go to state 17
    [               shift and go to state 44
    -               shift and go to state 41
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48

    var                            shift and go to state 34
    expression                     shift and go to state 128
    number                         shift and go to state 33
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    uminus                         shift and go to state 37
    transposition                  shift and go to state 38
    matrix_element                 shift and go to state 39
    vector_element                 shift and go to state 40
    function_name                  shift and go to state 45

state 120

    (15) instruction -> WHILE ( condition ) instruction .

    {               reduce using rule 15 (instruction -> WHILE ( condition ) instruction .)
    IF              reduce using rule 15 (instruction -> WHILE ( condition ) instruction .)
    FOR             reduce using rule 15 (instruction -> WHILE ( condition ) instruction .)
    WHILE           reduce using rule 15 (instruction -> WHILE ( condition ) instruction .)
    RETURN          reduce using rule 15 (instruction -> WHILE ( condition ) instruction .)
    BREAK           reduce using rule 15 (instruction -> WHILE ( condition ) instruction .)
    CONTINUE        reduce using rule 15 (instruction -> WHILE ( condition ) instruction .)
    PRINT           reduce using rule 15 (instruction -> WHILE ( condition ) instruction .)
    ID              reduce using rule 15 (instruction -> WHILE ( condition ) instruction .)
    $end            reduce using rule 15 (instruction -> WHILE ( condition ) instruction .)
    }               reduce using rule 15 (instruction -> WHILE ( condition ) instruction .)
    ELSE            reduce using rule 15 (instruction -> WHILE ( condition ) instruction .)


state 121

    (25) vector -> [ variables ] .

    ]               reduce using rule 25 (vector -> [ variables ] .)
    ,               reduce using rule 25 (vector -> [ variables ] .)


state 122

    (43) variables -> variables , . variable
    (36) variable -> . number
    (37) variable -> . var
    (38) variable -> . element
    (33) number -> . INTNUM
    (34) number -> . FLOATNUM
    (32) var -> . ID
    (41) element -> . vector_element
    (42) element -> . matrix_element
    (39) vector_element -> . ID [ INTNUM ]
    (40) matrix_element -> . ID [ INTNUM , INTNUM ]

    INTNUM          shift and go to state 42
    FLOATNUM        shift and go to state 43
    ID              shift and go to state 102

    variable                       shift and go to state 129
    number                         shift and go to state 99
    var                            shift and go to state 100
    element                        shift and go to state 101
    vector_element                 shift and go to state 103
    matrix_element                 shift and go to state 104

state 123

    (39) vector_element -> ID [ . INTNUM ]
    (40) matrix_element -> ID [ . INTNUM , INTNUM ]

    INTNUM          shift and go to state 130


state 124

    (26) vectors -> vectors , vector .

    ]               reduce using rule 26 (vectors -> vectors , vector .)
    ,               reduce using rule 26 (vectors -> vectors , vector .)


state 125

    (28) matrix_function -> function_name ( INTNUM ) .

    +               reduce using rule 28 (matrix_function -> function_name ( INTNUM ) .)
    -               reduce using rule 28 (matrix_function -> function_name ( INTNUM ) .)
    *               reduce using rule 28 (matrix_function -> function_name ( INTNUM ) .)
    /               reduce using rule 28 (matrix_function -> function_name ( INTNUM ) .)
    DOTADD          reduce using rule 28 (matrix_function -> function_name ( INTNUM ) .)
    DOTSUB          reduce using rule 28 (matrix_function -> function_name ( INTNUM ) .)
    DOTMUL          reduce using rule 28 (matrix_function -> function_name ( INTNUM ) .)
    DOTDIV          reduce using rule 28 (matrix_function -> function_name ( INTNUM ) .)
    '               reduce using rule 28 (matrix_function -> function_name ( INTNUM ) .)
    ;               reduce using rule 28 (matrix_function -> function_name ( INTNUM ) .)
    ,               reduce using rule 28 (matrix_function -> function_name ( INTNUM ) .)
    EQ              reduce using rule 28 (matrix_function -> function_name ( INTNUM ) .)
    NE              reduce using rule 28 (matrix_function -> function_name ( INTNUM ) .)
    LE              reduce using rule 28 (matrix_function -> function_name ( INTNUM ) .)
    GE              reduce using rule 28 (matrix_function -> function_name ( INTNUM ) .)
    LT              reduce using rule 28 (matrix_function -> function_name ( INTNUM ) .)
    GT              reduce using rule 28 (matrix_function -> function_name ( INTNUM ) .)
    :               reduce using rule 28 (matrix_function -> function_name ( INTNUM ) .)
    )               reduce using rule 28 (matrix_function -> function_name ( INTNUM ) .)
    {               reduce using rule 28 (matrix_function -> function_name ( INTNUM ) .)
    IF              reduce using rule 28 (matrix_function -> function_name ( INTNUM ) .)
    FOR             reduce using rule 28 (matrix_function -> function_name ( INTNUM ) .)
    WHILE           reduce using rule 28 (matrix_function -> function_name ( INTNUM ) .)
    RETURN          reduce using rule 28 (matrix_function -> function_name ( INTNUM ) .)
    BREAK           reduce using rule 28 (matrix_function -> function_name ( INTNUM ) .)
    CONTINUE        reduce using rule 28 (matrix_function -> function_name ( INTNUM ) .)
    PRINT           reduce using rule 28 (matrix_function -> function_name ( INTNUM ) .)
    ID              reduce using rule 28 (matrix_function -> function_name ( INTNUM ) .)


state 126

    (40) matrix_element -> ID [ INTNUM , INTNUM . ]

    ]               shift and go to state 131


state 127

    (13) instruction -> IF ( condition ) instruction ELSE . instruction
    (5) instruction -> . sys_instruction ;
    (6) instruction -> . assignment ;
    (7) instruction -> . { instructions }
    (12) instruction -> . IF ( condition ) instruction
    (13) instruction -> . IF ( condition ) instruction ELSE instruction
    (14) instruction -> . FOR var = expression : expression instruction
    (15) instruction -> . WHILE ( condition ) instruction
    (8) sys_instruction -> . RETURN expression
    (9) sys_instruction -> . BREAK
    (10) sys_instruction -> . CONTINUE
    (11) sys_instruction -> . PRINT print_values
    (16) assignment -> . var assignment_operator expression
    (17) assignment -> . matrix_element assignment_operator expression
    (18) assignment -> . vector_element assignment_operator expression
    (32) var -> . ID
    (40) matrix_element -> . ID [ INTNUM , INTNUM ]
    (39) vector_element -> . ID [ INTNUM ]

    {               shift and go to state 6
    IF              shift and go to state 7
    FOR             shift and go to state 8
    WHILE           shift and go to state 10
    RETURN          shift and go to state 11
    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    PRINT           shift and go to state 14
    ID              shift and go to state 17

    instruction                    shift and go to state 132
    sys_instruction                shift and go to state 4
    assignment                     shift and go to state 5
    var                            shift and go to state 9
    matrix_element                 shift and go to state 15
    vector_element                 shift and go to state 16

state 128

    (14) instruction -> FOR var = expression : expression . instruction
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (68) transposition -> expression . '
    (5) instruction -> . sys_instruction ;
    (6) instruction -> . assignment ;
    (7) instruction -> . { instructions }
    (12) instruction -> . IF ( condition ) instruction
    (13) instruction -> . IF ( condition ) instruction ELSE instruction
    (14) instruction -> . FOR var = expression : expression instruction
    (15) instruction -> . WHILE ( condition ) instruction
    (8) sys_instruction -> . RETURN expression
    (9) sys_instruction -> . BREAK
    (10) sys_instruction -> . CONTINUE
    (11) sys_instruction -> . PRINT print_values
    (16) assignment -> . var assignment_operator expression
    (17) assignment -> . matrix_element assignment_operator expression
    (18) assignment -> . vector_element assignment_operator expression
    (32) var -> . ID
    (40) matrix_element -> . ID [ INTNUM , INTNUM ]
    (39) vector_element -> . ID [ INTNUM ]

    +               shift and go to state 62
    -               shift and go to state 63
    *               shift and go to state 64
    /               shift and go to state 65
    DOTADD          shift and go to state 66
    DOTSUB          shift and go to state 67
    DOTMUL          shift and go to state 68
    DOTDIV          shift and go to state 69
    '               shift and go to state 70
    {               shift and go to state 6
    IF              shift and go to state 7
    FOR             shift and go to state 8
    WHILE           shift and go to state 10
    RETURN          shift and go to state 11
    BREAK           shift and go to state 12
    CONTINUE        shift and go to state 13
    PRINT           shift and go to state 14
    ID              shift and go to state 17

    var                            shift and go to state 9
    instruction                    shift and go to state 133
    sys_instruction                shift and go to state 4
    assignment                     shift and go to state 5
    matrix_element                 shift and go to state 15
    vector_element                 shift and go to state 16

state 129

    (43) variables -> variables , variable .

    ]               reduce using rule 43 (variables -> variables , variable .)
    ,               reduce using rule 43 (variables -> variables , variable .)


state 130

    (39) vector_element -> ID [ INTNUM . ]
    (40) matrix_element -> ID [ INTNUM . , INTNUM ]

    ]               shift and go to state 111
    ,               shift and go to state 110


state 131

    (40) matrix_element -> ID [ INTNUM , INTNUM ] .

    =               reduce using rule 40 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    ADDASSIGN       reduce using rule 40 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    SUBASSIGN       reduce using rule 40 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    MULASSIGN       reduce using rule 40 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    DIVASSIGN       reduce using rule 40 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    +               reduce using rule 40 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    -               reduce using rule 40 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    *               reduce using rule 40 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    /               reduce using rule 40 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    DOTADD          reduce using rule 40 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    DOTSUB          reduce using rule 40 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    DOTMUL          reduce using rule 40 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    DOTDIV          reduce using rule 40 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    '               reduce using rule 40 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    ;               reduce using rule 40 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    ,               reduce using rule 40 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    EQ              reduce using rule 40 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    NE              reduce using rule 40 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    LE              reduce using rule 40 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    GE              reduce using rule 40 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    LT              reduce using rule 40 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    GT              reduce using rule 40 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    :               reduce using rule 40 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    )               reduce using rule 40 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    {               reduce using rule 40 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    IF              reduce using rule 40 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    FOR             reduce using rule 40 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    WHILE           reduce using rule 40 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    RETURN          reduce using rule 40 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    BREAK           reduce using rule 40 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    CONTINUE        reduce using rule 40 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    PRINT           reduce using rule 40 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    ID              reduce using rule 40 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    ]               reduce using rule 40 (matrix_element -> ID [ INTNUM , INTNUM ] .)


state 132

    (13) instruction -> IF ( condition ) instruction ELSE instruction .

    {               reduce using rule 13 (instruction -> IF ( condition ) instruction ELSE instruction .)
    IF              reduce using rule 13 (instruction -> IF ( condition ) instruction ELSE instruction .)
    FOR             reduce using rule 13 (instruction -> IF ( condition ) instruction ELSE instruction .)
    WHILE           reduce using rule 13 (instruction -> IF ( condition ) instruction ELSE instruction .)
    RETURN          reduce using rule 13 (instruction -> IF ( condition ) instruction ELSE instruction .)
    BREAK           reduce using rule 13 (instruction -> IF ( condition ) instruction ELSE instruction .)
    CONTINUE        reduce using rule 13 (instruction -> IF ( condition ) instruction ELSE instruction .)
    PRINT           reduce using rule 13 (instruction -> IF ( condition ) instruction ELSE instruction .)
    ID              reduce using rule 13 (instruction -> IF ( condition ) instruction ELSE instruction .)
    $end            reduce using rule 13 (instruction -> IF ( condition ) instruction ELSE instruction .)
    }               reduce using rule 13 (instruction -> IF ( condition ) instruction ELSE instruction .)
    ELSE            reduce using rule 13 (instruction -> IF ( condition ) instruction ELSE instruction .)


state 133

    (14) instruction -> FOR var = expression : expression instruction .

    {               reduce using rule 14 (instruction -> FOR var = expression : expression instruction .)
    IF              reduce using rule 14 (instruction -> FOR var = expression : expression instruction .)
    FOR             reduce using rule 14 (instruction -> FOR var = expression : expression instruction .)
    WHILE           reduce using rule 14 (instruction -> FOR var = expression : expression instruction .)
    RETURN          reduce using rule 14 (instruction -> FOR var = expression : expression instruction .)
    BREAK           reduce using rule 14 (instruction -> FOR var = expression : expression instruction .)
    CONTINUE        reduce using rule 14 (instruction -> FOR var = expression : expression instruction .)
    PRINT           reduce using rule 14 (instruction -> FOR var = expression : expression instruction .)
    ID              reduce using rule 14 (instruction -> FOR var = expression : expression instruction .)
    $end            reduce using rule 14 (instruction -> FOR var = expression : expression instruction .)
    }               reduce using rule 14 (instruction -> FOR var = expression : expression instruction .)
    ELSE            reduce using rule 14 (instruction -> FOR var = expression : expression instruction .)

