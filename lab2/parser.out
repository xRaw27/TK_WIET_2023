Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> instructions_opt
Rule 1     instructions_opt -> instructions
Rule 2     instructions_opt -> <empty>
Rule 3     instructions -> instructions instruction
Rule 4     instructions -> instruction
Rule 5     instruction -> sys_instruction ;
Rule 6     instruction -> assignment ;
Rule 7     instruction -> { instructions }
Rule 8     instruction -> FOR var = expression : expression instruction
Rule 9     instruction -> WHILE ( condition ) instruction
Rule 10    instruction -> IF ( condition ) instruction
Rule 11    instruction -> IF ( condition ) instruction ELSE instruction
Rule 12    condition -> expression EQ expression
Rule 13    condition -> expression NE expression
Rule 14    condition -> expression LE expression
Rule 15    condition -> expression GE expression
Rule 16    condition -> expression LT expression
Rule 17    condition -> expression GT expression
Rule 18    sys_instruction -> BREAK
Rule 19    sys_instruction -> CONTINUE
Rule 20    sys_instruction -> RETURN expression
Rule 21    sys_instruction -> PRINT print_values
Rule 22    print_values -> print_values , string
Rule 23    print_values -> print_values , expression
Rule 24    print_values -> string
Rule 25    print_values -> expression
Rule 26    expression -> number
Rule 27    expression -> var
Rule 28    expression -> matrix
Rule 29    expression -> matrix_function
Rule 30    expression -> uminus
Rule 31    expression -> transposition
Rule 32    expression -> matrix_element
Rule 33    expression -> vector_element
Rule 34    assignment -> var assignment_operator expression
Rule 35    assignment -> matrix_element assignment_operator expression
Rule 36    assignment -> vector_element assignment_operator expression
Rule 37    assignment_operator -> =
Rule 38    assignment_operator -> ADDASSIGN
Rule 39    assignment_operator -> SUBASSIGN
Rule 40    assignment_operator -> MULASSIGN
Rule 41    assignment_operator -> DIVASSIGN
Rule 42    matrix_function -> EYE ( INTNUM )
Rule 43    matrix_function -> ONES ( INTNUM )
Rule 44    matrix_function -> ZEROS ( INTNUM )
Rule 45    matrix -> [ vectors ]
Rule 46    vectors -> vectors , vector
Rule 47    vectors -> vector
Rule 48    vector -> [ variables ]
Rule 49    variables -> variables , variable
Rule 50    variables -> variable
Rule 51    variable -> number
Rule 52    variable -> var
Rule 53    variable -> element
Rule 54    element -> vector_element
Rule 55    element -> matrix_element
Rule 56    vector_element -> ID [ INTNUM ]
Rule 57    matrix_element -> ID [ INTNUM , INTNUM ]
Rule 58    var -> ID
Rule 59    number -> INTNUM
Rule 60    number -> FLOATNUM
Rule 61    string -> STRING
Rule 62    expression -> expression + expression
Rule 63    expression -> expression - expression
Rule 64    expression -> expression * expression
Rule 65    expression -> expression / expression
Rule 66    expression -> expression DOTADD expression
Rule 67    expression -> expression DOTSUB expression
Rule 68    expression -> expression DOTMUL expression
Rule 69    expression -> expression DOTDIV expression
Rule 70    uminus -> - expression
Rule 71    transposition -> expression '

Terminals, with rules where they appear

'                    : 71
(                    : 9 10 11 42 43 44
)                    : 9 10 11 42 43 44
*                    : 64
+                    : 62
,                    : 22 23 46 49 57
-                    : 63 70
/                    : 65
:                    : 8
;                    : 5 6
=                    : 8 37
ADDASSIGN            : 38
BREAK                : 18
CONTINUE             : 19
DIVASSIGN            : 41
DOTADD               : 66
DOTDIV               : 69
DOTMUL               : 68
DOTSUB               : 67
ELSE                 : 11
EQ                   : 12
EYE                  : 42
FLOATNUM             : 60
FOR                  : 8
GE                   : 15
GT                   : 17
ID                   : 56 57 58
IF                   : 10 11
INTNUM               : 42 43 44 56 57 57 59
LE                   : 14
LT                   : 16
MULASSIGN            : 40
NE                   : 13
ONES                 : 43
PRINT                : 21
RETURN               : 20
STRING               : 61
SUBASSIGN            : 39
WHILE                : 9
ZEROS                : 44
[                    : 45 48 56 57
]                    : 45 48 56 57
error                : 
{                    : 7
}                    : 7

Nonterminals, with rules where they appear

assignment           : 6
assignment_operator  : 34 35 36
condition            : 9 10 11
element              : 53
expression           : 8 8 12 12 13 13 14 14 15 15 16 16 17 17 20 23 25 34 35 36 62 62 63 63 64 64 65 65 66 66 67 67 68 68 69 69 70 71
instruction          : 3 4 8 9 10 11 11
instructions         : 1 3 7
instructions_opt     : 0
matrix               : 28
matrix_element       : 32 35 55
matrix_function      : 29
number               : 26 51
print_values         : 21 22 23
string               : 22 24
sys_instruction      : 5
transposition        : 31
uminus               : 30
var                  : 8 27 34 52
variable             : 49 50
variables            : 48 49
vector               : 46 47
vector_element       : 33 36 54
vectors              : 45 46

Parsing method: LALR

state 0

    (0) S' -> . instructions_opt
    (1) instructions_opt -> . instructions
    (2) instructions_opt -> .
    (3) instructions -> . instructions instruction
    (4) instructions -> . instruction
    (5) instruction -> . sys_instruction ;
    (6) instruction -> . assignment ;
    (7) instruction -> . { instructions }
    (8) instruction -> . FOR var = expression : expression instruction
    (9) instruction -> . WHILE ( condition ) instruction
    (10) instruction -> . IF ( condition ) instruction
    (11) instruction -> . IF ( condition ) instruction ELSE instruction
    (18) sys_instruction -> . BREAK
    (19) sys_instruction -> . CONTINUE
    (20) sys_instruction -> . RETURN expression
    (21) sys_instruction -> . PRINT print_values
    (34) assignment -> . var assignment_operator expression
    (35) assignment -> . matrix_element assignment_operator expression
    (36) assignment -> . vector_element assignment_operator expression
    (58) var -> . ID
    (57) matrix_element -> . ID [ INTNUM , INTNUM ]
    (56) vector_element -> . ID [ INTNUM ]

    $end            reduce using rule 2 (instructions_opt -> .)
    {               shift and go to state 6
    FOR             shift and go to state 7
    WHILE           shift and go to state 9
    IF              shift and go to state 10
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    RETURN          shift and go to state 13
    PRINT           shift and go to state 14
    ID              shift and go to state 17

    instructions_opt               shift and go to state 1
    instructions                   shift and go to state 2
    instruction                    shift and go to state 3
    sys_instruction                shift and go to state 4
    assignment                     shift and go to state 5
    var                            shift and go to state 8
    matrix_element                 shift and go to state 15
    vector_element                 shift and go to state 16

state 1

    (0) S' -> instructions_opt .



state 2

    (1) instructions_opt -> instructions .
    (3) instructions -> instructions . instruction
    (5) instruction -> . sys_instruction ;
    (6) instruction -> . assignment ;
    (7) instruction -> . { instructions }
    (8) instruction -> . FOR var = expression : expression instruction
    (9) instruction -> . WHILE ( condition ) instruction
    (10) instruction -> . IF ( condition ) instruction
    (11) instruction -> . IF ( condition ) instruction ELSE instruction
    (18) sys_instruction -> . BREAK
    (19) sys_instruction -> . CONTINUE
    (20) sys_instruction -> . RETURN expression
    (21) sys_instruction -> . PRINT print_values
    (34) assignment -> . var assignment_operator expression
    (35) assignment -> . matrix_element assignment_operator expression
    (36) assignment -> . vector_element assignment_operator expression
    (58) var -> . ID
    (57) matrix_element -> . ID [ INTNUM , INTNUM ]
    (56) vector_element -> . ID [ INTNUM ]

    $end            reduce using rule 1 (instructions_opt -> instructions .)
    {               shift and go to state 6
    FOR             shift and go to state 7
    WHILE           shift and go to state 9
    IF              shift and go to state 10
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    RETURN          shift and go to state 13
    PRINT           shift and go to state 14
    ID              shift and go to state 17

    instruction                    shift and go to state 18
    sys_instruction                shift and go to state 4
    assignment                     shift and go to state 5
    var                            shift and go to state 8
    matrix_element                 shift and go to state 15
    vector_element                 shift and go to state 16

state 3

    (4) instructions -> instruction .

    {               reduce using rule 4 (instructions -> instruction .)
    FOR             reduce using rule 4 (instructions -> instruction .)
    WHILE           reduce using rule 4 (instructions -> instruction .)
    IF              reduce using rule 4 (instructions -> instruction .)
    BREAK           reduce using rule 4 (instructions -> instruction .)
    CONTINUE        reduce using rule 4 (instructions -> instruction .)
    RETURN          reduce using rule 4 (instructions -> instruction .)
    PRINT           reduce using rule 4 (instructions -> instruction .)
    ID              reduce using rule 4 (instructions -> instruction .)
    $end            reduce using rule 4 (instructions -> instruction .)
    }               reduce using rule 4 (instructions -> instruction .)


state 4

    (5) instruction -> sys_instruction . ;

    ;               shift and go to state 19


state 5

    (6) instruction -> assignment . ;

    ;               shift and go to state 20


state 6

    (7) instruction -> { . instructions }
    (3) instructions -> . instructions instruction
    (4) instructions -> . instruction
    (5) instruction -> . sys_instruction ;
    (6) instruction -> . assignment ;
    (7) instruction -> . { instructions }
    (8) instruction -> . FOR var = expression : expression instruction
    (9) instruction -> . WHILE ( condition ) instruction
    (10) instruction -> . IF ( condition ) instruction
    (11) instruction -> . IF ( condition ) instruction ELSE instruction
    (18) sys_instruction -> . BREAK
    (19) sys_instruction -> . CONTINUE
    (20) sys_instruction -> . RETURN expression
    (21) sys_instruction -> . PRINT print_values
    (34) assignment -> . var assignment_operator expression
    (35) assignment -> . matrix_element assignment_operator expression
    (36) assignment -> . vector_element assignment_operator expression
    (58) var -> . ID
    (57) matrix_element -> . ID [ INTNUM , INTNUM ]
    (56) vector_element -> . ID [ INTNUM ]

    {               shift and go to state 6
    FOR             shift and go to state 7
    WHILE           shift and go to state 9
    IF              shift and go to state 10
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    RETURN          shift and go to state 13
    PRINT           shift and go to state 14
    ID              shift and go to state 17

    instructions                   shift and go to state 21
    instruction                    shift and go to state 3
    sys_instruction                shift and go to state 4
    assignment                     shift and go to state 5
    var                            shift and go to state 8
    matrix_element                 shift and go to state 15
    vector_element                 shift and go to state 16

state 7

    (8) instruction -> FOR . var = expression : expression instruction
    (58) var -> . ID

    ID              shift and go to state 23

    var                            shift and go to state 22

state 8

    (34) assignment -> var . assignment_operator expression
    (37) assignment_operator -> . =
    (38) assignment_operator -> . ADDASSIGN
    (39) assignment_operator -> . SUBASSIGN
    (40) assignment_operator -> . MULASSIGN
    (41) assignment_operator -> . DIVASSIGN

    =               shift and go to state 25
    ADDASSIGN       shift and go to state 26
    SUBASSIGN       shift and go to state 27
    MULASSIGN       shift and go to state 28
    DIVASSIGN       shift and go to state 29

    assignment_operator            shift and go to state 24

state 9

    (9) instruction -> WHILE . ( condition ) instruction

    (               shift and go to state 30


state 10

    (10) instruction -> IF . ( condition ) instruction
    (11) instruction -> IF . ( condition ) instruction ELSE instruction

    (               shift and go to state 31


state 11

    (18) sys_instruction -> BREAK .

    ;               reduce using rule 18 (sys_instruction -> BREAK .)


state 12

    (19) sys_instruction -> CONTINUE .

    ;               reduce using rule 19 (sys_instruction -> CONTINUE .)


state 13

    (20) sys_instruction -> RETURN . expression
    (26) expression -> . number
    (27) expression -> . var
    (28) expression -> . matrix
    (29) expression -> . matrix_function
    (30) expression -> . uminus
    (31) expression -> . transposition
    (32) expression -> . matrix_element
    (33) expression -> . vector_element
    (62) expression -> . expression + expression
    (63) expression -> . expression - expression
    (64) expression -> . expression * expression
    (65) expression -> . expression / expression
    (66) expression -> . expression DOTADD expression
    (67) expression -> . expression DOTSUB expression
    (68) expression -> . expression DOTMUL expression
    (69) expression -> . expression DOTDIV expression
    (59) number -> . INTNUM
    (60) number -> . FLOATNUM
    (58) var -> . ID
    (45) matrix -> . [ vectors ]
    (42) matrix_function -> . EYE ( INTNUM )
    (43) matrix_function -> . ONES ( INTNUM )
    (44) matrix_function -> . ZEROS ( INTNUM )
    (70) uminus -> . - expression
    (71) transposition -> . expression '
    (57) matrix_element -> . ID [ INTNUM , INTNUM ]
    (56) vector_element -> . ID [ INTNUM ]

    INTNUM          shift and go to state 42
    FLOATNUM        shift and go to state 43
    ID              shift and go to state 17
    [               shift and go to state 44
    EYE             shift and go to state 45
    ONES            shift and go to state 46
    ZEROS           shift and go to state 47
    -               shift and go to state 41

    expression                     shift and go to state 32
    number                         shift and go to state 33
    var                            shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    uminus                         shift and go to state 37
    transposition                  shift and go to state 38
    matrix_element                 shift and go to state 39
    vector_element                 shift and go to state 40

state 14

    (21) sys_instruction -> PRINT . print_values
    (22) print_values -> . print_values , string
    (23) print_values -> . print_values , expression
    (24) print_values -> . string
    (25) print_values -> . expression
    (61) string -> . STRING
    (26) expression -> . number
    (27) expression -> . var
    (28) expression -> . matrix
    (29) expression -> . matrix_function
    (30) expression -> . uminus
    (31) expression -> . transposition
    (32) expression -> . matrix_element
    (33) expression -> . vector_element
    (62) expression -> . expression + expression
    (63) expression -> . expression - expression
    (64) expression -> . expression * expression
    (65) expression -> . expression / expression
    (66) expression -> . expression DOTADD expression
    (67) expression -> . expression DOTSUB expression
    (68) expression -> . expression DOTMUL expression
    (69) expression -> . expression DOTDIV expression
    (59) number -> . INTNUM
    (60) number -> . FLOATNUM
    (58) var -> . ID
    (45) matrix -> . [ vectors ]
    (42) matrix_function -> . EYE ( INTNUM )
    (43) matrix_function -> . ONES ( INTNUM )
    (44) matrix_function -> . ZEROS ( INTNUM )
    (70) uminus -> . - expression
    (71) transposition -> . expression '
    (57) matrix_element -> . ID [ INTNUM , INTNUM ]
    (56) vector_element -> . ID [ INTNUM ]

    STRING          shift and go to state 51
    INTNUM          shift and go to state 42
    FLOATNUM        shift and go to state 43
    ID              shift and go to state 17
    [               shift and go to state 44
    EYE             shift and go to state 45
    ONES            shift and go to state 46
    ZEROS           shift and go to state 47
    -               shift and go to state 41

    print_values                   shift and go to state 48
    string                         shift and go to state 49
    expression                     shift and go to state 50
    number                         shift and go to state 33
    var                            shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    uminus                         shift and go to state 37
    transposition                  shift and go to state 38
    matrix_element                 shift and go to state 39
    vector_element                 shift and go to state 40

state 15

    (35) assignment -> matrix_element . assignment_operator expression
    (37) assignment_operator -> . =
    (38) assignment_operator -> . ADDASSIGN
    (39) assignment_operator -> . SUBASSIGN
    (40) assignment_operator -> . MULASSIGN
    (41) assignment_operator -> . DIVASSIGN

    =               shift and go to state 25
    ADDASSIGN       shift and go to state 26
    SUBASSIGN       shift and go to state 27
    MULASSIGN       shift and go to state 28
    DIVASSIGN       shift and go to state 29

    assignment_operator            shift and go to state 52

state 16

    (36) assignment -> vector_element . assignment_operator expression
    (37) assignment_operator -> . =
    (38) assignment_operator -> . ADDASSIGN
    (39) assignment_operator -> . SUBASSIGN
    (40) assignment_operator -> . MULASSIGN
    (41) assignment_operator -> . DIVASSIGN

    =               shift and go to state 25
    ADDASSIGN       shift and go to state 26
    SUBASSIGN       shift and go to state 27
    MULASSIGN       shift and go to state 28
    DIVASSIGN       shift and go to state 29

    assignment_operator            shift and go to state 53

state 17

    (58) var -> ID .
    (57) matrix_element -> ID . [ INTNUM , INTNUM ]
    (56) vector_element -> ID . [ INTNUM ]

    =               reduce using rule 58 (var -> ID .)
    ADDASSIGN       reduce using rule 58 (var -> ID .)
    SUBASSIGN       reduce using rule 58 (var -> ID .)
    MULASSIGN       reduce using rule 58 (var -> ID .)
    DIVASSIGN       reduce using rule 58 (var -> ID .)
    +               reduce using rule 58 (var -> ID .)
    -               reduce using rule 58 (var -> ID .)
    *               reduce using rule 58 (var -> ID .)
    /               reduce using rule 58 (var -> ID .)
    DOTADD          reduce using rule 58 (var -> ID .)
    DOTSUB          reduce using rule 58 (var -> ID .)
    DOTMUL          reduce using rule 58 (var -> ID .)
    DOTDIV          reduce using rule 58 (var -> ID .)
    '               reduce using rule 58 (var -> ID .)
    ;               reduce using rule 58 (var -> ID .)
    ,               reduce using rule 58 (var -> ID .)
    EQ              reduce using rule 58 (var -> ID .)
    NE              reduce using rule 58 (var -> ID .)
    LE              reduce using rule 58 (var -> ID .)
    GE              reduce using rule 58 (var -> ID .)
    LT              reduce using rule 58 (var -> ID .)
    GT              reduce using rule 58 (var -> ID .)
    :               reduce using rule 58 (var -> ID .)
    )               reduce using rule 58 (var -> ID .)
    {               reduce using rule 58 (var -> ID .)
    FOR             reduce using rule 58 (var -> ID .)
    WHILE           reduce using rule 58 (var -> ID .)
    IF              reduce using rule 58 (var -> ID .)
    BREAK           reduce using rule 58 (var -> ID .)
    CONTINUE        reduce using rule 58 (var -> ID .)
    RETURN          reduce using rule 58 (var -> ID .)
    PRINT           reduce using rule 58 (var -> ID .)
    ID              reduce using rule 58 (var -> ID .)
    [               shift and go to state 54


state 18

    (3) instructions -> instructions instruction .

    {               reduce using rule 3 (instructions -> instructions instruction .)
    FOR             reduce using rule 3 (instructions -> instructions instruction .)
    WHILE           reduce using rule 3 (instructions -> instructions instruction .)
    IF              reduce using rule 3 (instructions -> instructions instruction .)
    BREAK           reduce using rule 3 (instructions -> instructions instruction .)
    CONTINUE        reduce using rule 3 (instructions -> instructions instruction .)
    RETURN          reduce using rule 3 (instructions -> instructions instruction .)
    PRINT           reduce using rule 3 (instructions -> instructions instruction .)
    ID              reduce using rule 3 (instructions -> instructions instruction .)
    $end            reduce using rule 3 (instructions -> instructions instruction .)
    }               reduce using rule 3 (instructions -> instructions instruction .)


state 19

    (5) instruction -> sys_instruction ; .

    {               reduce using rule 5 (instruction -> sys_instruction ; .)
    FOR             reduce using rule 5 (instruction -> sys_instruction ; .)
    WHILE           reduce using rule 5 (instruction -> sys_instruction ; .)
    IF              reduce using rule 5 (instruction -> sys_instruction ; .)
    BREAK           reduce using rule 5 (instruction -> sys_instruction ; .)
    CONTINUE        reduce using rule 5 (instruction -> sys_instruction ; .)
    RETURN          reduce using rule 5 (instruction -> sys_instruction ; .)
    PRINT           reduce using rule 5 (instruction -> sys_instruction ; .)
    ID              reduce using rule 5 (instruction -> sys_instruction ; .)
    $end            reduce using rule 5 (instruction -> sys_instruction ; .)
    }               reduce using rule 5 (instruction -> sys_instruction ; .)
    ELSE            reduce using rule 5 (instruction -> sys_instruction ; .)


state 20

    (6) instruction -> assignment ; .

    {               reduce using rule 6 (instruction -> assignment ; .)
    FOR             reduce using rule 6 (instruction -> assignment ; .)
    WHILE           reduce using rule 6 (instruction -> assignment ; .)
    IF              reduce using rule 6 (instruction -> assignment ; .)
    BREAK           reduce using rule 6 (instruction -> assignment ; .)
    CONTINUE        reduce using rule 6 (instruction -> assignment ; .)
    RETURN          reduce using rule 6 (instruction -> assignment ; .)
    PRINT           reduce using rule 6 (instruction -> assignment ; .)
    ID              reduce using rule 6 (instruction -> assignment ; .)
    $end            reduce using rule 6 (instruction -> assignment ; .)
    }               reduce using rule 6 (instruction -> assignment ; .)
    ELSE            reduce using rule 6 (instruction -> assignment ; .)


state 21

    (7) instruction -> { instructions . }
    (3) instructions -> instructions . instruction
    (5) instruction -> . sys_instruction ;
    (6) instruction -> . assignment ;
    (7) instruction -> . { instructions }
    (8) instruction -> . FOR var = expression : expression instruction
    (9) instruction -> . WHILE ( condition ) instruction
    (10) instruction -> . IF ( condition ) instruction
    (11) instruction -> . IF ( condition ) instruction ELSE instruction
    (18) sys_instruction -> . BREAK
    (19) sys_instruction -> . CONTINUE
    (20) sys_instruction -> . RETURN expression
    (21) sys_instruction -> . PRINT print_values
    (34) assignment -> . var assignment_operator expression
    (35) assignment -> . matrix_element assignment_operator expression
    (36) assignment -> . vector_element assignment_operator expression
    (58) var -> . ID
    (57) matrix_element -> . ID [ INTNUM , INTNUM ]
    (56) vector_element -> . ID [ INTNUM ]

    }               shift and go to state 55
    {               shift and go to state 6
    FOR             shift and go to state 7
    WHILE           shift and go to state 9
    IF              shift and go to state 10
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    RETURN          shift and go to state 13
    PRINT           shift and go to state 14
    ID              shift and go to state 17

    instruction                    shift and go to state 18
    sys_instruction                shift and go to state 4
    assignment                     shift and go to state 5
    var                            shift and go to state 8
    matrix_element                 shift and go to state 15
    vector_element                 shift and go to state 16

state 22

    (8) instruction -> FOR var . = expression : expression instruction

    =               shift and go to state 56


state 23

    (58) var -> ID .

    =               reduce using rule 58 (var -> ID .)


state 24

    (34) assignment -> var assignment_operator . expression
    (26) expression -> . number
    (27) expression -> . var
    (28) expression -> . matrix
    (29) expression -> . matrix_function
    (30) expression -> . uminus
    (31) expression -> . transposition
    (32) expression -> . matrix_element
    (33) expression -> . vector_element
    (62) expression -> . expression + expression
    (63) expression -> . expression - expression
    (64) expression -> . expression * expression
    (65) expression -> . expression / expression
    (66) expression -> . expression DOTADD expression
    (67) expression -> . expression DOTSUB expression
    (68) expression -> . expression DOTMUL expression
    (69) expression -> . expression DOTDIV expression
    (59) number -> . INTNUM
    (60) number -> . FLOATNUM
    (58) var -> . ID
    (45) matrix -> . [ vectors ]
    (42) matrix_function -> . EYE ( INTNUM )
    (43) matrix_function -> . ONES ( INTNUM )
    (44) matrix_function -> . ZEROS ( INTNUM )
    (70) uminus -> . - expression
    (71) transposition -> . expression '
    (57) matrix_element -> . ID [ INTNUM , INTNUM ]
    (56) vector_element -> . ID [ INTNUM ]

    INTNUM          shift and go to state 42
    FLOATNUM        shift and go to state 43
    ID              shift and go to state 17
    [               shift and go to state 44
    EYE             shift and go to state 45
    ONES            shift and go to state 46
    ZEROS           shift and go to state 47
    -               shift and go to state 41

    var                            shift and go to state 34
    expression                     shift and go to state 57
    number                         shift and go to state 33
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    uminus                         shift and go to state 37
    transposition                  shift and go to state 38
    matrix_element                 shift and go to state 39
    vector_element                 shift and go to state 40

state 25

    (37) assignment_operator -> = .

    INTNUM          reduce using rule 37 (assignment_operator -> = .)
    FLOATNUM        reduce using rule 37 (assignment_operator -> = .)
    ID              reduce using rule 37 (assignment_operator -> = .)
    [               reduce using rule 37 (assignment_operator -> = .)
    EYE             reduce using rule 37 (assignment_operator -> = .)
    ONES            reduce using rule 37 (assignment_operator -> = .)
    ZEROS           reduce using rule 37 (assignment_operator -> = .)
    -               reduce using rule 37 (assignment_operator -> = .)


state 26

    (38) assignment_operator -> ADDASSIGN .

    INTNUM          reduce using rule 38 (assignment_operator -> ADDASSIGN .)
    FLOATNUM        reduce using rule 38 (assignment_operator -> ADDASSIGN .)
    ID              reduce using rule 38 (assignment_operator -> ADDASSIGN .)
    [               reduce using rule 38 (assignment_operator -> ADDASSIGN .)
    EYE             reduce using rule 38 (assignment_operator -> ADDASSIGN .)
    ONES            reduce using rule 38 (assignment_operator -> ADDASSIGN .)
    ZEROS           reduce using rule 38 (assignment_operator -> ADDASSIGN .)
    -               reduce using rule 38 (assignment_operator -> ADDASSIGN .)


state 27

    (39) assignment_operator -> SUBASSIGN .

    INTNUM          reduce using rule 39 (assignment_operator -> SUBASSIGN .)
    FLOATNUM        reduce using rule 39 (assignment_operator -> SUBASSIGN .)
    ID              reduce using rule 39 (assignment_operator -> SUBASSIGN .)
    [               reduce using rule 39 (assignment_operator -> SUBASSIGN .)
    EYE             reduce using rule 39 (assignment_operator -> SUBASSIGN .)
    ONES            reduce using rule 39 (assignment_operator -> SUBASSIGN .)
    ZEROS           reduce using rule 39 (assignment_operator -> SUBASSIGN .)
    -               reduce using rule 39 (assignment_operator -> SUBASSIGN .)


state 28

    (40) assignment_operator -> MULASSIGN .

    INTNUM          reduce using rule 40 (assignment_operator -> MULASSIGN .)
    FLOATNUM        reduce using rule 40 (assignment_operator -> MULASSIGN .)
    ID              reduce using rule 40 (assignment_operator -> MULASSIGN .)
    [               reduce using rule 40 (assignment_operator -> MULASSIGN .)
    EYE             reduce using rule 40 (assignment_operator -> MULASSIGN .)
    ONES            reduce using rule 40 (assignment_operator -> MULASSIGN .)
    ZEROS           reduce using rule 40 (assignment_operator -> MULASSIGN .)
    -               reduce using rule 40 (assignment_operator -> MULASSIGN .)


state 29

    (41) assignment_operator -> DIVASSIGN .

    INTNUM          reduce using rule 41 (assignment_operator -> DIVASSIGN .)
    FLOATNUM        reduce using rule 41 (assignment_operator -> DIVASSIGN .)
    ID              reduce using rule 41 (assignment_operator -> DIVASSIGN .)
    [               reduce using rule 41 (assignment_operator -> DIVASSIGN .)
    EYE             reduce using rule 41 (assignment_operator -> DIVASSIGN .)
    ONES            reduce using rule 41 (assignment_operator -> DIVASSIGN .)
    ZEROS           reduce using rule 41 (assignment_operator -> DIVASSIGN .)
    -               reduce using rule 41 (assignment_operator -> DIVASSIGN .)


state 30

    (9) instruction -> WHILE ( . condition ) instruction
    (12) condition -> . expression EQ expression
    (13) condition -> . expression NE expression
    (14) condition -> . expression LE expression
    (15) condition -> . expression GE expression
    (16) condition -> . expression LT expression
    (17) condition -> . expression GT expression
    (26) expression -> . number
    (27) expression -> . var
    (28) expression -> . matrix
    (29) expression -> . matrix_function
    (30) expression -> . uminus
    (31) expression -> . transposition
    (32) expression -> . matrix_element
    (33) expression -> . vector_element
    (62) expression -> . expression + expression
    (63) expression -> . expression - expression
    (64) expression -> . expression * expression
    (65) expression -> . expression / expression
    (66) expression -> . expression DOTADD expression
    (67) expression -> . expression DOTSUB expression
    (68) expression -> . expression DOTMUL expression
    (69) expression -> . expression DOTDIV expression
    (59) number -> . INTNUM
    (60) number -> . FLOATNUM
    (58) var -> . ID
    (45) matrix -> . [ vectors ]
    (42) matrix_function -> . EYE ( INTNUM )
    (43) matrix_function -> . ONES ( INTNUM )
    (44) matrix_function -> . ZEROS ( INTNUM )
    (70) uminus -> . - expression
    (71) transposition -> . expression '
    (57) matrix_element -> . ID [ INTNUM , INTNUM ]
    (56) vector_element -> . ID [ INTNUM ]

    INTNUM          shift and go to state 42
    FLOATNUM        shift and go to state 43
    ID              shift and go to state 17
    [               shift and go to state 44
    EYE             shift and go to state 45
    ONES            shift and go to state 46
    ZEROS           shift and go to state 47
    -               shift and go to state 41

    condition                      shift and go to state 58
    expression                     shift and go to state 59
    number                         shift and go to state 33
    var                            shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    uminus                         shift and go to state 37
    transposition                  shift and go to state 38
    matrix_element                 shift and go to state 39
    vector_element                 shift and go to state 40

state 31

    (10) instruction -> IF ( . condition ) instruction
    (11) instruction -> IF ( . condition ) instruction ELSE instruction
    (12) condition -> . expression EQ expression
    (13) condition -> . expression NE expression
    (14) condition -> . expression LE expression
    (15) condition -> . expression GE expression
    (16) condition -> . expression LT expression
    (17) condition -> . expression GT expression
    (26) expression -> . number
    (27) expression -> . var
    (28) expression -> . matrix
    (29) expression -> . matrix_function
    (30) expression -> . uminus
    (31) expression -> . transposition
    (32) expression -> . matrix_element
    (33) expression -> . vector_element
    (62) expression -> . expression + expression
    (63) expression -> . expression - expression
    (64) expression -> . expression * expression
    (65) expression -> . expression / expression
    (66) expression -> . expression DOTADD expression
    (67) expression -> . expression DOTSUB expression
    (68) expression -> . expression DOTMUL expression
    (69) expression -> . expression DOTDIV expression
    (59) number -> . INTNUM
    (60) number -> . FLOATNUM
    (58) var -> . ID
    (45) matrix -> . [ vectors ]
    (42) matrix_function -> . EYE ( INTNUM )
    (43) matrix_function -> . ONES ( INTNUM )
    (44) matrix_function -> . ZEROS ( INTNUM )
    (70) uminus -> . - expression
    (71) transposition -> . expression '
    (57) matrix_element -> . ID [ INTNUM , INTNUM ]
    (56) vector_element -> . ID [ INTNUM ]

    INTNUM          shift and go to state 42
    FLOATNUM        shift and go to state 43
    ID              shift and go to state 17
    [               shift and go to state 44
    EYE             shift and go to state 45
    ONES            shift and go to state 46
    ZEROS           shift and go to state 47
    -               shift and go to state 41

    condition                      shift and go to state 60
    expression                     shift and go to state 59
    number                         shift and go to state 33
    var                            shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    uminus                         shift and go to state 37
    transposition                  shift and go to state 38
    matrix_element                 shift and go to state 39
    vector_element                 shift and go to state 40

state 32

    (20) sys_instruction -> RETURN expression .
    (62) expression -> expression . + expression
    (63) expression -> expression . - expression
    (64) expression -> expression . * expression
    (65) expression -> expression . / expression
    (66) expression -> expression . DOTADD expression
    (67) expression -> expression . DOTSUB expression
    (68) expression -> expression . DOTMUL expression
    (69) expression -> expression . DOTDIV expression
    (71) transposition -> expression . '

    ;               reduce using rule 20 (sys_instruction -> RETURN expression .)
    +               shift and go to state 61
    -               shift and go to state 62
    *               shift and go to state 63
    /               shift and go to state 64
    DOTADD          shift and go to state 65
    DOTSUB          shift and go to state 66
    DOTMUL          shift and go to state 67
    DOTDIV          shift and go to state 68
    '               shift and go to state 69


state 33

    (26) expression -> number .

    +               reduce using rule 26 (expression -> number .)
    -               reduce using rule 26 (expression -> number .)
    *               reduce using rule 26 (expression -> number .)
    /               reduce using rule 26 (expression -> number .)
    DOTADD          reduce using rule 26 (expression -> number .)
    DOTSUB          reduce using rule 26 (expression -> number .)
    DOTMUL          reduce using rule 26 (expression -> number .)
    DOTDIV          reduce using rule 26 (expression -> number .)
    '               reduce using rule 26 (expression -> number .)
    ;               reduce using rule 26 (expression -> number .)
    ,               reduce using rule 26 (expression -> number .)
    EQ              reduce using rule 26 (expression -> number .)
    NE              reduce using rule 26 (expression -> number .)
    LE              reduce using rule 26 (expression -> number .)
    GE              reduce using rule 26 (expression -> number .)
    LT              reduce using rule 26 (expression -> number .)
    GT              reduce using rule 26 (expression -> number .)
    :               reduce using rule 26 (expression -> number .)
    )               reduce using rule 26 (expression -> number .)
    {               reduce using rule 26 (expression -> number .)
    FOR             reduce using rule 26 (expression -> number .)
    WHILE           reduce using rule 26 (expression -> number .)
    IF              reduce using rule 26 (expression -> number .)
    BREAK           reduce using rule 26 (expression -> number .)
    CONTINUE        reduce using rule 26 (expression -> number .)
    RETURN          reduce using rule 26 (expression -> number .)
    PRINT           reduce using rule 26 (expression -> number .)
    ID              reduce using rule 26 (expression -> number .)


state 34

    (27) expression -> var .

    +               reduce using rule 27 (expression -> var .)
    -               reduce using rule 27 (expression -> var .)
    *               reduce using rule 27 (expression -> var .)
    /               reduce using rule 27 (expression -> var .)
    DOTADD          reduce using rule 27 (expression -> var .)
    DOTSUB          reduce using rule 27 (expression -> var .)
    DOTMUL          reduce using rule 27 (expression -> var .)
    DOTDIV          reduce using rule 27 (expression -> var .)
    '               reduce using rule 27 (expression -> var .)
    ;               reduce using rule 27 (expression -> var .)
    ,               reduce using rule 27 (expression -> var .)
    EQ              reduce using rule 27 (expression -> var .)
    NE              reduce using rule 27 (expression -> var .)
    LE              reduce using rule 27 (expression -> var .)
    GE              reduce using rule 27 (expression -> var .)
    LT              reduce using rule 27 (expression -> var .)
    GT              reduce using rule 27 (expression -> var .)
    :               reduce using rule 27 (expression -> var .)
    )               reduce using rule 27 (expression -> var .)
    {               reduce using rule 27 (expression -> var .)
    FOR             reduce using rule 27 (expression -> var .)
    WHILE           reduce using rule 27 (expression -> var .)
    IF              reduce using rule 27 (expression -> var .)
    BREAK           reduce using rule 27 (expression -> var .)
    CONTINUE        reduce using rule 27 (expression -> var .)
    RETURN          reduce using rule 27 (expression -> var .)
    PRINT           reduce using rule 27 (expression -> var .)
    ID              reduce using rule 27 (expression -> var .)


state 35

    (28) expression -> matrix .

    +               reduce using rule 28 (expression -> matrix .)
    -               reduce using rule 28 (expression -> matrix .)
    *               reduce using rule 28 (expression -> matrix .)
    /               reduce using rule 28 (expression -> matrix .)
    DOTADD          reduce using rule 28 (expression -> matrix .)
    DOTSUB          reduce using rule 28 (expression -> matrix .)
    DOTMUL          reduce using rule 28 (expression -> matrix .)
    DOTDIV          reduce using rule 28 (expression -> matrix .)
    '               reduce using rule 28 (expression -> matrix .)
    ;               reduce using rule 28 (expression -> matrix .)
    ,               reduce using rule 28 (expression -> matrix .)
    EQ              reduce using rule 28 (expression -> matrix .)
    NE              reduce using rule 28 (expression -> matrix .)
    LE              reduce using rule 28 (expression -> matrix .)
    GE              reduce using rule 28 (expression -> matrix .)
    LT              reduce using rule 28 (expression -> matrix .)
    GT              reduce using rule 28 (expression -> matrix .)
    :               reduce using rule 28 (expression -> matrix .)
    )               reduce using rule 28 (expression -> matrix .)
    {               reduce using rule 28 (expression -> matrix .)
    FOR             reduce using rule 28 (expression -> matrix .)
    WHILE           reduce using rule 28 (expression -> matrix .)
    IF              reduce using rule 28 (expression -> matrix .)
    BREAK           reduce using rule 28 (expression -> matrix .)
    CONTINUE        reduce using rule 28 (expression -> matrix .)
    RETURN          reduce using rule 28 (expression -> matrix .)
    PRINT           reduce using rule 28 (expression -> matrix .)
    ID              reduce using rule 28 (expression -> matrix .)


state 36

    (29) expression -> matrix_function .

    +               reduce using rule 29 (expression -> matrix_function .)
    -               reduce using rule 29 (expression -> matrix_function .)
    *               reduce using rule 29 (expression -> matrix_function .)
    /               reduce using rule 29 (expression -> matrix_function .)
    DOTADD          reduce using rule 29 (expression -> matrix_function .)
    DOTSUB          reduce using rule 29 (expression -> matrix_function .)
    DOTMUL          reduce using rule 29 (expression -> matrix_function .)
    DOTDIV          reduce using rule 29 (expression -> matrix_function .)
    '               reduce using rule 29 (expression -> matrix_function .)
    ;               reduce using rule 29 (expression -> matrix_function .)
    ,               reduce using rule 29 (expression -> matrix_function .)
    EQ              reduce using rule 29 (expression -> matrix_function .)
    NE              reduce using rule 29 (expression -> matrix_function .)
    LE              reduce using rule 29 (expression -> matrix_function .)
    GE              reduce using rule 29 (expression -> matrix_function .)
    LT              reduce using rule 29 (expression -> matrix_function .)
    GT              reduce using rule 29 (expression -> matrix_function .)
    :               reduce using rule 29 (expression -> matrix_function .)
    )               reduce using rule 29 (expression -> matrix_function .)
    {               reduce using rule 29 (expression -> matrix_function .)
    FOR             reduce using rule 29 (expression -> matrix_function .)
    WHILE           reduce using rule 29 (expression -> matrix_function .)
    IF              reduce using rule 29 (expression -> matrix_function .)
    BREAK           reduce using rule 29 (expression -> matrix_function .)
    CONTINUE        reduce using rule 29 (expression -> matrix_function .)
    RETURN          reduce using rule 29 (expression -> matrix_function .)
    PRINT           reduce using rule 29 (expression -> matrix_function .)
    ID              reduce using rule 29 (expression -> matrix_function .)


state 37

    (30) expression -> uminus .

    +               reduce using rule 30 (expression -> uminus .)
    -               reduce using rule 30 (expression -> uminus .)
    *               reduce using rule 30 (expression -> uminus .)
    /               reduce using rule 30 (expression -> uminus .)
    DOTADD          reduce using rule 30 (expression -> uminus .)
    DOTSUB          reduce using rule 30 (expression -> uminus .)
    DOTMUL          reduce using rule 30 (expression -> uminus .)
    DOTDIV          reduce using rule 30 (expression -> uminus .)
    '               reduce using rule 30 (expression -> uminus .)
    ;               reduce using rule 30 (expression -> uminus .)
    ,               reduce using rule 30 (expression -> uminus .)
    EQ              reduce using rule 30 (expression -> uminus .)
    NE              reduce using rule 30 (expression -> uminus .)
    LE              reduce using rule 30 (expression -> uminus .)
    GE              reduce using rule 30 (expression -> uminus .)
    LT              reduce using rule 30 (expression -> uminus .)
    GT              reduce using rule 30 (expression -> uminus .)
    :               reduce using rule 30 (expression -> uminus .)
    )               reduce using rule 30 (expression -> uminus .)
    {               reduce using rule 30 (expression -> uminus .)
    FOR             reduce using rule 30 (expression -> uminus .)
    WHILE           reduce using rule 30 (expression -> uminus .)
    IF              reduce using rule 30 (expression -> uminus .)
    BREAK           reduce using rule 30 (expression -> uminus .)
    CONTINUE        reduce using rule 30 (expression -> uminus .)
    RETURN          reduce using rule 30 (expression -> uminus .)
    PRINT           reduce using rule 30 (expression -> uminus .)
    ID              reduce using rule 30 (expression -> uminus .)


state 38

    (31) expression -> transposition .

    +               reduce using rule 31 (expression -> transposition .)
    -               reduce using rule 31 (expression -> transposition .)
    *               reduce using rule 31 (expression -> transposition .)
    /               reduce using rule 31 (expression -> transposition .)
    DOTADD          reduce using rule 31 (expression -> transposition .)
    DOTSUB          reduce using rule 31 (expression -> transposition .)
    DOTMUL          reduce using rule 31 (expression -> transposition .)
    DOTDIV          reduce using rule 31 (expression -> transposition .)
    '               reduce using rule 31 (expression -> transposition .)
    ;               reduce using rule 31 (expression -> transposition .)
    ,               reduce using rule 31 (expression -> transposition .)
    EQ              reduce using rule 31 (expression -> transposition .)
    NE              reduce using rule 31 (expression -> transposition .)
    LE              reduce using rule 31 (expression -> transposition .)
    GE              reduce using rule 31 (expression -> transposition .)
    LT              reduce using rule 31 (expression -> transposition .)
    GT              reduce using rule 31 (expression -> transposition .)
    :               reduce using rule 31 (expression -> transposition .)
    )               reduce using rule 31 (expression -> transposition .)
    {               reduce using rule 31 (expression -> transposition .)
    FOR             reduce using rule 31 (expression -> transposition .)
    WHILE           reduce using rule 31 (expression -> transposition .)
    IF              reduce using rule 31 (expression -> transposition .)
    BREAK           reduce using rule 31 (expression -> transposition .)
    CONTINUE        reduce using rule 31 (expression -> transposition .)
    RETURN          reduce using rule 31 (expression -> transposition .)
    PRINT           reduce using rule 31 (expression -> transposition .)
    ID              reduce using rule 31 (expression -> transposition .)


state 39

    (32) expression -> matrix_element .

    +               reduce using rule 32 (expression -> matrix_element .)
    -               reduce using rule 32 (expression -> matrix_element .)
    *               reduce using rule 32 (expression -> matrix_element .)
    /               reduce using rule 32 (expression -> matrix_element .)
    DOTADD          reduce using rule 32 (expression -> matrix_element .)
    DOTSUB          reduce using rule 32 (expression -> matrix_element .)
    DOTMUL          reduce using rule 32 (expression -> matrix_element .)
    DOTDIV          reduce using rule 32 (expression -> matrix_element .)
    '               reduce using rule 32 (expression -> matrix_element .)
    ;               reduce using rule 32 (expression -> matrix_element .)
    ,               reduce using rule 32 (expression -> matrix_element .)
    EQ              reduce using rule 32 (expression -> matrix_element .)
    NE              reduce using rule 32 (expression -> matrix_element .)
    LE              reduce using rule 32 (expression -> matrix_element .)
    GE              reduce using rule 32 (expression -> matrix_element .)
    LT              reduce using rule 32 (expression -> matrix_element .)
    GT              reduce using rule 32 (expression -> matrix_element .)
    :               reduce using rule 32 (expression -> matrix_element .)
    )               reduce using rule 32 (expression -> matrix_element .)
    {               reduce using rule 32 (expression -> matrix_element .)
    FOR             reduce using rule 32 (expression -> matrix_element .)
    WHILE           reduce using rule 32 (expression -> matrix_element .)
    IF              reduce using rule 32 (expression -> matrix_element .)
    BREAK           reduce using rule 32 (expression -> matrix_element .)
    CONTINUE        reduce using rule 32 (expression -> matrix_element .)
    RETURN          reduce using rule 32 (expression -> matrix_element .)
    PRINT           reduce using rule 32 (expression -> matrix_element .)
    ID              reduce using rule 32 (expression -> matrix_element .)


state 40

    (33) expression -> vector_element .

    +               reduce using rule 33 (expression -> vector_element .)
    -               reduce using rule 33 (expression -> vector_element .)
    *               reduce using rule 33 (expression -> vector_element .)
    /               reduce using rule 33 (expression -> vector_element .)
    DOTADD          reduce using rule 33 (expression -> vector_element .)
    DOTSUB          reduce using rule 33 (expression -> vector_element .)
    DOTMUL          reduce using rule 33 (expression -> vector_element .)
    DOTDIV          reduce using rule 33 (expression -> vector_element .)
    '               reduce using rule 33 (expression -> vector_element .)
    ;               reduce using rule 33 (expression -> vector_element .)
    ,               reduce using rule 33 (expression -> vector_element .)
    EQ              reduce using rule 33 (expression -> vector_element .)
    NE              reduce using rule 33 (expression -> vector_element .)
    LE              reduce using rule 33 (expression -> vector_element .)
    GE              reduce using rule 33 (expression -> vector_element .)
    LT              reduce using rule 33 (expression -> vector_element .)
    GT              reduce using rule 33 (expression -> vector_element .)
    :               reduce using rule 33 (expression -> vector_element .)
    )               reduce using rule 33 (expression -> vector_element .)
    {               reduce using rule 33 (expression -> vector_element .)
    FOR             reduce using rule 33 (expression -> vector_element .)
    WHILE           reduce using rule 33 (expression -> vector_element .)
    IF              reduce using rule 33 (expression -> vector_element .)
    BREAK           reduce using rule 33 (expression -> vector_element .)
    CONTINUE        reduce using rule 33 (expression -> vector_element .)
    RETURN          reduce using rule 33 (expression -> vector_element .)
    PRINT           reduce using rule 33 (expression -> vector_element .)
    ID              reduce using rule 33 (expression -> vector_element .)


state 41

    (70) uminus -> - . expression
    (26) expression -> . number
    (27) expression -> . var
    (28) expression -> . matrix
    (29) expression -> . matrix_function
    (30) expression -> . uminus
    (31) expression -> . transposition
    (32) expression -> . matrix_element
    (33) expression -> . vector_element
    (62) expression -> . expression + expression
    (63) expression -> . expression - expression
    (64) expression -> . expression * expression
    (65) expression -> . expression / expression
    (66) expression -> . expression DOTADD expression
    (67) expression -> . expression DOTSUB expression
    (68) expression -> . expression DOTMUL expression
    (69) expression -> . expression DOTDIV expression
    (59) number -> . INTNUM
    (60) number -> . FLOATNUM
    (58) var -> . ID
    (45) matrix -> . [ vectors ]
    (42) matrix_function -> . EYE ( INTNUM )
    (43) matrix_function -> . ONES ( INTNUM )
    (44) matrix_function -> . ZEROS ( INTNUM )
    (70) uminus -> . - expression
    (71) transposition -> . expression '
    (57) matrix_element -> . ID [ INTNUM , INTNUM ]
    (56) vector_element -> . ID [ INTNUM ]

    INTNUM          shift and go to state 42
    FLOATNUM        shift and go to state 43
    ID              shift and go to state 17
    [               shift and go to state 44
    EYE             shift and go to state 45
    ONES            shift and go to state 46
    ZEROS           shift and go to state 47
    -               shift and go to state 41

    expression                     shift and go to state 70
    number                         shift and go to state 33
    var                            shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    uminus                         shift and go to state 37
    transposition                  shift and go to state 38
    matrix_element                 shift and go to state 39
    vector_element                 shift and go to state 40

state 42

    (59) number -> INTNUM .

    +               reduce using rule 59 (number -> INTNUM .)
    -               reduce using rule 59 (number -> INTNUM .)
    *               reduce using rule 59 (number -> INTNUM .)
    /               reduce using rule 59 (number -> INTNUM .)
    DOTADD          reduce using rule 59 (number -> INTNUM .)
    DOTSUB          reduce using rule 59 (number -> INTNUM .)
    DOTMUL          reduce using rule 59 (number -> INTNUM .)
    DOTDIV          reduce using rule 59 (number -> INTNUM .)
    '               reduce using rule 59 (number -> INTNUM .)
    ;               reduce using rule 59 (number -> INTNUM .)
    ,               reduce using rule 59 (number -> INTNUM .)
    EQ              reduce using rule 59 (number -> INTNUM .)
    NE              reduce using rule 59 (number -> INTNUM .)
    LE              reduce using rule 59 (number -> INTNUM .)
    GE              reduce using rule 59 (number -> INTNUM .)
    LT              reduce using rule 59 (number -> INTNUM .)
    GT              reduce using rule 59 (number -> INTNUM .)
    :               reduce using rule 59 (number -> INTNUM .)
    )               reduce using rule 59 (number -> INTNUM .)
    {               reduce using rule 59 (number -> INTNUM .)
    FOR             reduce using rule 59 (number -> INTNUM .)
    WHILE           reduce using rule 59 (number -> INTNUM .)
    IF              reduce using rule 59 (number -> INTNUM .)
    BREAK           reduce using rule 59 (number -> INTNUM .)
    CONTINUE        reduce using rule 59 (number -> INTNUM .)
    RETURN          reduce using rule 59 (number -> INTNUM .)
    PRINT           reduce using rule 59 (number -> INTNUM .)
    ID              reduce using rule 59 (number -> INTNUM .)
    ]               reduce using rule 59 (number -> INTNUM .)


state 43

    (60) number -> FLOATNUM .

    +               reduce using rule 60 (number -> FLOATNUM .)
    -               reduce using rule 60 (number -> FLOATNUM .)
    *               reduce using rule 60 (number -> FLOATNUM .)
    /               reduce using rule 60 (number -> FLOATNUM .)
    DOTADD          reduce using rule 60 (number -> FLOATNUM .)
    DOTSUB          reduce using rule 60 (number -> FLOATNUM .)
    DOTMUL          reduce using rule 60 (number -> FLOATNUM .)
    DOTDIV          reduce using rule 60 (number -> FLOATNUM .)
    '               reduce using rule 60 (number -> FLOATNUM .)
    ;               reduce using rule 60 (number -> FLOATNUM .)
    ,               reduce using rule 60 (number -> FLOATNUM .)
    EQ              reduce using rule 60 (number -> FLOATNUM .)
    NE              reduce using rule 60 (number -> FLOATNUM .)
    LE              reduce using rule 60 (number -> FLOATNUM .)
    GE              reduce using rule 60 (number -> FLOATNUM .)
    LT              reduce using rule 60 (number -> FLOATNUM .)
    GT              reduce using rule 60 (number -> FLOATNUM .)
    :               reduce using rule 60 (number -> FLOATNUM .)
    )               reduce using rule 60 (number -> FLOATNUM .)
    {               reduce using rule 60 (number -> FLOATNUM .)
    FOR             reduce using rule 60 (number -> FLOATNUM .)
    WHILE           reduce using rule 60 (number -> FLOATNUM .)
    IF              reduce using rule 60 (number -> FLOATNUM .)
    BREAK           reduce using rule 60 (number -> FLOATNUM .)
    CONTINUE        reduce using rule 60 (number -> FLOATNUM .)
    RETURN          reduce using rule 60 (number -> FLOATNUM .)
    PRINT           reduce using rule 60 (number -> FLOATNUM .)
    ID              reduce using rule 60 (number -> FLOATNUM .)
    ]               reduce using rule 60 (number -> FLOATNUM .)


state 44

    (45) matrix -> [ . vectors ]
    (46) vectors -> . vectors , vector
    (47) vectors -> . vector
    (48) vector -> . [ variables ]

    [               shift and go to state 71

    vectors                        shift and go to state 72
    vector                         shift and go to state 73

state 45

    (42) matrix_function -> EYE . ( INTNUM )

    (               shift and go to state 74


state 46

    (43) matrix_function -> ONES . ( INTNUM )

    (               shift and go to state 75


state 47

    (44) matrix_function -> ZEROS . ( INTNUM )

    (               shift and go to state 76


state 48

    (21) sys_instruction -> PRINT print_values .
    (22) print_values -> print_values . , string
    (23) print_values -> print_values . , expression

    ;               reduce using rule 21 (sys_instruction -> PRINT print_values .)
    ,               shift and go to state 77


state 49

    (24) print_values -> string .

    ,               reduce using rule 24 (print_values -> string .)
    ;               reduce using rule 24 (print_values -> string .)


state 50

    (25) print_values -> expression .
    (62) expression -> expression . + expression
    (63) expression -> expression . - expression
    (64) expression -> expression . * expression
    (65) expression -> expression . / expression
    (66) expression -> expression . DOTADD expression
    (67) expression -> expression . DOTSUB expression
    (68) expression -> expression . DOTMUL expression
    (69) expression -> expression . DOTDIV expression
    (71) transposition -> expression . '

    ,               reduce using rule 25 (print_values -> expression .)
    ;               reduce using rule 25 (print_values -> expression .)
    +               shift and go to state 61
    -               shift and go to state 62
    *               shift and go to state 63
    /               shift and go to state 64
    DOTADD          shift and go to state 65
    DOTSUB          shift and go to state 66
    DOTMUL          shift and go to state 67
    DOTDIV          shift and go to state 68
    '               shift and go to state 69


state 51

    (61) string -> STRING .

    ,               reduce using rule 61 (string -> STRING .)
    ;               reduce using rule 61 (string -> STRING .)


state 52

    (35) assignment -> matrix_element assignment_operator . expression
    (26) expression -> . number
    (27) expression -> . var
    (28) expression -> . matrix
    (29) expression -> . matrix_function
    (30) expression -> . uminus
    (31) expression -> . transposition
    (32) expression -> . matrix_element
    (33) expression -> . vector_element
    (62) expression -> . expression + expression
    (63) expression -> . expression - expression
    (64) expression -> . expression * expression
    (65) expression -> . expression / expression
    (66) expression -> . expression DOTADD expression
    (67) expression -> . expression DOTSUB expression
    (68) expression -> . expression DOTMUL expression
    (69) expression -> . expression DOTDIV expression
    (59) number -> . INTNUM
    (60) number -> . FLOATNUM
    (58) var -> . ID
    (45) matrix -> . [ vectors ]
    (42) matrix_function -> . EYE ( INTNUM )
    (43) matrix_function -> . ONES ( INTNUM )
    (44) matrix_function -> . ZEROS ( INTNUM )
    (70) uminus -> . - expression
    (71) transposition -> . expression '
    (57) matrix_element -> . ID [ INTNUM , INTNUM ]
    (56) vector_element -> . ID [ INTNUM ]

    INTNUM          shift and go to state 42
    FLOATNUM        shift and go to state 43
    ID              shift and go to state 17
    [               shift and go to state 44
    EYE             shift and go to state 45
    ONES            shift and go to state 46
    ZEROS           shift and go to state 47
    -               shift and go to state 41

    matrix_element                 shift and go to state 39
    expression                     shift and go to state 78
    number                         shift and go to state 33
    var                            shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    uminus                         shift and go to state 37
    transposition                  shift and go to state 38
    vector_element                 shift and go to state 40

state 53

    (36) assignment -> vector_element assignment_operator . expression
    (26) expression -> . number
    (27) expression -> . var
    (28) expression -> . matrix
    (29) expression -> . matrix_function
    (30) expression -> . uminus
    (31) expression -> . transposition
    (32) expression -> . matrix_element
    (33) expression -> . vector_element
    (62) expression -> . expression + expression
    (63) expression -> . expression - expression
    (64) expression -> . expression * expression
    (65) expression -> . expression / expression
    (66) expression -> . expression DOTADD expression
    (67) expression -> . expression DOTSUB expression
    (68) expression -> . expression DOTMUL expression
    (69) expression -> . expression DOTDIV expression
    (59) number -> . INTNUM
    (60) number -> . FLOATNUM
    (58) var -> . ID
    (45) matrix -> . [ vectors ]
    (42) matrix_function -> . EYE ( INTNUM )
    (43) matrix_function -> . ONES ( INTNUM )
    (44) matrix_function -> . ZEROS ( INTNUM )
    (70) uminus -> . - expression
    (71) transposition -> . expression '
    (57) matrix_element -> . ID [ INTNUM , INTNUM ]
    (56) vector_element -> . ID [ INTNUM ]

    INTNUM          shift and go to state 42
    FLOATNUM        shift and go to state 43
    ID              shift and go to state 17
    [               shift and go to state 44
    EYE             shift and go to state 45
    ONES            shift and go to state 46
    ZEROS           shift and go to state 47
    -               shift and go to state 41

    vector_element                 shift and go to state 40
    expression                     shift and go to state 79
    number                         shift and go to state 33
    var                            shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    uminus                         shift and go to state 37
    transposition                  shift and go to state 38
    matrix_element                 shift and go to state 39

state 54

    (57) matrix_element -> ID [ . INTNUM , INTNUM ]
    (56) vector_element -> ID [ . INTNUM ]

    INTNUM          shift and go to state 80


state 55

    (7) instruction -> { instructions } .

    {               reduce using rule 7 (instruction -> { instructions } .)
    FOR             reduce using rule 7 (instruction -> { instructions } .)
    WHILE           reduce using rule 7 (instruction -> { instructions } .)
    IF              reduce using rule 7 (instruction -> { instructions } .)
    BREAK           reduce using rule 7 (instruction -> { instructions } .)
    CONTINUE        reduce using rule 7 (instruction -> { instructions } .)
    RETURN          reduce using rule 7 (instruction -> { instructions } .)
    PRINT           reduce using rule 7 (instruction -> { instructions } .)
    ID              reduce using rule 7 (instruction -> { instructions } .)
    $end            reduce using rule 7 (instruction -> { instructions } .)
    }               reduce using rule 7 (instruction -> { instructions } .)
    ELSE            reduce using rule 7 (instruction -> { instructions } .)


state 56

    (8) instruction -> FOR var = . expression : expression instruction
    (26) expression -> . number
    (27) expression -> . var
    (28) expression -> . matrix
    (29) expression -> . matrix_function
    (30) expression -> . uminus
    (31) expression -> . transposition
    (32) expression -> . matrix_element
    (33) expression -> . vector_element
    (62) expression -> . expression + expression
    (63) expression -> . expression - expression
    (64) expression -> . expression * expression
    (65) expression -> . expression / expression
    (66) expression -> . expression DOTADD expression
    (67) expression -> . expression DOTSUB expression
    (68) expression -> . expression DOTMUL expression
    (69) expression -> . expression DOTDIV expression
    (59) number -> . INTNUM
    (60) number -> . FLOATNUM
    (58) var -> . ID
    (45) matrix -> . [ vectors ]
    (42) matrix_function -> . EYE ( INTNUM )
    (43) matrix_function -> . ONES ( INTNUM )
    (44) matrix_function -> . ZEROS ( INTNUM )
    (70) uminus -> . - expression
    (71) transposition -> . expression '
    (57) matrix_element -> . ID [ INTNUM , INTNUM ]
    (56) vector_element -> . ID [ INTNUM ]

    INTNUM          shift and go to state 42
    FLOATNUM        shift and go to state 43
    ID              shift and go to state 17
    [               shift and go to state 44
    EYE             shift and go to state 45
    ONES            shift and go to state 46
    ZEROS           shift and go to state 47
    -               shift and go to state 41

    var                            shift and go to state 34
    expression                     shift and go to state 81
    number                         shift and go to state 33
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    uminus                         shift and go to state 37
    transposition                  shift and go to state 38
    matrix_element                 shift and go to state 39
    vector_element                 shift and go to state 40

state 57

    (34) assignment -> var assignment_operator expression .
    (62) expression -> expression . + expression
    (63) expression -> expression . - expression
    (64) expression -> expression . * expression
    (65) expression -> expression . / expression
    (66) expression -> expression . DOTADD expression
    (67) expression -> expression . DOTSUB expression
    (68) expression -> expression . DOTMUL expression
    (69) expression -> expression . DOTDIV expression
    (71) transposition -> expression . '

    ;               reduce using rule 34 (assignment -> var assignment_operator expression .)
    +               shift and go to state 61
    -               shift and go to state 62
    *               shift and go to state 63
    /               shift and go to state 64
    DOTADD          shift and go to state 65
    DOTSUB          shift and go to state 66
    DOTMUL          shift and go to state 67
    DOTDIV          shift and go to state 68
    '               shift and go to state 69


state 58

    (9) instruction -> WHILE ( condition . ) instruction

    )               shift and go to state 82


state 59

    (12) condition -> expression . EQ expression
    (13) condition -> expression . NE expression
    (14) condition -> expression . LE expression
    (15) condition -> expression . GE expression
    (16) condition -> expression . LT expression
    (17) condition -> expression . GT expression
    (62) expression -> expression . + expression
    (63) expression -> expression . - expression
    (64) expression -> expression . * expression
    (65) expression -> expression . / expression
    (66) expression -> expression . DOTADD expression
    (67) expression -> expression . DOTSUB expression
    (68) expression -> expression . DOTMUL expression
    (69) expression -> expression . DOTDIV expression
    (71) transposition -> expression . '

    EQ              shift and go to state 83
    NE              shift and go to state 84
    LE              shift and go to state 85
    GE              shift and go to state 86
    LT              shift and go to state 87
    GT              shift and go to state 88
    +               shift and go to state 61
    -               shift and go to state 62
    *               shift and go to state 63
    /               shift and go to state 64
    DOTADD          shift and go to state 65
    DOTSUB          shift and go to state 66
    DOTMUL          shift and go to state 67
    DOTDIV          shift and go to state 68
    '               shift and go to state 69


state 60

    (10) instruction -> IF ( condition . ) instruction
    (11) instruction -> IF ( condition . ) instruction ELSE instruction

    )               shift and go to state 89


state 61

    (62) expression -> expression + . expression
    (26) expression -> . number
    (27) expression -> . var
    (28) expression -> . matrix
    (29) expression -> . matrix_function
    (30) expression -> . uminus
    (31) expression -> . transposition
    (32) expression -> . matrix_element
    (33) expression -> . vector_element
    (62) expression -> . expression + expression
    (63) expression -> . expression - expression
    (64) expression -> . expression * expression
    (65) expression -> . expression / expression
    (66) expression -> . expression DOTADD expression
    (67) expression -> . expression DOTSUB expression
    (68) expression -> . expression DOTMUL expression
    (69) expression -> . expression DOTDIV expression
    (59) number -> . INTNUM
    (60) number -> . FLOATNUM
    (58) var -> . ID
    (45) matrix -> . [ vectors ]
    (42) matrix_function -> . EYE ( INTNUM )
    (43) matrix_function -> . ONES ( INTNUM )
    (44) matrix_function -> . ZEROS ( INTNUM )
    (70) uminus -> . - expression
    (71) transposition -> . expression '
    (57) matrix_element -> . ID [ INTNUM , INTNUM ]
    (56) vector_element -> . ID [ INTNUM ]

    INTNUM          shift and go to state 42
    FLOATNUM        shift and go to state 43
    ID              shift and go to state 17
    [               shift and go to state 44
    EYE             shift and go to state 45
    ONES            shift and go to state 46
    ZEROS           shift and go to state 47
    -               shift and go to state 41

    expression                     shift and go to state 90
    number                         shift and go to state 33
    var                            shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    uminus                         shift and go to state 37
    transposition                  shift and go to state 38
    matrix_element                 shift and go to state 39
    vector_element                 shift and go to state 40

state 62

    (63) expression -> expression - . expression
    (26) expression -> . number
    (27) expression -> . var
    (28) expression -> . matrix
    (29) expression -> . matrix_function
    (30) expression -> . uminus
    (31) expression -> . transposition
    (32) expression -> . matrix_element
    (33) expression -> . vector_element
    (62) expression -> . expression + expression
    (63) expression -> . expression - expression
    (64) expression -> . expression * expression
    (65) expression -> . expression / expression
    (66) expression -> . expression DOTADD expression
    (67) expression -> . expression DOTSUB expression
    (68) expression -> . expression DOTMUL expression
    (69) expression -> . expression DOTDIV expression
    (59) number -> . INTNUM
    (60) number -> . FLOATNUM
    (58) var -> . ID
    (45) matrix -> . [ vectors ]
    (42) matrix_function -> . EYE ( INTNUM )
    (43) matrix_function -> . ONES ( INTNUM )
    (44) matrix_function -> . ZEROS ( INTNUM )
    (70) uminus -> . - expression
    (71) transposition -> . expression '
    (57) matrix_element -> . ID [ INTNUM , INTNUM ]
    (56) vector_element -> . ID [ INTNUM ]

    INTNUM          shift and go to state 42
    FLOATNUM        shift and go to state 43
    ID              shift and go to state 17
    [               shift and go to state 44
    EYE             shift and go to state 45
    ONES            shift and go to state 46
    ZEROS           shift and go to state 47
    -               shift and go to state 41

    expression                     shift and go to state 91
    number                         shift and go to state 33
    var                            shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    uminus                         shift and go to state 37
    transposition                  shift and go to state 38
    matrix_element                 shift and go to state 39
    vector_element                 shift and go to state 40

state 63

    (64) expression -> expression * . expression
    (26) expression -> . number
    (27) expression -> . var
    (28) expression -> . matrix
    (29) expression -> . matrix_function
    (30) expression -> . uminus
    (31) expression -> . transposition
    (32) expression -> . matrix_element
    (33) expression -> . vector_element
    (62) expression -> . expression + expression
    (63) expression -> . expression - expression
    (64) expression -> . expression * expression
    (65) expression -> . expression / expression
    (66) expression -> . expression DOTADD expression
    (67) expression -> . expression DOTSUB expression
    (68) expression -> . expression DOTMUL expression
    (69) expression -> . expression DOTDIV expression
    (59) number -> . INTNUM
    (60) number -> . FLOATNUM
    (58) var -> . ID
    (45) matrix -> . [ vectors ]
    (42) matrix_function -> . EYE ( INTNUM )
    (43) matrix_function -> . ONES ( INTNUM )
    (44) matrix_function -> . ZEROS ( INTNUM )
    (70) uminus -> . - expression
    (71) transposition -> . expression '
    (57) matrix_element -> . ID [ INTNUM , INTNUM ]
    (56) vector_element -> . ID [ INTNUM ]

    INTNUM          shift and go to state 42
    FLOATNUM        shift and go to state 43
    ID              shift and go to state 17
    [               shift and go to state 44
    EYE             shift and go to state 45
    ONES            shift and go to state 46
    ZEROS           shift and go to state 47
    -               shift and go to state 41

    expression                     shift and go to state 92
    number                         shift and go to state 33
    var                            shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    uminus                         shift and go to state 37
    transposition                  shift and go to state 38
    matrix_element                 shift and go to state 39
    vector_element                 shift and go to state 40

state 64

    (65) expression -> expression / . expression
    (26) expression -> . number
    (27) expression -> . var
    (28) expression -> . matrix
    (29) expression -> . matrix_function
    (30) expression -> . uminus
    (31) expression -> . transposition
    (32) expression -> . matrix_element
    (33) expression -> . vector_element
    (62) expression -> . expression + expression
    (63) expression -> . expression - expression
    (64) expression -> . expression * expression
    (65) expression -> . expression / expression
    (66) expression -> . expression DOTADD expression
    (67) expression -> . expression DOTSUB expression
    (68) expression -> . expression DOTMUL expression
    (69) expression -> . expression DOTDIV expression
    (59) number -> . INTNUM
    (60) number -> . FLOATNUM
    (58) var -> . ID
    (45) matrix -> . [ vectors ]
    (42) matrix_function -> . EYE ( INTNUM )
    (43) matrix_function -> . ONES ( INTNUM )
    (44) matrix_function -> . ZEROS ( INTNUM )
    (70) uminus -> . - expression
    (71) transposition -> . expression '
    (57) matrix_element -> . ID [ INTNUM , INTNUM ]
    (56) vector_element -> . ID [ INTNUM ]

    INTNUM          shift and go to state 42
    FLOATNUM        shift and go to state 43
    ID              shift and go to state 17
    [               shift and go to state 44
    EYE             shift and go to state 45
    ONES            shift and go to state 46
    ZEROS           shift and go to state 47
    -               shift and go to state 41

    expression                     shift and go to state 93
    number                         shift and go to state 33
    var                            shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    uminus                         shift and go to state 37
    transposition                  shift and go to state 38
    matrix_element                 shift and go to state 39
    vector_element                 shift and go to state 40

state 65

    (66) expression -> expression DOTADD . expression
    (26) expression -> . number
    (27) expression -> . var
    (28) expression -> . matrix
    (29) expression -> . matrix_function
    (30) expression -> . uminus
    (31) expression -> . transposition
    (32) expression -> . matrix_element
    (33) expression -> . vector_element
    (62) expression -> . expression + expression
    (63) expression -> . expression - expression
    (64) expression -> . expression * expression
    (65) expression -> . expression / expression
    (66) expression -> . expression DOTADD expression
    (67) expression -> . expression DOTSUB expression
    (68) expression -> . expression DOTMUL expression
    (69) expression -> . expression DOTDIV expression
    (59) number -> . INTNUM
    (60) number -> . FLOATNUM
    (58) var -> . ID
    (45) matrix -> . [ vectors ]
    (42) matrix_function -> . EYE ( INTNUM )
    (43) matrix_function -> . ONES ( INTNUM )
    (44) matrix_function -> . ZEROS ( INTNUM )
    (70) uminus -> . - expression
    (71) transposition -> . expression '
    (57) matrix_element -> . ID [ INTNUM , INTNUM ]
    (56) vector_element -> . ID [ INTNUM ]

    INTNUM          shift and go to state 42
    FLOATNUM        shift and go to state 43
    ID              shift and go to state 17
    [               shift and go to state 44
    EYE             shift and go to state 45
    ONES            shift and go to state 46
    ZEROS           shift and go to state 47
    -               shift and go to state 41

    expression                     shift and go to state 94
    number                         shift and go to state 33
    var                            shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    uminus                         shift and go to state 37
    transposition                  shift and go to state 38
    matrix_element                 shift and go to state 39
    vector_element                 shift and go to state 40

state 66

    (67) expression -> expression DOTSUB . expression
    (26) expression -> . number
    (27) expression -> . var
    (28) expression -> . matrix
    (29) expression -> . matrix_function
    (30) expression -> . uminus
    (31) expression -> . transposition
    (32) expression -> . matrix_element
    (33) expression -> . vector_element
    (62) expression -> . expression + expression
    (63) expression -> . expression - expression
    (64) expression -> . expression * expression
    (65) expression -> . expression / expression
    (66) expression -> . expression DOTADD expression
    (67) expression -> . expression DOTSUB expression
    (68) expression -> . expression DOTMUL expression
    (69) expression -> . expression DOTDIV expression
    (59) number -> . INTNUM
    (60) number -> . FLOATNUM
    (58) var -> . ID
    (45) matrix -> . [ vectors ]
    (42) matrix_function -> . EYE ( INTNUM )
    (43) matrix_function -> . ONES ( INTNUM )
    (44) matrix_function -> . ZEROS ( INTNUM )
    (70) uminus -> . - expression
    (71) transposition -> . expression '
    (57) matrix_element -> . ID [ INTNUM , INTNUM ]
    (56) vector_element -> . ID [ INTNUM ]

    INTNUM          shift and go to state 42
    FLOATNUM        shift and go to state 43
    ID              shift and go to state 17
    [               shift and go to state 44
    EYE             shift and go to state 45
    ONES            shift and go to state 46
    ZEROS           shift and go to state 47
    -               shift and go to state 41

    expression                     shift and go to state 95
    number                         shift and go to state 33
    var                            shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    uminus                         shift and go to state 37
    transposition                  shift and go to state 38
    matrix_element                 shift and go to state 39
    vector_element                 shift and go to state 40

state 67

    (68) expression -> expression DOTMUL . expression
    (26) expression -> . number
    (27) expression -> . var
    (28) expression -> . matrix
    (29) expression -> . matrix_function
    (30) expression -> . uminus
    (31) expression -> . transposition
    (32) expression -> . matrix_element
    (33) expression -> . vector_element
    (62) expression -> . expression + expression
    (63) expression -> . expression - expression
    (64) expression -> . expression * expression
    (65) expression -> . expression / expression
    (66) expression -> . expression DOTADD expression
    (67) expression -> . expression DOTSUB expression
    (68) expression -> . expression DOTMUL expression
    (69) expression -> . expression DOTDIV expression
    (59) number -> . INTNUM
    (60) number -> . FLOATNUM
    (58) var -> . ID
    (45) matrix -> . [ vectors ]
    (42) matrix_function -> . EYE ( INTNUM )
    (43) matrix_function -> . ONES ( INTNUM )
    (44) matrix_function -> . ZEROS ( INTNUM )
    (70) uminus -> . - expression
    (71) transposition -> . expression '
    (57) matrix_element -> . ID [ INTNUM , INTNUM ]
    (56) vector_element -> . ID [ INTNUM ]

    INTNUM          shift and go to state 42
    FLOATNUM        shift and go to state 43
    ID              shift and go to state 17
    [               shift and go to state 44
    EYE             shift and go to state 45
    ONES            shift and go to state 46
    ZEROS           shift and go to state 47
    -               shift and go to state 41

    expression                     shift and go to state 96
    number                         shift and go to state 33
    var                            shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    uminus                         shift and go to state 37
    transposition                  shift and go to state 38
    matrix_element                 shift and go to state 39
    vector_element                 shift and go to state 40

state 68

    (69) expression -> expression DOTDIV . expression
    (26) expression -> . number
    (27) expression -> . var
    (28) expression -> . matrix
    (29) expression -> . matrix_function
    (30) expression -> . uminus
    (31) expression -> . transposition
    (32) expression -> . matrix_element
    (33) expression -> . vector_element
    (62) expression -> . expression + expression
    (63) expression -> . expression - expression
    (64) expression -> . expression * expression
    (65) expression -> . expression / expression
    (66) expression -> . expression DOTADD expression
    (67) expression -> . expression DOTSUB expression
    (68) expression -> . expression DOTMUL expression
    (69) expression -> . expression DOTDIV expression
    (59) number -> . INTNUM
    (60) number -> . FLOATNUM
    (58) var -> . ID
    (45) matrix -> . [ vectors ]
    (42) matrix_function -> . EYE ( INTNUM )
    (43) matrix_function -> . ONES ( INTNUM )
    (44) matrix_function -> . ZEROS ( INTNUM )
    (70) uminus -> . - expression
    (71) transposition -> . expression '
    (57) matrix_element -> . ID [ INTNUM , INTNUM ]
    (56) vector_element -> . ID [ INTNUM ]

    INTNUM          shift and go to state 42
    FLOATNUM        shift and go to state 43
    ID              shift and go to state 17
    [               shift and go to state 44
    EYE             shift and go to state 45
    ONES            shift and go to state 46
    ZEROS           shift and go to state 47
    -               shift and go to state 41

    expression                     shift and go to state 97
    number                         shift and go to state 33
    var                            shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    uminus                         shift and go to state 37
    transposition                  shift and go to state 38
    matrix_element                 shift and go to state 39
    vector_element                 shift and go to state 40

state 69

    (71) transposition -> expression ' .

    +               reduce using rule 71 (transposition -> expression ' .)
    -               reduce using rule 71 (transposition -> expression ' .)
    *               reduce using rule 71 (transposition -> expression ' .)
    /               reduce using rule 71 (transposition -> expression ' .)
    DOTADD          reduce using rule 71 (transposition -> expression ' .)
    DOTSUB          reduce using rule 71 (transposition -> expression ' .)
    DOTMUL          reduce using rule 71 (transposition -> expression ' .)
    DOTDIV          reduce using rule 71 (transposition -> expression ' .)
    '               reduce using rule 71 (transposition -> expression ' .)
    ;               reduce using rule 71 (transposition -> expression ' .)
    ,               reduce using rule 71 (transposition -> expression ' .)
    EQ              reduce using rule 71 (transposition -> expression ' .)
    NE              reduce using rule 71 (transposition -> expression ' .)
    LE              reduce using rule 71 (transposition -> expression ' .)
    GE              reduce using rule 71 (transposition -> expression ' .)
    LT              reduce using rule 71 (transposition -> expression ' .)
    GT              reduce using rule 71 (transposition -> expression ' .)
    :               reduce using rule 71 (transposition -> expression ' .)
    )               reduce using rule 71 (transposition -> expression ' .)
    {               reduce using rule 71 (transposition -> expression ' .)
    FOR             reduce using rule 71 (transposition -> expression ' .)
    WHILE           reduce using rule 71 (transposition -> expression ' .)
    IF              reduce using rule 71 (transposition -> expression ' .)
    BREAK           reduce using rule 71 (transposition -> expression ' .)
    CONTINUE        reduce using rule 71 (transposition -> expression ' .)
    RETURN          reduce using rule 71 (transposition -> expression ' .)
    PRINT           reduce using rule 71 (transposition -> expression ' .)
    ID              reduce using rule 71 (transposition -> expression ' .)


state 70

    (70) uminus -> - expression .
    (62) expression -> expression . + expression
    (63) expression -> expression . - expression
    (64) expression -> expression . * expression
    (65) expression -> expression . / expression
    (66) expression -> expression . DOTADD expression
    (67) expression -> expression . DOTSUB expression
    (68) expression -> expression . DOTMUL expression
    (69) expression -> expression . DOTDIV expression
    (71) transposition -> expression . '

    +               reduce using rule 70 (uminus -> - expression .)
    -               reduce using rule 70 (uminus -> - expression .)
    *               reduce using rule 70 (uminus -> - expression .)
    /               reduce using rule 70 (uminus -> - expression .)
    DOTADD          reduce using rule 70 (uminus -> - expression .)
    DOTSUB          reduce using rule 70 (uminus -> - expression .)
    DOTMUL          reduce using rule 70 (uminus -> - expression .)
    DOTDIV          reduce using rule 70 (uminus -> - expression .)
    ;               reduce using rule 70 (uminus -> - expression .)
    ,               reduce using rule 70 (uminus -> - expression .)
    EQ              reduce using rule 70 (uminus -> - expression .)
    NE              reduce using rule 70 (uminus -> - expression .)
    LE              reduce using rule 70 (uminus -> - expression .)
    GE              reduce using rule 70 (uminus -> - expression .)
    LT              reduce using rule 70 (uminus -> - expression .)
    GT              reduce using rule 70 (uminus -> - expression .)
    :               reduce using rule 70 (uminus -> - expression .)
    )               reduce using rule 70 (uminus -> - expression .)
    {               reduce using rule 70 (uminus -> - expression .)
    FOR             reduce using rule 70 (uminus -> - expression .)
    WHILE           reduce using rule 70 (uminus -> - expression .)
    IF              reduce using rule 70 (uminus -> - expression .)
    BREAK           reduce using rule 70 (uminus -> - expression .)
    CONTINUE        reduce using rule 70 (uminus -> - expression .)
    RETURN          reduce using rule 70 (uminus -> - expression .)
    PRINT           reduce using rule 70 (uminus -> - expression .)
    ID              reduce using rule 70 (uminus -> - expression .)
    '               shift and go to state 69

  ! '               [ reduce using rule 70 (uminus -> - expression .) ]
  ! +               [ shift and go to state 61 ]
  ! -               [ shift and go to state 62 ]
  ! *               [ shift and go to state 63 ]
  ! /               [ shift and go to state 64 ]
  ! DOTADD          [ shift and go to state 65 ]
  ! DOTSUB          [ shift and go to state 66 ]
  ! DOTMUL          [ shift and go to state 67 ]
  ! DOTDIV          [ shift and go to state 68 ]


state 71

    (48) vector -> [ . variables ]
    (49) variables -> . variables , variable
    (50) variables -> . variable
    (51) variable -> . number
    (52) variable -> . var
    (53) variable -> . element
    (59) number -> . INTNUM
    (60) number -> . FLOATNUM
    (58) var -> . ID
    (54) element -> . vector_element
    (55) element -> . matrix_element
    (56) vector_element -> . ID [ INTNUM ]
    (57) matrix_element -> . ID [ INTNUM , INTNUM ]

    INTNUM          shift and go to state 42
    FLOATNUM        shift and go to state 43
    ID              shift and go to state 103

    variables                      shift and go to state 98
    variable                       shift and go to state 99
    number                         shift and go to state 100
    var                            shift and go to state 101
    element                        shift and go to state 102
    vector_element                 shift and go to state 104
    matrix_element                 shift and go to state 105

state 72

    (45) matrix -> [ vectors . ]
    (46) vectors -> vectors . , vector

    ]               shift and go to state 106
    ,               shift and go to state 107


state 73

    (47) vectors -> vector .

    ]               reduce using rule 47 (vectors -> vector .)
    ,               reduce using rule 47 (vectors -> vector .)


state 74

    (42) matrix_function -> EYE ( . INTNUM )

    INTNUM          shift and go to state 108


state 75

    (43) matrix_function -> ONES ( . INTNUM )

    INTNUM          shift and go to state 109


state 76

    (44) matrix_function -> ZEROS ( . INTNUM )

    INTNUM          shift and go to state 110


state 77

    (22) print_values -> print_values , . string
    (23) print_values -> print_values , . expression
    (61) string -> . STRING
    (26) expression -> . number
    (27) expression -> . var
    (28) expression -> . matrix
    (29) expression -> . matrix_function
    (30) expression -> . uminus
    (31) expression -> . transposition
    (32) expression -> . matrix_element
    (33) expression -> . vector_element
    (62) expression -> . expression + expression
    (63) expression -> . expression - expression
    (64) expression -> . expression * expression
    (65) expression -> . expression / expression
    (66) expression -> . expression DOTADD expression
    (67) expression -> . expression DOTSUB expression
    (68) expression -> . expression DOTMUL expression
    (69) expression -> . expression DOTDIV expression
    (59) number -> . INTNUM
    (60) number -> . FLOATNUM
    (58) var -> . ID
    (45) matrix -> . [ vectors ]
    (42) matrix_function -> . EYE ( INTNUM )
    (43) matrix_function -> . ONES ( INTNUM )
    (44) matrix_function -> . ZEROS ( INTNUM )
    (70) uminus -> . - expression
    (71) transposition -> . expression '
    (57) matrix_element -> . ID [ INTNUM , INTNUM ]
    (56) vector_element -> . ID [ INTNUM ]

    STRING          shift and go to state 51
    INTNUM          shift and go to state 42
    FLOATNUM        shift and go to state 43
    ID              shift and go to state 17
    [               shift and go to state 44
    EYE             shift and go to state 45
    ONES            shift and go to state 46
    ZEROS           shift and go to state 47
    -               shift and go to state 41

    string                         shift and go to state 111
    expression                     shift and go to state 112
    number                         shift and go to state 33
    var                            shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    uminus                         shift and go to state 37
    transposition                  shift and go to state 38
    matrix_element                 shift and go to state 39
    vector_element                 shift and go to state 40

state 78

    (35) assignment -> matrix_element assignment_operator expression .
    (62) expression -> expression . + expression
    (63) expression -> expression . - expression
    (64) expression -> expression . * expression
    (65) expression -> expression . / expression
    (66) expression -> expression . DOTADD expression
    (67) expression -> expression . DOTSUB expression
    (68) expression -> expression . DOTMUL expression
    (69) expression -> expression . DOTDIV expression
    (71) transposition -> expression . '

    ;               reduce using rule 35 (assignment -> matrix_element assignment_operator expression .)
    +               shift and go to state 61
    -               shift and go to state 62
    *               shift and go to state 63
    /               shift and go to state 64
    DOTADD          shift and go to state 65
    DOTSUB          shift and go to state 66
    DOTMUL          shift and go to state 67
    DOTDIV          shift and go to state 68
    '               shift and go to state 69


state 79

    (36) assignment -> vector_element assignment_operator expression .
    (62) expression -> expression . + expression
    (63) expression -> expression . - expression
    (64) expression -> expression . * expression
    (65) expression -> expression . / expression
    (66) expression -> expression . DOTADD expression
    (67) expression -> expression . DOTSUB expression
    (68) expression -> expression . DOTMUL expression
    (69) expression -> expression . DOTDIV expression
    (71) transposition -> expression . '

    ;               reduce using rule 36 (assignment -> vector_element assignment_operator expression .)
    +               shift and go to state 61
    -               shift and go to state 62
    *               shift and go to state 63
    /               shift and go to state 64
    DOTADD          shift and go to state 65
    DOTSUB          shift and go to state 66
    DOTMUL          shift and go to state 67
    DOTDIV          shift and go to state 68
    '               shift and go to state 69


state 80

    (57) matrix_element -> ID [ INTNUM . , INTNUM ]
    (56) vector_element -> ID [ INTNUM . ]

    ,               shift and go to state 113
    ]               shift and go to state 114


state 81

    (8) instruction -> FOR var = expression . : expression instruction
    (62) expression -> expression . + expression
    (63) expression -> expression . - expression
    (64) expression -> expression . * expression
    (65) expression -> expression . / expression
    (66) expression -> expression . DOTADD expression
    (67) expression -> expression . DOTSUB expression
    (68) expression -> expression . DOTMUL expression
    (69) expression -> expression . DOTDIV expression
    (71) transposition -> expression . '

    :               shift and go to state 115
    +               shift and go to state 61
    -               shift and go to state 62
    *               shift and go to state 63
    /               shift and go to state 64
    DOTADD          shift and go to state 65
    DOTSUB          shift and go to state 66
    DOTMUL          shift and go to state 67
    DOTDIV          shift and go to state 68
    '               shift and go to state 69


state 82

    (9) instruction -> WHILE ( condition ) . instruction
    (5) instruction -> . sys_instruction ;
    (6) instruction -> . assignment ;
    (7) instruction -> . { instructions }
    (8) instruction -> . FOR var = expression : expression instruction
    (9) instruction -> . WHILE ( condition ) instruction
    (10) instruction -> . IF ( condition ) instruction
    (11) instruction -> . IF ( condition ) instruction ELSE instruction
    (18) sys_instruction -> . BREAK
    (19) sys_instruction -> . CONTINUE
    (20) sys_instruction -> . RETURN expression
    (21) sys_instruction -> . PRINT print_values
    (34) assignment -> . var assignment_operator expression
    (35) assignment -> . matrix_element assignment_operator expression
    (36) assignment -> . vector_element assignment_operator expression
    (58) var -> . ID
    (57) matrix_element -> . ID [ INTNUM , INTNUM ]
    (56) vector_element -> . ID [ INTNUM ]

    {               shift and go to state 6
    FOR             shift and go to state 7
    WHILE           shift and go to state 9
    IF              shift and go to state 10
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    RETURN          shift and go to state 13
    PRINT           shift and go to state 14
    ID              shift and go to state 17

    instruction                    shift and go to state 116
    sys_instruction                shift and go to state 4
    assignment                     shift and go to state 5
    var                            shift and go to state 8
    matrix_element                 shift and go to state 15
    vector_element                 shift and go to state 16

state 83

    (12) condition -> expression EQ . expression
    (26) expression -> . number
    (27) expression -> . var
    (28) expression -> . matrix
    (29) expression -> . matrix_function
    (30) expression -> . uminus
    (31) expression -> . transposition
    (32) expression -> . matrix_element
    (33) expression -> . vector_element
    (62) expression -> . expression + expression
    (63) expression -> . expression - expression
    (64) expression -> . expression * expression
    (65) expression -> . expression / expression
    (66) expression -> . expression DOTADD expression
    (67) expression -> . expression DOTSUB expression
    (68) expression -> . expression DOTMUL expression
    (69) expression -> . expression DOTDIV expression
    (59) number -> . INTNUM
    (60) number -> . FLOATNUM
    (58) var -> . ID
    (45) matrix -> . [ vectors ]
    (42) matrix_function -> . EYE ( INTNUM )
    (43) matrix_function -> . ONES ( INTNUM )
    (44) matrix_function -> . ZEROS ( INTNUM )
    (70) uminus -> . - expression
    (71) transposition -> . expression '
    (57) matrix_element -> . ID [ INTNUM , INTNUM ]
    (56) vector_element -> . ID [ INTNUM ]

    INTNUM          shift and go to state 42
    FLOATNUM        shift and go to state 43
    ID              shift and go to state 17
    [               shift and go to state 44
    EYE             shift and go to state 45
    ONES            shift and go to state 46
    ZEROS           shift and go to state 47
    -               shift and go to state 41

    expression                     shift and go to state 117
    number                         shift and go to state 33
    var                            shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    uminus                         shift and go to state 37
    transposition                  shift and go to state 38
    matrix_element                 shift and go to state 39
    vector_element                 shift and go to state 40

state 84

    (13) condition -> expression NE . expression
    (26) expression -> . number
    (27) expression -> . var
    (28) expression -> . matrix
    (29) expression -> . matrix_function
    (30) expression -> . uminus
    (31) expression -> . transposition
    (32) expression -> . matrix_element
    (33) expression -> . vector_element
    (62) expression -> . expression + expression
    (63) expression -> . expression - expression
    (64) expression -> . expression * expression
    (65) expression -> . expression / expression
    (66) expression -> . expression DOTADD expression
    (67) expression -> . expression DOTSUB expression
    (68) expression -> . expression DOTMUL expression
    (69) expression -> . expression DOTDIV expression
    (59) number -> . INTNUM
    (60) number -> . FLOATNUM
    (58) var -> . ID
    (45) matrix -> . [ vectors ]
    (42) matrix_function -> . EYE ( INTNUM )
    (43) matrix_function -> . ONES ( INTNUM )
    (44) matrix_function -> . ZEROS ( INTNUM )
    (70) uminus -> . - expression
    (71) transposition -> . expression '
    (57) matrix_element -> . ID [ INTNUM , INTNUM ]
    (56) vector_element -> . ID [ INTNUM ]

    INTNUM          shift and go to state 42
    FLOATNUM        shift and go to state 43
    ID              shift and go to state 17
    [               shift and go to state 44
    EYE             shift and go to state 45
    ONES            shift and go to state 46
    ZEROS           shift and go to state 47
    -               shift and go to state 41

    expression                     shift and go to state 118
    number                         shift and go to state 33
    var                            shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    uminus                         shift and go to state 37
    transposition                  shift and go to state 38
    matrix_element                 shift and go to state 39
    vector_element                 shift and go to state 40

state 85

    (14) condition -> expression LE . expression
    (26) expression -> . number
    (27) expression -> . var
    (28) expression -> . matrix
    (29) expression -> . matrix_function
    (30) expression -> . uminus
    (31) expression -> . transposition
    (32) expression -> . matrix_element
    (33) expression -> . vector_element
    (62) expression -> . expression + expression
    (63) expression -> . expression - expression
    (64) expression -> . expression * expression
    (65) expression -> . expression / expression
    (66) expression -> . expression DOTADD expression
    (67) expression -> . expression DOTSUB expression
    (68) expression -> . expression DOTMUL expression
    (69) expression -> . expression DOTDIV expression
    (59) number -> . INTNUM
    (60) number -> . FLOATNUM
    (58) var -> . ID
    (45) matrix -> . [ vectors ]
    (42) matrix_function -> . EYE ( INTNUM )
    (43) matrix_function -> . ONES ( INTNUM )
    (44) matrix_function -> . ZEROS ( INTNUM )
    (70) uminus -> . - expression
    (71) transposition -> . expression '
    (57) matrix_element -> . ID [ INTNUM , INTNUM ]
    (56) vector_element -> . ID [ INTNUM ]

    INTNUM          shift and go to state 42
    FLOATNUM        shift and go to state 43
    ID              shift and go to state 17
    [               shift and go to state 44
    EYE             shift and go to state 45
    ONES            shift and go to state 46
    ZEROS           shift and go to state 47
    -               shift and go to state 41

    expression                     shift and go to state 119
    number                         shift and go to state 33
    var                            shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    uminus                         shift and go to state 37
    transposition                  shift and go to state 38
    matrix_element                 shift and go to state 39
    vector_element                 shift and go to state 40

state 86

    (15) condition -> expression GE . expression
    (26) expression -> . number
    (27) expression -> . var
    (28) expression -> . matrix
    (29) expression -> . matrix_function
    (30) expression -> . uminus
    (31) expression -> . transposition
    (32) expression -> . matrix_element
    (33) expression -> . vector_element
    (62) expression -> . expression + expression
    (63) expression -> . expression - expression
    (64) expression -> . expression * expression
    (65) expression -> . expression / expression
    (66) expression -> . expression DOTADD expression
    (67) expression -> . expression DOTSUB expression
    (68) expression -> . expression DOTMUL expression
    (69) expression -> . expression DOTDIV expression
    (59) number -> . INTNUM
    (60) number -> . FLOATNUM
    (58) var -> . ID
    (45) matrix -> . [ vectors ]
    (42) matrix_function -> . EYE ( INTNUM )
    (43) matrix_function -> . ONES ( INTNUM )
    (44) matrix_function -> . ZEROS ( INTNUM )
    (70) uminus -> . - expression
    (71) transposition -> . expression '
    (57) matrix_element -> . ID [ INTNUM , INTNUM ]
    (56) vector_element -> . ID [ INTNUM ]

    INTNUM          shift and go to state 42
    FLOATNUM        shift and go to state 43
    ID              shift and go to state 17
    [               shift and go to state 44
    EYE             shift and go to state 45
    ONES            shift and go to state 46
    ZEROS           shift and go to state 47
    -               shift and go to state 41

    expression                     shift and go to state 120
    number                         shift and go to state 33
    var                            shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    uminus                         shift and go to state 37
    transposition                  shift and go to state 38
    matrix_element                 shift and go to state 39
    vector_element                 shift and go to state 40

state 87

    (16) condition -> expression LT . expression
    (26) expression -> . number
    (27) expression -> . var
    (28) expression -> . matrix
    (29) expression -> . matrix_function
    (30) expression -> . uminus
    (31) expression -> . transposition
    (32) expression -> . matrix_element
    (33) expression -> . vector_element
    (62) expression -> . expression + expression
    (63) expression -> . expression - expression
    (64) expression -> . expression * expression
    (65) expression -> . expression / expression
    (66) expression -> . expression DOTADD expression
    (67) expression -> . expression DOTSUB expression
    (68) expression -> . expression DOTMUL expression
    (69) expression -> . expression DOTDIV expression
    (59) number -> . INTNUM
    (60) number -> . FLOATNUM
    (58) var -> . ID
    (45) matrix -> . [ vectors ]
    (42) matrix_function -> . EYE ( INTNUM )
    (43) matrix_function -> . ONES ( INTNUM )
    (44) matrix_function -> . ZEROS ( INTNUM )
    (70) uminus -> . - expression
    (71) transposition -> . expression '
    (57) matrix_element -> . ID [ INTNUM , INTNUM ]
    (56) vector_element -> . ID [ INTNUM ]

    INTNUM          shift and go to state 42
    FLOATNUM        shift and go to state 43
    ID              shift and go to state 17
    [               shift and go to state 44
    EYE             shift and go to state 45
    ONES            shift and go to state 46
    ZEROS           shift and go to state 47
    -               shift and go to state 41

    expression                     shift and go to state 121
    number                         shift and go to state 33
    var                            shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    uminus                         shift and go to state 37
    transposition                  shift and go to state 38
    matrix_element                 shift and go to state 39
    vector_element                 shift and go to state 40

state 88

    (17) condition -> expression GT . expression
    (26) expression -> . number
    (27) expression -> . var
    (28) expression -> . matrix
    (29) expression -> . matrix_function
    (30) expression -> . uminus
    (31) expression -> . transposition
    (32) expression -> . matrix_element
    (33) expression -> . vector_element
    (62) expression -> . expression + expression
    (63) expression -> . expression - expression
    (64) expression -> . expression * expression
    (65) expression -> . expression / expression
    (66) expression -> . expression DOTADD expression
    (67) expression -> . expression DOTSUB expression
    (68) expression -> . expression DOTMUL expression
    (69) expression -> . expression DOTDIV expression
    (59) number -> . INTNUM
    (60) number -> . FLOATNUM
    (58) var -> . ID
    (45) matrix -> . [ vectors ]
    (42) matrix_function -> . EYE ( INTNUM )
    (43) matrix_function -> . ONES ( INTNUM )
    (44) matrix_function -> . ZEROS ( INTNUM )
    (70) uminus -> . - expression
    (71) transposition -> . expression '
    (57) matrix_element -> . ID [ INTNUM , INTNUM ]
    (56) vector_element -> . ID [ INTNUM ]

    INTNUM          shift and go to state 42
    FLOATNUM        shift and go to state 43
    ID              shift and go to state 17
    [               shift and go to state 44
    EYE             shift and go to state 45
    ONES            shift and go to state 46
    ZEROS           shift and go to state 47
    -               shift and go to state 41

    expression                     shift and go to state 122
    number                         shift and go to state 33
    var                            shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    uminus                         shift and go to state 37
    transposition                  shift and go to state 38
    matrix_element                 shift and go to state 39
    vector_element                 shift and go to state 40

state 89

    (10) instruction -> IF ( condition ) . instruction
    (11) instruction -> IF ( condition ) . instruction ELSE instruction
    (5) instruction -> . sys_instruction ;
    (6) instruction -> . assignment ;
    (7) instruction -> . { instructions }
    (8) instruction -> . FOR var = expression : expression instruction
    (9) instruction -> . WHILE ( condition ) instruction
    (10) instruction -> . IF ( condition ) instruction
    (11) instruction -> . IF ( condition ) instruction ELSE instruction
    (18) sys_instruction -> . BREAK
    (19) sys_instruction -> . CONTINUE
    (20) sys_instruction -> . RETURN expression
    (21) sys_instruction -> . PRINT print_values
    (34) assignment -> . var assignment_operator expression
    (35) assignment -> . matrix_element assignment_operator expression
    (36) assignment -> . vector_element assignment_operator expression
    (58) var -> . ID
    (57) matrix_element -> . ID [ INTNUM , INTNUM ]
    (56) vector_element -> . ID [ INTNUM ]

    {               shift and go to state 6
    FOR             shift and go to state 7
    WHILE           shift and go to state 9
    IF              shift and go to state 10
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    RETURN          shift and go to state 13
    PRINT           shift and go to state 14
    ID              shift and go to state 17

    instruction                    shift and go to state 123
    sys_instruction                shift and go to state 4
    assignment                     shift and go to state 5
    var                            shift and go to state 8
    matrix_element                 shift and go to state 15
    vector_element                 shift and go to state 16

state 90

    (62) expression -> expression + expression .
    (62) expression -> expression . + expression
    (63) expression -> expression . - expression
    (64) expression -> expression . * expression
    (65) expression -> expression . / expression
    (66) expression -> expression . DOTADD expression
    (67) expression -> expression . DOTSUB expression
    (68) expression -> expression . DOTMUL expression
    (69) expression -> expression . DOTDIV expression
    (71) transposition -> expression . '

    +               reduce using rule 62 (expression -> expression + expression .)
    -               reduce using rule 62 (expression -> expression + expression .)
    ;               reduce using rule 62 (expression -> expression + expression .)
    ,               reduce using rule 62 (expression -> expression + expression .)
    EQ              reduce using rule 62 (expression -> expression + expression .)
    NE              reduce using rule 62 (expression -> expression + expression .)
    LE              reduce using rule 62 (expression -> expression + expression .)
    GE              reduce using rule 62 (expression -> expression + expression .)
    LT              reduce using rule 62 (expression -> expression + expression .)
    GT              reduce using rule 62 (expression -> expression + expression .)
    :               reduce using rule 62 (expression -> expression + expression .)
    )               reduce using rule 62 (expression -> expression + expression .)
    {               reduce using rule 62 (expression -> expression + expression .)
    FOR             reduce using rule 62 (expression -> expression + expression .)
    WHILE           reduce using rule 62 (expression -> expression + expression .)
    IF              reduce using rule 62 (expression -> expression + expression .)
    BREAK           reduce using rule 62 (expression -> expression + expression .)
    CONTINUE        reduce using rule 62 (expression -> expression + expression .)
    RETURN          reduce using rule 62 (expression -> expression + expression .)
    PRINT           reduce using rule 62 (expression -> expression + expression .)
    ID              reduce using rule 62 (expression -> expression + expression .)
    *               shift and go to state 63
    /               shift and go to state 64
    DOTADD          shift and go to state 65
    DOTSUB          shift and go to state 66
    DOTMUL          shift and go to state 67
    DOTDIV          shift and go to state 68
    '               shift and go to state 69

  ! *               [ reduce using rule 62 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 62 (expression -> expression + expression .) ]
  ! DOTADD          [ reduce using rule 62 (expression -> expression + expression .) ]
  ! DOTSUB          [ reduce using rule 62 (expression -> expression + expression .) ]
  ! DOTMUL          [ reduce using rule 62 (expression -> expression + expression .) ]
  ! DOTDIV          [ reduce using rule 62 (expression -> expression + expression .) ]
  ! '               [ reduce using rule 62 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 61 ]
  ! -               [ shift and go to state 62 ]


state 91

    (63) expression -> expression - expression .
    (62) expression -> expression . + expression
    (63) expression -> expression . - expression
    (64) expression -> expression . * expression
    (65) expression -> expression . / expression
    (66) expression -> expression . DOTADD expression
    (67) expression -> expression . DOTSUB expression
    (68) expression -> expression . DOTMUL expression
    (69) expression -> expression . DOTDIV expression
    (71) transposition -> expression . '

    +               reduce using rule 63 (expression -> expression - expression .)
    -               reduce using rule 63 (expression -> expression - expression .)
    ;               reduce using rule 63 (expression -> expression - expression .)
    ,               reduce using rule 63 (expression -> expression - expression .)
    EQ              reduce using rule 63 (expression -> expression - expression .)
    NE              reduce using rule 63 (expression -> expression - expression .)
    LE              reduce using rule 63 (expression -> expression - expression .)
    GE              reduce using rule 63 (expression -> expression - expression .)
    LT              reduce using rule 63 (expression -> expression - expression .)
    GT              reduce using rule 63 (expression -> expression - expression .)
    :               reduce using rule 63 (expression -> expression - expression .)
    )               reduce using rule 63 (expression -> expression - expression .)
    {               reduce using rule 63 (expression -> expression - expression .)
    FOR             reduce using rule 63 (expression -> expression - expression .)
    WHILE           reduce using rule 63 (expression -> expression - expression .)
    IF              reduce using rule 63 (expression -> expression - expression .)
    BREAK           reduce using rule 63 (expression -> expression - expression .)
    CONTINUE        reduce using rule 63 (expression -> expression - expression .)
    RETURN          reduce using rule 63 (expression -> expression - expression .)
    PRINT           reduce using rule 63 (expression -> expression - expression .)
    ID              reduce using rule 63 (expression -> expression - expression .)
    *               shift and go to state 63
    /               shift and go to state 64
    DOTADD          shift and go to state 65
    DOTSUB          shift and go to state 66
    DOTMUL          shift and go to state 67
    DOTDIV          shift and go to state 68
    '               shift and go to state 69

  ! *               [ reduce using rule 63 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 63 (expression -> expression - expression .) ]
  ! DOTADD          [ reduce using rule 63 (expression -> expression - expression .) ]
  ! DOTSUB          [ reduce using rule 63 (expression -> expression - expression .) ]
  ! DOTMUL          [ reduce using rule 63 (expression -> expression - expression .) ]
  ! DOTDIV          [ reduce using rule 63 (expression -> expression - expression .) ]
  ! '               [ reduce using rule 63 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 61 ]
  ! -               [ shift and go to state 62 ]


state 92

    (64) expression -> expression * expression .
    (62) expression -> expression . + expression
    (63) expression -> expression . - expression
    (64) expression -> expression . * expression
    (65) expression -> expression . / expression
    (66) expression -> expression . DOTADD expression
    (67) expression -> expression . DOTSUB expression
    (68) expression -> expression . DOTMUL expression
    (69) expression -> expression . DOTDIV expression
    (71) transposition -> expression . '

    +               reduce using rule 64 (expression -> expression * expression .)
    -               reduce using rule 64 (expression -> expression * expression .)
    *               reduce using rule 64 (expression -> expression * expression .)
    /               reduce using rule 64 (expression -> expression * expression .)
    DOTADD          reduce using rule 64 (expression -> expression * expression .)
    DOTSUB          reduce using rule 64 (expression -> expression * expression .)
    ;               reduce using rule 64 (expression -> expression * expression .)
    ,               reduce using rule 64 (expression -> expression * expression .)
    EQ              reduce using rule 64 (expression -> expression * expression .)
    NE              reduce using rule 64 (expression -> expression * expression .)
    LE              reduce using rule 64 (expression -> expression * expression .)
    GE              reduce using rule 64 (expression -> expression * expression .)
    LT              reduce using rule 64 (expression -> expression * expression .)
    GT              reduce using rule 64 (expression -> expression * expression .)
    :               reduce using rule 64 (expression -> expression * expression .)
    )               reduce using rule 64 (expression -> expression * expression .)
    {               reduce using rule 64 (expression -> expression * expression .)
    FOR             reduce using rule 64 (expression -> expression * expression .)
    WHILE           reduce using rule 64 (expression -> expression * expression .)
    IF              reduce using rule 64 (expression -> expression * expression .)
    BREAK           reduce using rule 64 (expression -> expression * expression .)
    CONTINUE        reduce using rule 64 (expression -> expression * expression .)
    RETURN          reduce using rule 64 (expression -> expression * expression .)
    PRINT           reduce using rule 64 (expression -> expression * expression .)
    ID              reduce using rule 64 (expression -> expression * expression .)
    DOTMUL          shift and go to state 67
    DOTDIV          shift and go to state 68
    '               shift and go to state 69

  ! DOTMUL          [ reduce using rule 64 (expression -> expression * expression .) ]
  ! DOTDIV          [ reduce using rule 64 (expression -> expression * expression .) ]
  ! '               [ reduce using rule 64 (expression -> expression * expression .) ]
  ! +               [ shift and go to state 61 ]
  ! -               [ shift and go to state 62 ]
  ! *               [ shift and go to state 63 ]
  ! /               [ shift and go to state 64 ]
  ! DOTADD          [ shift and go to state 65 ]
  ! DOTSUB          [ shift and go to state 66 ]


state 93

    (65) expression -> expression / expression .
    (62) expression -> expression . + expression
    (63) expression -> expression . - expression
    (64) expression -> expression . * expression
    (65) expression -> expression . / expression
    (66) expression -> expression . DOTADD expression
    (67) expression -> expression . DOTSUB expression
    (68) expression -> expression . DOTMUL expression
    (69) expression -> expression . DOTDIV expression
    (71) transposition -> expression . '

    +               reduce using rule 65 (expression -> expression / expression .)
    -               reduce using rule 65 (expression -> expression / expression .)
    *               reduce using rule 65 (expression -> expression / expression .)
    /               reduce using rule 65 (expression -> expression / expression .)
    DOTADD          reduce using rule 65 (expression -> expression / expression .)
    DOTSUB          reduce using rule 65 (expression -> expression / expression .)
    ;               reduce using rule 65 (expression -> expression / expression .)
    ,               reduce using rule 65 (expression -> expression / expression .)
    EQ              reduce using rule 65 (expression -> expression / expression .)
    NE              reduce using rule 65 (expression -> expression / expression .)
    LE              reduce using rule 65 (expression -> expression / expression .)
    GE              reduce using rule 65 (expression -> expression / expression .)
    LT              reduce using rule 65 (expression -> expression / expression .)
    GT              reduce using rule 65 (expression -> expression / expression .)
    :               reduce using rule 65 (expression -> expression / expression .)
    )               reduce using rule 65 (expression -> expression / expression .)
    {               reduce using rule 65 (expression -> expression / expression .)
    FOR             reduce using rule 65 (expression -> expression / expression .)
    WHILE           reduce using rule 65 (expression -> expression / expression .)
    IF              reduce using rule 65 (expression -> expression / expression .)
    BREAK           reduce using rule 65 (expression -> expression / expression .)
    CONTINUE        reduce using rule 65 (expression -> expression / expression .)
    RETURN          reduce using rule 65 (expression -> expression / expression .)
    PRINT           reduce using rule 65 (expression -> expression / expression .)
    ID              reduce using rule 65 (expression -> expression / expression .)
    DOTMUL          shift and go to state 67
    DOTDIV          shift and go to state 68
    '               shift and go to state 69

  ! DOTMUL          [ reduce using rule 65 (expression -> expression / expression .) ]
  ! DOTDIV          [ reduce using rule 65 (expression -> expression / expression .) ]
  ! '               [ reduce using rule 65 (expression -> expression / expression .) ]
  ! +               [ shift and go to state 61 ]
  ! -               [ shift and go to state 62 ]
  ! *               [ shift and go to state 63 ]
  ! /               [ shift and go to state 64 ]
  ! DOTADD          [ shift and go to state 65 ]
  ! DOTSUB          [ shift and go to state 66 ]


state 94

    (66) expression -> expression DOTADD expression .
    (62) expression -> expression . + expression
    (63) expression -> expression . - expression
    (64) expression -> expression . * expression
    (65) expression -> expression . / expression
    (66) expression -> expression . DOTADD expression
    (67) expression -> expression . DOTSUB expression
    (68) expression -> expression . DOTMUL expression
    (69) expression -> expression . DOTDIV expression
    (71) transposition -> expression . '

    +               reduce using rule 66 (expression -> expression DOTADD expression .)
    -               reduce using rule 66 (expression -> expression DOTADD expression .)
    DOTADD          reduce using rule 66 (expression -> expression DOTADD expression .)
    DOTSUB          reduce using rule 66 (expression -> expression DOTADD expression .)
    ;               reduce using rule 66 (expression -> expression DOTADD expression .)
    ,               reduce using rule 66 (expression -> expression DOTADD expression .)
    EQ              reduce using rule 66 (expression -> expression DOTADD expression .)
    NE              reduce using rule 66 (expression -> expression DOTADD expression .)
    LE              reduce using rule 66 (expression -> expression DOTADD expression .)
    GE              reduce using rule 66 (expression -> expression DOTADD expression .)
    LT              reduce using rule 66 (expression -> expression DOTADD expression .)
    GT              reduce using rule 66 (expression -> expression DOTADD expression .)
    :               reduce using rule 66 (expression -> expression DOTADD expression .)
    )               reduce using rule 66 (expression -> expression DOTADD expression .)
    {               reduce using rule 66 (expression -> expression DOTADD expression .)
    FOR             reduce using rule 66 (expression -> expression DOTADD expression .)
    WHILE           reduce using rule 66 (expression -> expression DOTADD expression .)
    IF              reduce using rule 66 (expression -> expression DOTADD expression .)
    BREAK           reduce using rule 66 (expression -> expression DOTADD expression .)
    CONTINUE        reduce using rule 66 (expression -> expression DOTADD expression .)
    RETURN          reduce using rule 66 (expression -> expression DOTADD expression .)
    PRINT           reduce using rule 66 (expression -> expression DOTADD expression .)
    ID              reduce using rule 66 (expression -> expression DOTADD expression .)
    *               shift and go to state 63
    /               shift and go to state 64
    DOTMUL          shift and go to state 67
    DOTDIV          shift and go to state 68
    '               shift and go to state 69

  ! *               [ reduce using rule 66 (expression -> expression DOTADD expression .) ]
  ! /               [ reduce using rule 66 (expression -> expression DOTADD expression .) ]
  ! DOTMUL          [ reduce using rule 66 (expression -> expression DOTADD expression .) ]
  ! DOTDIV          [ reduce using rule 66 (expression -> expression DOTADD expression .) ]
  ! '               [ reduce using rule 66 (expression -> expression DOTADD expression .) ]
  ! +               [ shift and go to state 61 ]
  ! -               [ shift and go to state 62 ]
  ! DOTADD          [ shift and go to state 65 ]
  ! DOTSUB          [ shift and go to state 66 ]


state 95

    (67) expression -> expression DOTSUB expression .
    (62) expression -> expression . + expression
    (63) expression -> expression . - expression
    (64) expression -> expression . * expression
    (65) expression -> expression . / expression
    (66) expression -> expression . DOTADD expression
    (67) expression -> expression . DOTSUB expression
    (68) expression -> expression . DOTMUL expression
    (69) expression -> expression . DOTDIV expression
    (71) transposition -> expression . '

    +               reduce using rule 67 (expression -> expression DOTSUB expression .)
    -               reduce using rule 67 (expression -> expression DOTSUB expression .)
    DOTADD          reduce using rule 67 (expression -> expression DOTSUB expression .)
    DOTSUB          reduce using rule 67 (expression -> expression DOTSUB expression .)
    ;               reduce using rule 67 (expression -> expression DOTSUB expression .)
    ,               reduce using rule 67 (expression -> expression DOTSUB expression .)
    EQ              reduce using rule 67 (expression -> expression DOTSUB expression .)
    NE              reduce using rule 67 (expression -> expression DOTSUB expression .)
    LE              reduce using rule 67 (expression -> expression DOTSUB expression .)
    GE              reduce using rule 67 (expression -> expression DOTSUB expression .)
    LT              reduce using rule 67 (expression -> expression DOTSUB expression .)
    GT              reduce using rule 67 (expression -> expression DOTSUB expression .)
    :               reduce using rule 67 (expression -> expression DOTSUB expression .)
    )               reduce using rule 67 (expression -> expression DOTSUB expression .)
    {               reduce using rule 67 (expression -> expression DOTSUB expression .)
    FOR             reduce using rule 67 (expression -> expression DOTSUB expression .)
    WHILE           reduce using rule 67 (expression -> expression DOTSUB expression .)
    IF              reduce using rule 67 (expression -> expression DOTSUB expression .)
    BREAK           reduce using rule 67 (expression -> expression DOTSUB expression .)
    CONTINUE        reduce using rule 67 (expression -> expression DOTSUB expression .)
    RETURN          reduce using rule 67 (expression -> expression DOTSUB expression .)
    PRINT           reduce using rule 67 (expression -> expression DOTSUB expression .)
    ID              reduce using rule 67 (expression -> expression DOTSUB expression .)
    *               shift and go to state 63
    /               shift and go to state 64
    DOTMUL          shift and go to state 67
    DOTDIV          shift and go to state 68
    '               shift and go to state 69

  ! *               [ reduce using rule 67 (expression -> expression DOTSUB expression .) ]
  ! /               [ reduce using rule 67 (expression -> expression DOTSUB expression .) ]
  ! DOTMUL          [ reduce using rule 67 (expression -> expression DOTSUB expression .) ]
  ! DOTDIV          [ reduce using rule 67 (expression -> expression DOTSUB expression .) ]
  ! '               [ reduce using rule 67 (expression -> expression DOTSUB expression .) ]
  ! +               [ shift and go to state 61 ]
  ! -               [ shift and go to state 62 ]
  ! DOTADD          [ shift and go to state 65 ]
  ! DOTSUB          [ shift and go to state 66 ]


state 96

    (68) expression -> expression DOTMUL expression .
    (62) expression -> expression . + expression
    (63) expression -> expression . - expression
    (64) expression -> expression . * expression
    (65) expression -> expression . / expression
    (66) expression -> expression . DOTADD expression
    (67) expression -> expression . DOTSUB expression
    (68) expression -> expression . DOTMUL expression
    (69) expression -> expression . DOTDIV expression
    (71) transposition -> expression . '

    +               reduce using rule 68 (expression -> expression DOTMUL expression .)
    -               reduce using rule 68 (expression -> expression DOTMUL expression .)
    *               reduce using rule 68 (expression -> expression DOTMUL expression .)
    /               reduce using rule 68 (expression -> expression DOTMUL expression .)
    DOTADD          reduce using rule 68 (expression -> expression DOTMUL expression .)
    DOTSUB          reduce using rule 68 (expression -> expression DOTMUL expression .)
    DOTMUL          reduce using rule 68 (expression -> expression DOTMUL expression .)
    DOTDIV          reduce using rule 68 (expression -> expression DOTMUL expression .)
    ;               reduce using rule 68 (expression -> expression DOTMUL expression .)
    ,               reduce using rule 68 (expression -> expression DOTMUL expression .)
    EQ              reduce using rule 68 (expression -> expression DOTMUL expression .)
    NE              reduce using rule 68 (expression -> expression DOTMUL expression .)
    LE              reduce using rule 68 (expression -> expression DOTMUL expression .)
    GE              reduce using rule 68 (expression -> expression DOTMUL expression .)
    LT              reduce using rule 68 (expression -> expression DOTMUL expression .)
    GT              reduce using rule 68 (expression -> expression DOTMUL expression .)
    :               reduce using rule 68 (expression -> expression DOTMUL expression .)
    )               reduce using rule 68 (expression -> expression DOTMUL expression .)
    {               reduce using rule 68 (expression -> expression DOTMUL expression .)
    FOR             reduce using rule 68 (expression -> expression DOTMUL expression .)
    WHILE           reduce using rule 68 (expression -> expression DOTMUL expression .)
    IF              reduce using rule 68 (expression -> expression DOTMUL expression .)
    BREAK           reduce using rule 68 (expression -> expression DOTMUL expression .)
    CONTINUE        reduce using rule 68 (expression -> expression DOTMUL expression .)
    RETURN          reduce using rule 68 (expression -> expression DOTMUL expression .)
    PRINT           reduce using rule 68 (expression -> expression DOTMUL expression .)
    ID              reduce using rule 68 (expression -> expression DOTMUL expression .)
    '               shift and go to state 69

  ! '               [ reduce using rule 68 (expression -> expression DOTMUL expression .) ]
  ! +               [ shift and go to state 61 ]
  ! -               [ shift and go to state 62 ]
  ! *               [ shift and go to state 63 ]
  ! /               [ shift and go to state 64 ]
  ! DOTADD          [ shift and go to state 65 ]
  ! DOTSUB          [ shift and go to state 66 ]
  ! DOTMUL          [ shift and go to state 67 ]
  ! DOTDIV          [ shift and go to state 68 ]


state 97

    (69) expression -> expression DOTDIV expression .
    (62) expression -> expression . + expression
    (63) expression -> expression . - expression
    (64) expression -> expression . * expression
    (65) expression -> expression . / expression
    (66) expression -> expression . DOTADD expression
    (67) expression -> expression . DOTSUB expression
    (68) expression -> expression . DOTMUL expression
    (69) expression -> expression . DOTDIV expression
    (71) transposition -> expression . '

    +               reduce using rule 69 (expression -> expression DOTDIV expression .)
    -               reduce using rule 69 (expression -> expression DOTDIV expression .)
    *               reduce using rule 69 (expression -> expression DOTDIV expression .)
    /               reduce using rule 69 (expression -> expression DOTDIV expression .)
    DOTADD          reduce using rule 69 (expression -> expression DOTDIV expression .)
    DOTSUB          reduce using rule 69 (expression -> expression DOTDIV expression .)
    DOTMUL          reduce using rule 69 (expression -> expression DOTDIV expression .)
    DOTDIV          reduce using rule 69 (expression -> expression DOTDIV expression .)
    ;               reduce using rule 69 (expression -> expression DOTDIV expression .)
    ,               reduce using rule 69 (expression -> expression DOTDIV expression .)
    EQ              reduce using rule 69 (expression -> expression DOTDIV expression .)
    NE              reduce using rule 69 (expression -> expression DOTDIV expression .)
    LE              reduce using rule 69 (expression -> expression DOTDIV expression .)
    GE              reduce using rule 69 (expression -> expression DOTDIV expression .)
    LT              reduce using rule 69 (expression -> expression DOTDIV expression .)
    GT              reduce using rule 69 (expression -> expression DOTDIV expression .)
    :               reduce using rule 69 (expression -> expression DOTDIV expression .)
    )               reduce using rule 69 (expression -> expression DOTDIV expression .)
    {               reduce using rule 69 (expression -> expression DOTDIV expression .)
    FOR             reduce using rule 69 (expression -> expression DOTDIV expression .)
    WHILE           reduce using rule 69 (expression -> expression DOTDIV expression .)
    IF              reduce using rule 69 (expression -> expression DOTDIV expression .)
    BREAK           reduce using rule 69 (expression -> expression DOTDIV expression .)
    CONTINUE        reduce using rule 69 (expression -> expression DOTDIV expression .)
    RETURN          reduce using rule 69 (expression -> expression DOTDIV expression .)
    PRINT           reduce using rule 69 (expression -> expression DOTDIV expression .)
    ID              reduce using rule 69 (expression -> expression DOTDIV expression .)
    '               shift and go to state 69

  ! '               [ reduce using rule 69 (expression -> expression DOTDIV expression .) ]
  ! +               [ shift and go to state 61 ]
  ! -               [ shift and go to state 62 ]
  ! *               [ shift and go to state 63 ]
  ! /               [ shift and go to state 64 ]
  ! DOTADD          [ shift and go to state 65 ]
  ! DOTSUB          [ shift and go to state 66 ]
  ! DOTMUL          [ shift and go to state 67 ]
  ! DOTDIV          [ shift and go to state 68 ]


state 98

    (48) vector -> [ variables . ]
    (49) variables -> variables . , variable

    ]               shift and go to state 124
    ,               shift and go to state 125


state 99

    (50) variables -> variable .

    ]               reduce using rule 50 (variables -> variable .)
    ,               reduce using rule 50 (variables -> variable .)


state 100

    (51) variable -> number .

    ]               reduce using rule 51 (variable -> number .)
    ,               reduce using rule 51 (variable -> number .)


state 101

    (52) variable -> var .

    ]               reduce using rule 52 (variable -> var .)
    ,               reduce using rule 52 (variable -> var .)


state 102

    (53) variable -> element .

    ]               reduce using rule 53 (variable -> element .)
    ,               reduce using rule 53 (variable -> element .)


state 103

    (58) var -> ID .
    (56) vector_element -> ID . [ INTNUM ]
    (57) matrix_element -> ID . [ INTNUM , INTNUM ]

    ]               reduce using rule 58 (var -> ID .)
    ,               reduce using rule 58 (var -> ID .)
    [               shift and go to state 126


state 104

    (54) element -> vector_element .

    ]               reduce using rule 54 (element -> vector_element .)
    ,               reduce using rule 54 (element -> vector_element .)


state 105

    (55) element -> matrix_element .

    ]               reduce using rule 55 (element -> matrix_element .)
    ,               reduce using rule 55 (element -> matrix_element .)


state 106

    (45) matrix -> [ vectors ] .

    +               reduce using rule 45 (matrix -> [ vectors ] .)
    -               reduce using rule 45 (matrix -> [ vectors ] .)
    *               reduce using rule 45 (matrix -> [ vectors ] .)
    /               reduce using rule 45 (matrix -> [ vectors ] .)
    DOTADD          reduce using rule 45 (matrix -> [ vectors ] .)
    DOTSUB          reduce using rule 45 (matrix -> [ vectors ] .)
    DOTMUL          reduce using rule 45 (matrix -> [ vectors ] .)
    DOTDIV          reduce using rule 45 (matrix -> [ vectors ] .)
    '               reduce using rule 45 (matrix -> [ vectors ] .)
    ;               reduce using rule 45 (matrix -> [ vectors ] .)
    ,               reduce using rule 45 (matrix -> [ vectors ] .)
    EQ              reduce using rule 45 (matrix -> [ vectors ] .)
    NE              reduce using rule 45 (matrix -> [ vectors ] .)
    LE              reduce using rule 45 (matrix -> [ vectors ] .)
    GE              reduce using rule 45 (matrix -> [ vectors ] .)
    LT              reduce using rule 45 (matrix -> [ vectors ] .)
    GT              reduce using rule 45 (matrix -> [ vectors ] .)
    :               reduce using rule 45 (matrix -> [ vectors ] .)
    )               reduce using rule 45 (matrix -> [ vectors ] .)
    {               reduce using rule 45 (matrix -> [ vectors ] .)
    FOR             reduce using rule 45 (matrix -> [ vectors ] .)
    WHILE           reduce using rule 45 (matrix -> [ vectors ] .)
    IF              reduce using rule 45 (matrix -> [ vectors ] .)
    BREAK           reduce using rule 45 (matrix -> [ vectors ] .)
    CONTINUE        reduce using rule 45 (matrix -> [ vectors ] .)
    RETURN          reduce using rule 45 (matrix -> [ vectors ] .)
    PRINT           reduce using rule 45 (matrix -> [ vectors ] .)
    ID              reduce using rule 45 (matrix -> [ vectors ] .)


state 107

    (46) vectors -> vectors , . vector
    (48) vector -> . [ variables ]

    [               shift and go to state 71

    vector                         shift and go to state 127

state 108

    (42) matrix_function -> EYE ( INTNUM . )

    )               shift and go to state 128


state 109

    (43) matrix_function -> ONES ( INTNUM . )

    )               shift and go to state 129


state 110

    (44) matrix_function -> ZEROS ( INTNUM . )

    )               shift and go to state 130


state 111

    (22) print_values -> print_values , string .

    ,               reduce using rule 22 (print_values -> print_values , string .)
    ;               reduce using rule 22 (print_values -> print_values , string .)


state 112

    (23) print_values -> print_values , expression .
    (62) expression -> expression . + expression
    (63) expression -> expression . - expression
    (64) expression -> expression . * expression
    (65) expression -> expression . / expression
    (66) expression -> expression . DOTADD expression
    (67) expression -> expression . DOTSUB expression
    (68) expression -> expression . DOTMUL expression
    (69) expression -> expression . DOTDIV expression
    (71) transposition -> expression . '

    ,               reduce using rule 23 (print_values -> print_values , expression .)
    ;               reduce using rule 23 (print_values -> print_values , expression .)
    +               shift and go to state 61
    -               shift and go to state 62
    *               shift and go to state 63
    /               shift and go to state 64
    DOTADD          shift and go to state 65
    DOTSUB          shift and go to state 66
    DOTMUL          shift and go to state 67
    DOTDIV          shift and go to state 68
    '               shift and go to state 69


state 113

    (57) matrix_element -> ID [ INTNUM , . INTNUM ]

    INTNUM          shift and go to state 131


state 114

    (56) vector_element -> ID [ INTNUM ] .

    =               reduce using rule 56 (vector_element -> ID [ INTNUM ] .)
    ADDASSIGN       reduce using rule 56 (vector_element -> ID [ INTNUM ] .)
    SUBASSIGN       reduce using rule 56 (vector_element -> ID [ INTNUM ] .)
    MULASSIGN       reduce using rule 56 (vector_element -> ID [ INTNUM ] .)
    DIVASSIGN       reduce using rule 56 (vector_element -> ID [ INTNUM ] .)
    +               reduce using rule 56 (vector_element -> ID [ INTNUM ] .)
    -               reduce using rule 56 (vector_element -> ID [ INTNUM ] .)
    *               reduce using rule 56 (vector_element -> ID [ INTNUM ] .)
    /               reduce using rule 56 (vector_element -> ID [ INTNUM ] .)
    DOTADD          reduce using rule 56 (vector_element -> ID [ INTNUM ] .)
    DOTSUB          reduce using rule 56 (vector_element -> ID [ INTNUM ] .)
    DOTMUL          reduce using rule 56 (vector_element -> ID [ INTNUM ] .)
    DOTDIV          reduce using rule 56 (vector_element -> ID [ INTNUM ] .)
    '               reduce using rule 56 (vector_element -> ID [ INTNUM ] .)
    ;               reduce using rule 56 (vector_element -> ID [ INTNUM ] .)
    ,               reduce using rule 56 (vector_element -> ID [ INTNUM ] .)
    EQ              reduce using rule 56 (vector_element -> ID [ INTNUM ] .)
    NE              reduce using rule 56 (vector_element -> ID [ INTNUM ] .)
    LE              reduce using rule 56 (vector_element -> ID [ INTNUM ] .)
    GE              reduce using rule 56 (vector_element -> ID [ INTNUM ] .)
    LT              reduce using rule 56 (vector_element -> ID [ INTNUM ] .)
    GT              reduce using rule 56 (vector_element -> ID [ INTNUM ] .)
    :               reduce using rule 56 (vector_element -> ID [ INTNUM ] .)
    )               reduce using rule 56 (vector_element -> ID [ INTNUM ] .)
    {               reduce using rule 56 (vector_element -> ID [ INTNUM ] .)
    FOR             reduce using rule 56 (vector_element -> ID [ INTNUM ] .)
    WHILE           reduce using rule 56 (vector_element -> ID [ INTNUM ] .)
    IF              reduce using rule 56 (vector_element -> ID [ INTNUM ] .)
    BREAK           reduce using rule 56 (vector_element -> ID [ INTNUM ] .)
    CONTINUE        reduce using rule 56 (vector_element -> ID [ INTNUM ] .)
    RETURN          reduce using rule 56 (vector_element -> ID [ INTNUM ] .)
    PRINT           reduce using rule 56 (vector_element -> ID [ INTNUM ] .)
    ID              reduce using rule 56 (vector_element -> ID [ INTNUM ] .)
    ]               reduce using rule 56 (vector_element -> ID [ INTNUM ] .)


state 115

    (8) instruction -> FOR var = expression : . expression instruction
    (26) expression -> . number
    (27) expression -> . var
    (28) expression -> . matrix
    (29) expression -> . matrix_function
    (30) expression -> . uminus
    (31) expression -> . transposition
    (32) expression -> . matrix_element
    (33) expression -> . vector_element
    (62) expression -> . expression + expression
    (63) expression -> . expression - expression
    (64) expression -> . expression * expression
    (65) expression -> . expression / expression
    (66) expression -> . expression DOTADD expression
    (67) expression -> . expression DOTSUB expression
    (68) expression -> . expression DOTMUL expression
    (69) expression -> . expression DOTDIV expression
    (59) number -> . INTNUM
    (60) number -> . FLOATNUM
    (58) var -> . ID
    (45) matrix -> . [ vectors ]
    (42) matrix_function -> . EYE ( INTNUM )
    (43) matrix_function -> . ONES ( INTNUM )
    (44) matrix_function -> . ZEROS ( INTNUM )
    (70) uminus -> . - expression
    (71) transposition -> . expression '
    (57) matrix_element -> . ID [ INTNUM , INTNUM ]
    (56) vector_element -> . ID [ INTNUM ]

    INTNUM          shift and go to state 42
    FLOATNUM        shift and go to state 43
    ID              shift and go to state 17
    [               shift and go to state 44
    EYE             shift and go to state 45
    ONES            shift and go to state 46
    ZEROS           shift and go to state 47
    -               shift and go to state 41

    var                            shift and go to state 34
    expression                     shift and go to state 132
    number                         shift and go to state 33
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    uminus                         shift and go to state 37
    transposition                  shift and go to state 38
    matrix_element                 shift and go to state 39
    vector_element                 shift and go to state 40

state 116

    (9) instruction -> WHILE ( condition ) instruction .

    {               reduce using rule 9 (instruction -> WHILE ( condition ) instruction .)
    FOR             reduce using rule 9 (instruction -> WHILE ( condition ) instruction .)
    WHILE           reduce using rule 9 (instruction -> WHILE ( condition ) instruction .)
    IF              reduce using rule 9 (instruction -> WHILE ( condition ) instruction .)
    BREAK           reduce using rule 9 (instruction -> WHILE ( condition ) instruction .)
    CONTINUE        reduce using rule 9 (instruction -> WHILE ( condition ) instruction .)
    RETURN          reduce using rule 9 (instruction -> WHILE ( condition ) instruction .)
    PRINT           reduce using rule 9 (instruction -> WHILE ( condition ) instruction .)
    ID              reduce using rule 9 (instruction -> WHILE ( condition ) instruction .)
    $end            reduce using rule 9 (instruction -> WHILE ( condition ) instruction .)
    }               reduce using rule 9 (instruction -> WHILE ( condition ) instruction .)
    ELSE            reduce using rule 9 (instruction -> WHILE ( condition ) instruction .)


state 117

    (12) condition -> expression EQ expression .
    (62) expression -> expression . + expression
    (63) expression -> expression . - expression
    (64) expression -> expression . * expression
    (65) expression -> expression . / expression
    (66) expression -> expression . DOTADD expression
    (67) expression -> expression . DOTSUB expression
    (68) expression -> expression . DOTMUL expression
    (69) expression -> expression . DOTDIV expression
    (71) transposition -> expression . '

    )               reduce using rule 12 (condition -> expression EQ expression .)
    +               shift and go to state 61
    -               shift and go to state 62
    *               shift and go to state 63
    /               shift and go to state 64
    DOTADD          shift and go to state 65
    DOTSUB          shift and go to state 66
    DOTMUL          shift and go to state 67
    DOTDIV          shift and go to state 68
    '               shift and go to state 69


state 118

    (13) condition -> expression NE expression .
    (62) expression -> expression . + expression
    (63) expression -> expression . - expression
    (64) expression -> expression . * expression
    (65) expression -> expression . / expression
    (66) expression -> expression . DOTADD expression
    (67) expression -> expression . DOTSUB expression
    (68) expression -> expression . DOTMUL expression
    (69) expression -> expression . DOTDIV expression
    (71) transposition -> expression . '

    )               reduce using rule 13 (condition -> expression NE expression .)
    +               shift and go to state 61
    -               shift and go to state 62
    *               shift and go to state 63
    /               shift and go to state 64
    DOTADD          shift and go to state 65
    DOTSUB          shift and go to state 66
    DOTMUL          shift and go to state 67
    DOTDIV          shift and go to state 68
    '               shift and go to state 69


state 119

    (14) condition -> expression LE expression .
    (62) expression -> expression . + expression
    (63) expression -> expression . - expression
    (64) expression -> expression . * expression
    (65) expression -> expression . / expression
    (66) expression -> expression . DOTADD expression
    (67) expression -> expression . DOTSUB expression
    (68) expression -> expression . DOTMUL expression
    (69) expression -> expression . DOTDIV expression
    (71) transposition -> expression . '

    )               reduce using rule 14 (condition -> expression LE expression .)
    +               shift and go to state 61
    -               shift and go to state 62
    *               shift and go to state 63
    /               shift and go to state 64
    DOTADD          shift and go to state 65
    DOTSUB          shift and go to state 66
    DOTMUL          shift and go to state 67
    DOTDIV          shift and go to state 68
    '               shift and go to state 69


state 120

    (15) condition -> expression GE expression .
    (62) expression -> expression . + expression
    (63) expression -> expression . - expression
    (64) expression -> expression . * expression
    (65) expression -> expression . / expression
    (66) expression -> expression . DOTADD expression
    (67) expression -> expression . DOTSUB expression
    (68) expression -> expression . DOTMUL expression
    (69) expression -> expression . DOTDIV expression
    (71) transposition -> expression . '

    )               reduce using rule 15 (condition -> expression GE expression .)
    +               shift and go to state 61
    -               shift and go to state 62
    *               shift and go to state 63
    /               shift and go to state 64
    DOTADD          shift and go to state 65
    DOTSUB          shift and go to state 66
    DOTMUL          shift and go to state 67
    DOTDIV          shift and go to state 68
    '               shift and go to state 69


state 121

    (16) condition -> expression LT expression .
    (62) expression -> expression . + expression
    (63) expression -> expression . - expression
    (64) expression -> expression . * expression
    (65) expression -> expression . / expression
    (66) expression -> expression . DOTADD expression
    (67) expression -> expression . DOTSUB expression
    (68) expression -> expression . DOTMUL expression
    (69) expression -> expression . DOTDIV expression
    (71) transposition -> expression . '

    )               reduce using rule 16 (condition -> expression LT expression .)
    +               shift and go to state 61
    -               shift and go to state 62
    *               shift and go to state 63
    /               shift and go to state 64
    DOTADD          shift and go to state 65
    DOTSUB          shift and go to state 66
    DOTMUL          shift and go to state 67
    DOTDIV          shift and go to state 68
    '               shift and go to state 69


state 122

    (17) condition -> expression GT expression .
    (62) expression -> expression . + expression
    (63) expression -> expression . - expression
    (64) expression -> expression . * expression
    (65) expression -> expression . / expression
    (66) expression -> expression . DOTADD expression
    (67) expression -> expression . DOTSUB expression
    (68) expression -> expression . DOTMUL expression
    (69) expression -> expression . DOTDIV expression
    (71) transposition -> expression . '

    )               reduce using rule 17 (condition -> expression GT expression .)
    +               shift and go to state 61
    -               shift and go to state 62
    *               shift and go to state 63
    /               shift and go to state 64
    DOTADD          shift and go to state 65
    DOTSUB          shift and go to state 66
    DOTMUL          shift and go to state 67
    DOTDIV          shift and go to state 68
    '               shift and go to state 69


state 123

    (10) instruction -> IF ( condition ) instruction .
    (11) instruction -> IF ( condition ) instruction . ELSE instruction

    {               reduce using rule 10 (instruction -> IF ( condition ) instruction .)
    FOR             reduce using rule 10 (instruction -> IF ( condition ) instruction .)
    WHILE           reduce using rule 10 (instruction -> IF ( condition ) instruction .)
    IF              reduce using rule 10 (instruction -> IF ( condition ) instruction .)
    BREAK           reduce using rule 10 (instruction -> IF ( condition ) instruction .)
    CONTINUE        reduce using rule 10 (instruction -> IF ( condition ) instruction .)
    RETURN          reduce using rule 10 (instruction -> IF ( condition ) instruction .)
    PRINT           reduce using rule 10 (instruction -> IF ( condition ) instruction .)
    ID              reduce using rule 10 (instruction -> IF ( condition ) instruction .)
    $end            reduce using rule 10 (instruction -> IF ( condition ) instruction .)
    }               reduce using rule 10 (instruction -> IF ( condition ) instruction .)
    ELSE            shift and go to state 133

  ! ELSE            [ reduce using rule 10 (instruction -> IF ( condition ) instruction .) ]


state 124

    (48) vector -> [ variables ] .

    ]               reduce using rule 48 (vector -> [ variables ] .)
    ,               reduce using rule 48 (vector -> [ variables ] .)


state 125

    (49) variables -> variables , . variable
    (51) variable -> . number
    (52) variable -> . var
    (53) variable -> . element
    (59) number -> . INTNUM
    (60) number -> . FLOATNUM
    (58) var -> . ID
    (54) element -> . vector_element
    (55) element -> . matrix_element
    (56) vector_element -> . ID [ INTNUM ]
    (57) matrix_element -> . ID [ INTNUM , INTNUM ]

    INTNUM          shift and go to state 42
    FLOATNUM        shift and go to state 43
    ID              shift and go to state 103

    variable                       shift and go to state 134
    number                         shift and go to state 100
    var                            shift and go to state 101
    element                        shift and go to state 102
    vector_element                 shift and go to state 104
    matrix_element                 shift and go to state 105

state 126

    (56) vector_element -> ID [ . INTNUM ]
    (57) matrix_element -> ID [ . INTNUM , INTNUM ]

    INTNUM          shift and go to state 135


state 127

    (46) vectors -> vectors , vector .

    ]               reduce using rule 46 (vectors -> vectors , vector .)
    ,               reduce using rule 46 (vectors -> vectors , vector .)


state 128

    (42) matrix_function -> EYE ( INTNUM ) .

    +               reduce using rule 42 (matrix_function -> EYE ( INTNUM ) .)
    -               reduce using rule 42 (matrix_function -> EYE ( INTNUM ) .)
    *               reduce using rule 42 (matrix_function -> EYE ( INTNUM ) .)
    /               reduce using rule 42 (matrix_function -> EYE ( INTNUM ) .)
    DOTADD          reduce using rule 42 (matrix_function -> EYE ( INTNUM ) .)
    DOTSUB          reduce using rule 42 (matrix_function -> EYE ( INTNUM ) .)
    DOTMUL          reduce using rule 42 (matrix_function -> EYE ( INTNUM ) .)
    DOTDIV          reduce using rule 42 (matrix_function -> EYE ( INTNUM ) .)
    '               reduce using rule 42 (matrix_function -> EYE ( INTNUM ) .)
    ;               reduce using rule 42 (matrix_function -> EYE ( INTNUM ) .)
    ,               reduce using rule 42 (matrix_function -> EYE ( INTNUM ) .)
    EQ              reduce using rule 42 (matrix_function -> EYE ( INTNUM ) .)
    NE              reduce using rule 42 (matrix_function -> EYE ( INTNUM ) .)
    LE              reduce using rule 42 (matrix_function -> EYE ( INTNUM ) .)
    GE              reduce using rule 42 (matrix_function -> EYE ( INTNUM ) .)
    LT              reduce using rule 42 (matrix_function -> EYE ( INTNUM ) .)
    GT              reduce using rule 42 (matrix_function -> EYE ( INTNUM ) .)
    :               reduce using rule 42 (matrix_function -> EYE ( INTNUM ) .)
    )               reduce using rule 42 (matrix_function -> EYE ( INTNUM ) .)
    {               reduce using rule 42 (matrix_function -> EYE ( INTNUM ) .)
    FOR             reduce using rule 42 (matrix_function -> EYE ( INTNUM ) .)
    WHILE           reduce using rule 42 (matrix_function -> EYE ( INTNUM ) .)
    IF              reduce using rule 42 (matrix_function -> EYE ( INTNUM ) .)
    BREAK           reduce using rule 42 (matrix_function -> EYE ( INTNUM ) .)
    CONTINUE        reduce using rule 42 (matrix_function -> EYE ( INTNUM ) .)
    RETURN          reduce using rule 42 (matrix_function -> EYE ( INTNUM ) .)
    PRINT           reduce using rule 42 (matrix_function -> EYE ( INTNUM ) .)
    ID              reduce using rule 42 (matrix_function -> EYE ( INTNUM ) .)


state 129

    (43) matrix_function -> ONES ( INTNUM ) .

    +               reduce using rule 43 (matrix_function -> ONES ( INTNUM ) .)
    -               reduce using rule 43 (matrix_function -> ONES ( INTNUM ) .)
    *               reduce using rule 43 (matrix_function -> ONES ( INTNUM ) .)
    /               reduce using rule 43 (matrix_function -> ONES ( INTNUM ) .)
    DOTADD          reduce using rule 43 (matrix_function -> ONES ( INTNUM ) .)
    DOTSUB          reduce using rule 43 (matrix_function -> ONES ( INTNUM ) .)
    DOTMUL          reduce using rule 43 (matrix_function -> ONES ( INTNUM ) .)
    DOTDIV          reduce using rule 43 (matrix_function -> ONES ( INTNUM ) .)
    '               reduce using rule 43 (matrix_function -> ONES ( INTNUM ) .)
    ;               reduce using rule 43 (matrix_function -> ONES ( INTNUM ) .)
    ,               reduce using rule 43 (matrix_function -> ONES ( INTNUM ) .)
    EQ              reduce using rule 43 (matrix_function -> ONES ( INTNUM ) .)
    NE              reduce using rule 43 (matrix_function -> ONES ( INTNUM ) .)
    LE              reduce using rule 43 (matrix_function -> ONES ( INTNUM ) .)
    GE              reduce using rule 43 (matrix_function -> ONES ( INTNUM ) .)
    LT              reduce using rule 43 (matrix_function -> ONES ( INTNUM ) .)
    GT              reduce using rule 43 (matrix_function -> ONES ( INTNUM ) .)
    :               reduce using rule 43 (matrix_function -> ONES ( INTNUM ) .)
    )               reduce using rule 43 (matrix_function -> ONES ( INTNUM ) .)
    {               reduce using rule 43 (matrix_function -> ONES ( INTNUM ) .)
    FOR             reduce using rule 43 (matrix_function -> ONES ( INTNUM ) .)
    WHILE           reduce using rule 43 (matrix_function -> ONES ( INTNUM ) .)
    IF              reduce using rule 43 (matrix_function -> ONES ( INTNUM ) .)
    BREAK           reduce using rule 43 (matrix_function -> ONES ( INTNUM ) .)
    CONTINUE        reduce using rule 43 (matrix_function -> ONES ( INTNUM ) .)
    RETURN          reduce using rule 43 (matrix_function -> ONES ( INTNUM ) .)
    PRINT           reduce using rule 43 (matrix_function -> ONES ( INTNUM ) .)
    ID              reduce using rule 43 (matrix_function -> ONES ( INTNUM ) .)


state 130

    (44) matrix_function -> ZEROS ( INTNUM ) .

    +               reduce using rule 44 (matrix_function -> ZEROS ( INTNUM ) .)
    -               reduce using rule 44 (matrix_function -> ZEROS ( INTNUM ) .)
    *               reduce using rule 44 (matrix_function -> ZEROS ( INTNUM ) .)
    /               reduce using rule 44 (matrix_function -> ZEROS ( INTNUM ) .)
    DOTADD          reduce using rule 44 (matrix_function -> ZEROS ( INTNUM ) .)
    DOTSUB          reduce using rule 44 (matrix_function -> ZEROS ( INTNUM ) .)
    DOTMUL          reduce using rule 44 (matrix_function -> ZEROS ( INTNUM ) .)
    DOTDIV          reduce using rule 44 (matrix_function -> ZEROS ( INTNUM ) .)
    '               reduce using rule 44 (matrix_function -> ZEROS ( INTNUM ) .)
    ;               reduce using rule 44 (matrix_function -> ZEROS ( INTNUM ) .)
    ,               reduce using rule 44 (matrix_function -> ZEROS ( INTNUM ) .)
    EQ              reduce using rule 44 (matrix_function -> ZEROS ( INTNUM ) .)
    NE              reduce using rule 44 (matrix_function -> ZEROS ( INTNUM ) .)
    LE              reduce using rule 44 (matrix_function -> ZEROS ( INTNUM ) .)
    GE              reduce using rule 44 (matrix_function -> ZEROS ( INTNUM ) .)
    LT              reduce using rule 44 (matrix_function -> ZEROS ( INTNUM ) .)
    GT              reduce using rule 44 (matrix_function -> ZEROS ( INTNUM ) .)
    :               reduce using rule 44 (matrix_function -> ZEROS ( INTNUM ) .)
    )               reduce using rule 44 (matrix_function -> ZEROS ( INTNUM ) .)
    {               reduce using rule 44 (matrix_function -> ZEROS ( INTNUM ) .)
    FOR             reduce using rule 44 (matrix_function -> ZEROS ( INTNUM ) .)
    WHILE           reduce using rule 44 (matrix_function -> ZEROS ( INTNUM ) .)
    IF              reduce using rule 44 (matrix_function -> ZEROS ( INTNUM ) .)
    BREAK           reduce using rule 44 (matrix_function -> ZEROS ( INTNUM ) .)
    CONTINUE        reduce using rule 44 (matrix_function -> ZEROS ( INTNUM ) .)
    RETURN          reduce using rule 44 (matrix_function -> ZEROS ( INTNUM ) .)
    PRINT           reduce using rule 44 (matrix_function -> ZEROS ( INTNUM ) .)
    ID              reduce using rule 44 (matrix_function -> ZEROS ( INTNUM ) .)


state 131

    (57) matrix_element -> ID [ INTNUM , INTNUM . ]

    ]               shift and go to state 136


state 132

    (8) instruction -> FOR var = expression : expression . instruction
    (62) expression -> expression . + expression
    (63) expression -> expression . - expression
    (64) expression -> expression . * expression
    (65) expression -> expression . / expression
    (66) expression -> expression . DOTADD expression
    (67) expression -> expression . DOTSUB expression
    (68) expression -> expression . DOTMUL expression
    (69) expression -> expression . DOTDIV expression
    (71) transposition -> expression . '
    (5) instruction -> . sys_instruction ;
    (6) instruction -> . assignment ;
    (7) instruction -> . { instructions }
    (8) instruction -> . FOR var = expression : expression instruction
    (9) instruction -> . WHILE ( condition ) instruction
    (10) instruction -> . IF ( condition ) instruction
    (11) instruction -> . IF ( condition ) instruction ELSE instruction
    (18) sys_instruction -> . BREAK
    (19) sys_instruction -> . CONTINUE
    (20) sys_instruction -> . RETURN expression
    (21) sys_instruction -> . PRINT print_values
    (34) assignment -> . var assignment_operator expression
    (35) assignment -> . matrix_element assignment_operator expression
    (36) assignment -> . vector_element assignment_operator expression
    (58) var -> . ID
    (57) matrix_element -> . ID [ INTNUM , INTNUM ]
    (56) vector_element -> . ID [ INTNUM ]

    +               shift and go to state 61
    -               shift and go to state 62
    *               shift and go to state 63
    /               shift and go to state 64
    DOTADD          shift and go to state 65
    DOTSUB          shift and go to state 66
    DOTMUL          shift and go to state 67
    DOTDIV          shift and go to state 68
    '               shift and go to state 69
    {               shift and go to state 6
    FOR             shift and go to state 7
    WHILE           shift and go to state 9
    IF              shift and go to state 10
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    RETURN          shift and go to state 13
    PRINT           shift and go to state 14
    ID              shift and go to state 17

    var                            shift and go to state 8
    instruction                    shift and go to state 137
    sys_instruction                shift and go to state 4
    assignment                     shift and go to state 5
    matrix_element                 shift and go to state 15
    vector_element                 shift and go to state 16

state 133

    (11) instruction -> IF ( condition ) instruction ELSE . instruction
    (5) instruction -> . sys_instruction ;
    (6) instruction -> . assignment ;
    (7) instruction -> . { instructions }
    (8) instruction -> . FOR var = expression : expression instruction
    (9) instruction -> . WHILE ( condition ) instruction
    (10) instruction -> . IF ( condition ) instruction
    (11) instruction -> . IF ( condition ) instruction ELSE instruction
    (18) sys_instruction -> . BREAK
    (19) sys_instruction -> . CONTINUE
    (20) sys_instruction -> . RETURN expression
    (21) sys_instruction -> . PRINT print_values
    (34) assignment -> . var assignment_operator expression
    (35) assignment -> . matrix_element assignment_operator expression
    (36) assignment -> . vector_element assignment_operator expression
    (58) var -> . ID
    (57) matrix_element -> . ID [ INTNUM , INTNUM ]
    (56) vector_element -> . ID [ INTNUM ]

    {               shift and go to state 6
    FOR             shift and go to state 7
    WHILE           shift and go to state 9
    IF              shift and go to state 10
    BREAK           shift and go to state 11
    CONTINUE        shift and go to state 12
    RETURN          shift and go to state 13
    PRINT           shift and go to state 14
    ID              shift and go to state 17

    instruction                    shift and go to state 138
    sys_instruction                shift and go to state 4
    assignment                     shift and go to state 5
    var                            shift and go to state 8
    matrix_element                 shift and go to state 15
    vector_element                 shift and go to state 16

state 134

    (49) variables -> variables , variable .

    ]               reduce using rule 49 (variables -> variables , variable .)
    ,               reduce using rule 49 (variables -> variables , variable .)


state 135

    (56) vector_element -> ID [ INTNUM . ]
    (57) matrix_element -> ID [ INTNUM . , INTNUM ]

    ]               shift and go to state 114
    ,               shift and go to state 113


state 136

    (57) matrix_element -> ID [ INTNUM , INTNUM ] .

    =               reduce using rule 57 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    ADDASSIGN       reduce using rule 57 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    SUBASSIGN       reduce using rule 57 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    MULASSIGN       reduce using rule 57 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    DIVASSIGN       reduce using rule 57 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    +               reduce using rule 57 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    -               reduce using rule 57 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    *               reduce using rule 57 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    /               reduce using rule 57 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    DOTADD          reduce using rule 57 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    DOTSUB          reduce using rule 57 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    DOTMUL          reduce using rule 57 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    DOTDIV          reduce using rule 57 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    '               reduce using rule 57 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    ;               reduce using rule 57 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    ,               reduce using rule 57 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    EQ              reduce using rule 57 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    NE              reduce using rule 57 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    LE              reduce using rule 57 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    GE              reduce using rule 57 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    LT              reduce using rule 57 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    GT              reduce using rule 57 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    :               reduce using rule 57 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    )               reduce using rule 57 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    {               reduce using rule 57 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    FOR             reduce using rule 57 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    WHILE           reduce using rule 57 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    IF              reduce using rule 57 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    BREAK           reduce using rule 57 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    CONTINUE        reduce using rule 57 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    RETURN          reduce using rule 57 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    PRINT           reduce using rule 57 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    ID              reduce using rule 57 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    ]               reduce using rule 57 (matrix_element -> ID [ INTNUM , INTNUM ] .)


state 137

    (8) instruction -> FOR var = expression : expression instruction .

    {               reduce using rule 8 (instruction -> FOR var = expression : expression instruction .)
    FOR             reduce using rule 8 (instruction -> FOR var = expression : expression instruction .)
    WHILE           reduce using rule 8 (instruction -> FOR var = expression : expression instruction .)
    IF              reduce using rule 8 (instruction -> FOR var = expression : expression instruction .)
    BREAK           reduce using rule 8 (instruction -> FOR var = expression : expression instruction .)
    CONTINUE        reduce using rule 8 (instruction -> FOR var = expression : expression instruction .)
    RETURN          reduce using rule 8 (instruction -> FOR var = expression : expression instruction .)
    PRINT           reduce using rule 8 (instruction -> FOR var = expression : expression instruction .)
    ID              reduce using rule 8 (instruction -> FOR var = expression : expression instruction .)
    $end            reduce using rule 8 (instruction -> FOR var = expression : expression instruction .)
    }               reduce using rule 8 (instruction -> FOR var = expression : expression instruction .)
    ELSE            reduce using rule 8 (instruction -> FOR var = expression : expression instruction .)


state 138

    (11) instruction -> IF ( condition ) instruction ELSE instruction .

    {               reduce using rule 11 (instruction -> IF ( condition ) instruction ELSE instruction .)
    FOR             reduce using rule 11 (instruction -> IF ( condition ) instruction ELSE instruction .)
    WHILE           reduce using rule 11 (instruction -> IF ( condition ) instruction ELSE instruction .)
    IF              reduce using rule 11 (instruction -> IF ( condition ) instruction ELSE instruction .)
    BREAK           reduce using rule 11 (instruction -> IF ( condition ) instruction ELSE instruction .)
    CONTINUE        reduce using rule 11 (instruction -> IF ( condition ) instruction ELSE instruction .)
    RETURN          reduce using rule 11 (instruction -> IF ( condition ) instruction ELSE instruction .)
    PRINT           reduce using rule 11 (instruction -> IF ( condition ) instruction ELSE instruction .)
    ID              reduce using rule 11 (instruction -> IF ( condition ) instruction ELSE instruction .)
    $end            reduce using rule 11 (instruction -> IF ( condition ) instruction ELSE instruction .)
    }               reduce using rule 11 (instruction -> IF ( condition ) instruction ELSE instruction .)
    ELSE            reduce using rule 11 (instruction -> IF ( condition ) instruction ELSE instruction .)

