Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     empty -> <empty>
Rule 2     program -> instructions_opt
Rule 3     instructions_opt -> instructions
Rule 4     instructions_opt -> <empty>
Rule 5     instructions -> instructions instruction
Rule 6     instructions -> instruction
Rule 7     instruction -> sys_instruction ;
Rule 8     instruction -> assignment ;
Rule 9     instruction -> { instructions }
Rule 10    sys_instruction -> RETURN expression
Rule 11    sys_instruction -> BREAK
Rule 12    sys_instruction -> CONTINUE
Rule 13    sys_instruction -> PRINT print_values
Rule 14    instruction -> IF ( condition ) instruction
Rule 15    instruction -> IF ( condition ) instruction ELSE instruction
Rule 16    instruction -> FOR var = range instruction
Rule 17    range -> expression : expression
Rule 18    instruction -> WHILE ( condition ) instruction
Rule 19    assignment -> var assignment_operator expression
Rule 20    assignment -> matrix_element assignment_operator expression
Rule 21    assignment -> vector_element assignment_operator expression
Rule 22    assignment_operator -> =
Rule 23    assignment_operator -> ADDASSIGN
Rule 24    assignment_operator -> SUBASSIGN
Rule 25    assignment_operator -> MULASSIGN
Rule 26    assignment_operator -> DIVASSIGN
Rule 27    matrix -> [ vectors ]
Rule 28    vector -> [ variables ]
Rule 29    vectors -> vectors , vector
Rule 30    vectors -> vector
Rule 31    matrix_function -> function_name ( INTNUM )
Rule 32    function_name -> EYE
Rule 33    function_name -> ONES
Rule 34    function_name -> ZEROS
Rule 35    var -> ID
Rule 36    number -> INTNUM
Rule 37    number -> FLOATNUM
Rule 38    string -> STRING
Rule 39    variable -> number
Rule 40    variable -> var
Rule 41    variable -> element
Rule 42    vector_element -> ID [ INTNUM ]
Rule 43    matrix_element -> ID [ INTNUM , INTNUM ]
Rule 44    element -> vector_element
Rule 45    element -> matrix_element
Rule 46    variables -> variables , variable
Rule 47    variables -> variable
Rule 48    expression -> number
Rule 49    expression -> var
Rule 50    expression -> matrix
Rule 51    expression -> matrix_function
Rule 52    expression -> uminus
Rule 53    expression -> transposition
Rule 54    expression -> matrix_element
Rule 55    expression -> vector_element
Rule 56    expression -> expression + expression
Rule 57    expression -> expression - expression
Rule 58    expression -> expression * expression
Rule 59    expression -> expression / expression
Rule 60    expression -> expression DOTADD expression
Rule 61    expression -> expression DOTSUB expression
Rule 62    expression -> expression DOTMUL expression
Rule 63    expression -> expression DOTDIV expression
Rule 64    condition -> expression EQ expression
Rule 65    condition -> expression NE expression
Rule 66    condition -> expression LE expression
Rule 67    condition -> expression GE expression
Rule 68    condition -> expression LT expression
Rule 69    condition -> expression GT expression
Rule 70    uminus -> - expression
Rule 71    transposition -> expression '
Rule 72    print_values -> print_values , string
Rule 73    print_values -> print_values , expression
Rule 74    print_values -> string
Rule 75    print_values -> expression

Terminals, with rules where they appear

'                    : 71
(                    : 14 15 18 31
)                    : 14 15 18 31
*                    : 58
+                    : 56
,                    : 29 43 46 72 73
-                    : 57 70
/                    : 59
:                    : 17
;                    : 7 8
=                    : 16 22
ADDASSIGN            : 23
BREAK                : 11
CONTINUE             : 12
DIVASSIGN            : 26
DOTADD               : 60
DOTDIV               : 63
DOTMUL               : 62
DOTSUB               : 61
ELSE                 : 15
EQ                   : 64
EYE                  : 32
FLOATNUM             : 37
FOR                  : 16
GE                   : 67
GT                   : 69
ID                   : 35 42 43
IF                   : 14 15
INTNUM               : 31 36 42 43 43
LE                   : 66
LT                   : 68
MULASSIGN            : 25
NE                   : 65
ONES                 : 33
PRINT                : 13
RETURN               : 10
STRING               : 38
SUBASSIGN            : 24
WHILE                : 18
ZEROS                : 34
[                    : 27 28 42 43
]                    : 27 28 42 43
error                : 
{                    : 9
}                    : 9

Nonterminals, with rules where they appear

assignment           : 8
assignment_operator  : 19 20 21
condition            : 14 15 18
element              : 41
empty                : 
expression           : 10 17 17 19 20 21 56 56 57 57 58 58 59 59 60 60 61 61 62 62 63 63 64 64 65 65 66 66 67 67 68 68 69 69 70 71 73 75
function_name        : 31
instruction          : 5 6 14 15 15 16 18
instructions         : 3 5 9
instructions_opt     : 2
matrix               : 50
matrix_element       : 20 45 54
matrix_function      : 51
number               : 39 48
print_values         : 13 72 73
program              : 0
range                : 16
string               : 72 74
sys_instruction      : 7
transposition        : 53
uminus               : 52
var                  : 16 19 40 49
variable             : 46 47
variables            : 28 46
vector               : 29 30
vector_element       : 21 44 55
vectors              : 27 29

Parsing method: LALR

state 0

    (0) S' -> . program
    (2) program -> . instructions_opt
    (3) instructions_opt -> . instructions
    (4) instructions_opt -> .
    (5) instructions -> . instructions instruction
    (6) instructions -> . instruction
    (7) instruction -> . sys_instruction ;
    (8) instruction -> . assignment ;
    (9) instruction -> . { instructions }
    (14) instruction -> . IF ( condition ) instruction
    (15) instruction -> . IF ( condition ) instruction ELSE instruction
    (16) instruction -> . FOR var = range instruction
    (18) instruction -> . WHILE ( condition ) instruction
    (10) sys_instruction -> . RETURN expression
    (11) sys_instruction -> . BREAK
    (12) sys_instruction -> . CONTINUE
    (13) sys_instruction -> . PRINT print_values
    (19) assignment -> . var assignment_operator expression
    (20) assignment -> . matrix_element assignment_operator expression
    (21) assignment -> . vector_element assignment_operator expression
    (35) var -> . ID
    (43) matrix_element -> . ID [ INTNUM , INTNUM ]
    (42) vector_element -> . ID [ INTNUM ]

    $end            reduce using rule 4 (instructions_opt -> .)
    {               shift and go to state 7
    IF              shift and go to state 8
    FOR             shift and go to state 9
    WHILE           shift and go to state 11
    RETURN          shift and go to state 12
    BREAK           shift and go to state 13
    CONTINUE        shift and go to state 14
    PRINT           shift and go to state 15
    ID              shift and go to state 18

    program                        shift and go to state 1
    instructions_opt               shift and go to state 2
    instructions                   shift and go to state 3
    instruction                    shift and go to state 4
    sys_instruction                shift and go to state 5
    assignment                     shift and go to state 6
    var                            shift and go to state 10
    matrix_element                 shift and go to state 16
    vector_element                 shift and go to state 17

state 1

    (0) S' -> program .



state 2

    (2) program -> instructions_opt .

    $end            reduce using rule 2 (program -> instructions_opt .)


state 3

    (3) instructions_opt -> instructions .
    (5) instructions -> instructions . instruction
    (7) instruction -> . sys_instruction ;
    (8) instruction -> . assignment ;
    (9) instruction -> . { instructions }
    (14) instruction -> . IF ( condition ) instruction
    (15) instruction -> . IF ( condition ) instruction ELSE instruction
    (16) instruction -> . FOR var = range instruction
    (18) instruction -> . WHILE ( condition ) instruction
    (10) sys_instruction -> . RETURN expression
    (11) sys_instruction -> . BREAK
    (12) sys_instruction -> . CONTINUE
    (13) sys_instruction -> . PRINT print_values
    (19) assignment -> . var assignment_operator expression
    (20) assignment -> . matrix_element assignment_operator expression
    (21) assignment -> . vector_element assignment_operator expression
    (35) var -> . ID
    (43) matrix_element -> . ID [ INTNUM , INTNUM ]
    (42) vector_element -> . ID [ INTNUM ]

    $end            reduce using rule 3 (instructions_opt -> instructions .)
    {               shift and go to state 7
    IF              shift and go to state 8
    FOR             shift and go to state 9
    WHILE           shift and go to state 11
    RETURN          shift and go to state 12
    BREAK           shift and go to state 13
    CONTINUE        shift and go to state 14
    PRINT           shift and go to state 15
    ID              shift and go to state 18

    instruction                    shift and go to state 19
    sys_instruction                shift and go to state 5
    assignment                     shift and go to state 6
    var                            shift and go to state 10
    matrix_element                 shift and go to state 16
    vector_element                 shift and go to state 17

state 4

    (6) instructions -> instruction .

    {               reduce using rule 6 (instructions -> instruction .)
    IF              reduce using rule 6 (instructions -> instruction .)
    FOR             reduce using rule 6 (instructions -> instruction .)
    WHILE           reduce using rule 6 (instructions -> instruction .)
    RETURN          reduce using rule 6 (instructions -> instruction .)
    BREAK           reduce using rule 6 (instructions -> instruction .)
    CONTINUE        reduce using rule 6 (instructions -> instruction .)
    PRINT           reduce using rule 6 (instructions -> instruction .)
    ID              reduce using rule 6 (instructions -> instruction .)
    $end            reduce using rule 6 (instructions -> instruction .)
    }               reduce using rule 6 (instructions -> instruction .)


state 5

    (7) instruction -> sys_instruction . ;

    ;               shift and go to state 20


state 6

    (8) instruction -> assignment . ;

    ;               shift and go to state 21


state 7

    (9) instruction -> { . instructions }
    (5) instructions -> . instructions instruction
    (6) instructions -> . instruction
    (7) instruction -> . sys_instruction ;
    (8) instruction -> . assignment ;
    (9) instruction -> . { instructions }
    (14) instruction -> . IF ( condition ) instruction
    (15) instruction -> . IF ( condition ) instruction ELSE instruction
    (16) instruction -> . FOR var = range instruction
    (18) instruction -> . WHILE ( condition ) instruction
    (10) sys_instruction -> . RETURN expression
    (11) sys_instruction -> . BREAK
    (12) sys_instruction -> . CONTINUE
    (13) sys_instruction -> . PRINT print_values
    (19) assignment -> . var assignment_operator expression
    (20) assignment -> . matrix_element assignment_operator expression
    (21) assignment -> . vector_element assignment_operator expression
    (35) var -> . ID
    (43) matrix_element -> . ID [ INTNUM , INTNUM ]
    (42) vector_element -> . ID [ INTNUM ]

    {               shift and go to state 7
    IF              shift and go to state 8
    FOR             shift and go to state 9
    WHILE           shift and go to state 11
    RETURN          shift and go to state 12
    BREAK           shift and go to state 13
    CONTINUE        shift and go to state 14
    PRINT           shift and go to state 15
    ID              shift and go to state 18

    instructions                   shift and go to state 22
    instruction                    shift and go to state 4
    sys_instruction                shift and go to state 5
    assignment                     shift and go to state 6
    var                            shift and go to state 10
    matrix_element                 shift and go to state 16
    vector_element                 shift and go to state 17

state 8

    (14) instruction -> IF . ( condition ) instruction
    (15) instruction -> IF . ( condition ) instruction ELSE instruction

    (               shift and go to state 23


state 9

    (16) instruction -> FOR . var = range instruction
    (35) var -> . ID

    ID              shift and go to state 25

    var                            shift and go to state 24

state 10

    (19) assignment -> var . assignment_operator expression
    (22) assignment_operator -> . =
    (23) assignment_operator -> . ADDASSIGN
    (24) assignment_operator -> . SUBASSIGN
    (25) assignment_operator -> . MULASSIGN
    (26) assignment_operator -> . DIVASSIGN

    =               shift and go to state 27
    ADDASSIGN       shift and go to state 28
    SUBASSIGN       shift and go to state 29
    MULASSIGN       shift and go to state 30
    DIVASSIGN       shift and go to state 31

    assignment_operator            shift and go to state 26

state 11

    (18) instruction -> WHILE . ( condition ) instruction

    (               shift and go to state 32


state 12

    (10) sys_instruction -> RETURN . expression
    (48) expression -> . number
    (49) expression -> . var
    (50) expression -> . matrix
    (51) expression -> . matrix_function
    (52) expression -> . uminus
    (53) expression -> . transposition
    (54) expression -> . matrix_element
    (55) expression -> . vector_element
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression DOTADD expression
    (61) expression -> . expression DOTSUB expression
    (62) expression -> . expression DOTMUL expression
    (63) expression -> . expression DOTDIV expression
    (36) number -> . INTNUM
    (37) number -> . FLOATNUM
    (35) var -> . ID
    (27) matrix -> . [ vectors ]
    (31) matrix_function -> . function_name ( INTNUM )
    (70) uminus -> . - expression
    (71) transposition -> . expression '
    (43) matrix_element -> . ID [ INTNUM , INTNUM ]
    (42) vector_element -> . ID [ INTNUM ]
    (32) function_name -> . EYE
    (33) function_name -> . ONES
    (34) function_name -> . ZEROS

    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    ID              shift and go to state 18
    [               shift and go to state 45
    -               shift and go to state 42
    EYE             shift and go to state 47
    ONES            shift and go to state 48
    ZEROS           shift and go to state 49

    expression                     shift and go to state 33
    number                         shift and go to state 34
    var                            shift and go to state 35
    matrix                         shift and go to state 36
    matrix_function                shift and go to state 37
    uminus                         shift and go to state 38
    transposition                  shift and go to state 39
    matrix_element                 shift and go to state 40
    vector_element                 shift and go to state 41
    function_name                  shift and go to state 46

state 13

    (11) sys_instruction -> BREAK .

    ;               reduce using rule 11 (sys_instruction -> BREAK .)


state 14

    (12) sys_instruction -> CONTINUE .

    ;               reduce using rule 12 (sys_instruction -> CONTINUE .)


state 15

    (13) sys_instruction -> PRINT . print_values
    (72) print_values -> . print_values , string
    (73) print_values -> . print_values , expression
    (74) print_values -> . string
    (75) print_values -> . expression
    (38) string -> . STRING
    (48) expression -> . number
    (49) expression -> . var
    (50) expression -> . matrix
    (51) expression -> . matrix_function
    (52) expression -> . uminus
    (53) expression -> . transposition
    (54) expression -> . matrix_element
    (55) expression -> . vector_element
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression DOTADD expression
    (61) expression -> . expression DOTSUB expression
    (62) expression -> . expression DOTMUL expression
    (63) expression -> . expression DOTDIV expression
    (36) number -> . INTNUM
    (37) number -> . FLOATNUM
    (35) var -> . ID
    (27) matrix -> . [ vectors ]
    (31) matrix_function -> . function_name ( INTNUM )
    (70) uminus -> . - expression
    (71) transposition -> . expression '
    (43) matrix_element -> . ID [ INTNUM , INTNUM ]
    (42) vector_element -> . ID [ INTNUM ]
    (32) function_name -> . EYE
    (33) function_name -> . ONES
    (34) function_name -> . ZEROS

    STRING          shift and go to state 53
    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    ID              shift and go to state 18
    [               shift and go to state 45
    -               shift and go to state 42
    EYE             shift and go to state 47
    ONES            shift and go to state 48
    ZEROS           shift and go to state 49

    print_values                   shift and go to state 50
    string                         shift and go to state 51
    expression                     shift and go to state 52
    number                         shift and go to state 34
    var                            shift and go to state 35
    matrix                         shift and go to state 36
    matrix_function                shift and go to state 37
    uminus                         shift and go to state 38
    transposition                  shift and go to state 39
    matrix_element                 shift and go to state 40
    vector_element                 shift and go to state 41
    function_name                  shift and go to state 46

state 16

    (20) assignment -> matrix_element . assignment_operator expression
    (22) assignment_operator -> . =
    (23) assignment_operator -> . ADDASSIGN
    (24) assignment_operator -> . SUBASSIGN
    (25) assignment_operator -> . MULASSIGN
    (26) assignment_operator -> . DIVASSIGN

    =               shift and go to state 27
    ADDASSIGN       shift and go to state 28
    SUBASSIGN       shift and go to state 29
    MULASSIGN       shift and go to state 30
    DIVASSIGN       shift and go to state 31

    assignment_operator            shift and go to state 54

state 17

    (21) assignment -> vector_element . assignment_operator expression
    (22) assignment_operator -> . =
    (23) assignment_operator -> . ADDASSIGN
    (24) assignment_operator -> . SUBASSIGN
    (25) assignment_operator -> . MULASSIGN
    (26) assignment_operator -> . DIVASSIGN

    =               shift and go to state 27
    ADDASSIGN       shift and go to state 28
    SUBASSIGN       shift and go to state 29
    MULASSIGN       shift and go to state 30
    DIVASSIGN       shift and go to state 31

    assignment_operator            shift and go to state 55

state 18

    (35) var -> ID .
    (43) matrix_element -> ID . [ INTNUM , INTNUM ]
    (42) vector_element -> ID . [ INTNUM ]

    =               reduce using rule 35 (var -> ID .)
    ADDASSIGN       reduce using rule 35 (var -> ID .)
    SUBASSIGN       reduce using rule 35 (var -> ID .)
    MULASSIGN       reduce using rule 35 (var -> ID .)
    DIVASSIGN       reduce using rule 35 (var -> ID .)
    +               reduce using rule 35 (var -> ID .)
    -               reduce using rule 35 (var -> ID .)
    *               reduce using rule 35 (var -> ID .)
    /               reduce using rule 35 (var -> ID .)
    DOTADD          reduce using rule 35 (var -> ID .)
    DOTSUB          reduce using rule 35 (var -> ID .)
    DOTMUL          reduce using rule 35 (var -> ID .)
    DOTDIV          reduce using rule 35 (var -> ID .)
    '               reduce using rule 35 (var -> ID .)
    ;               reduce using rule 35 (var -> ID .)
    ,               reduce using rule 35 (var -> ID .)
    EQ              reduce using rule 35 (var -> ID .)
    NE              reduce using rule 35 (var -> ID .)
    LE              reduce using rule 35 (var -> ID .)
    GE              reduce using rule 35 (var -> ID .)
    LT              reduce using rule 35 (var -> ID .)
    GT              reduce using rule 35 (var -> ID .)
    :               reduce using rule 35 (var -> ID .)
    )               reduce using rule 35 (var -> ID .)
    {               reduce using rule 35 (var -> ID .)
    IF              reduce using rule 35 (var -> ID .)
    FOR             reduce using rule 35 (var -> ID .)
    WHILE           reduce using rule 35 (var -> ID .)
    RETURN          reduce using rule 35 (var -> ID .)
    BREAK           reduce using rule 35 (var -> ID .)
    CONTINUE        reduce using rule 35 (var -> ID .)
    PRINT           reduce using rule 35 (var -> ID .)
    ID              reduce using rule 35 (var -> ID .)
    [               shift and go to state 56


state 19

    (5) instructions -> instructions instruction .

    {               reduce using rule 5 (instructions -> instructions instruction .)
    IF              reduce using rule 5 (instructions -> instructions instruction .)
    FOR             reduce using rule 5 (instructions -> instructions instruction .)
    WHILE           reduce using rule 5 (instructions -> instructions instruction .)
    RETURN          reduce using rule 5 (instructions -> instructions instruction .)
    BREAK           reduce using rule 5 (instructions -> instructions instruction .)
    CONTINUE        reduce using rule 5 (instructions -> instructions instruction .)
    PRINT           reduce using rule 5 (instructions -> instructions instruction .)
    ID              reduce using rule 5 (instructions -> instructions instruction .)
    $end            reduce using rule 5 (instructions -> instructions instruction .)
    }               reduce using rule 5 (instructions -> instructions instruction .)


state 20

    (7) instruction -> sys_instruction ; .

    {               reduce using rule 7 (instruction -> sys_instruction ; .)
    IF              reduce using rule 7 (instruction -> sys_instruction ; .)
    FOR             reduce using rule 7 (instruction -> sys_instruction ; .)
    WHILE           reduce using rule 7 (instruction -> sys_instruction ; .)
    RETURN          reduce using rule 7 (instruction -> sys_instruction ; .)
    BREAK           reduce using rule 7 (instruction -> sys_instruction ; .)
    CONTINUE        reduce using rule 7 (instruction -> sys_instruction ; .)
    PRINT           reduce using rule 7 (instruction -> sys_instruction ; .)
    ID              reduce using rule 7 (instruction -> sys_instruction ; .)
    $end            reduce using rule 7 (instruction -> sys_instruction ; .)
    }               reduce using rule 7 (instruction -> sys_instruction ; .)
    ELSE            reduce using rule 7 (instruction -> sys_instruction ; .)


state 21

    (8) instruction -> assignment ; .

    {               reduce using rule 8 (instruction -> assignment ; .)
    IF              reduce using rule 8 (instruction -> assignment ; .)
    FOR             reduce using rule 8 (instruction -> assignment ; .)
    WHILE           reduce using rule 8 (instruction -> assignment ; .)
    RETURN          reduce using rule 8 (instruction -> assignment ; .)
    BREAK           reduce using rule 8 (instruction -> assignment ; .)
    CONTINUE        reduce using rule 8 (instruction -> assignment ; .)
    PRINT           reduce using rule 8 (instruction -> assignment ; .)
    ID              reduce using rule 8 (instruction -> assignment ; .)
    $end            reduce using rule 8 (instruction -> assignment ; .)
    }               reduce using rule 8 (instruction -> assignment ; .)
    ELSE            reduce using rule 8 (instruction -> assignment ; .)


state 22

    (9) instruction -> { instructions . }
    (5) instructions -> instructions . instruction
    (7) instruction -> . sys_instruction ;
    (8) instruction -> . assignment ;
    (9) instruction -> . { instructions }
    (14) instruction -> . IF ( condition ) instruction
    (15) instruction -> . IF ( condition ) instruction ELSE instruction
    (16) instruction -> . FOR var = range instruction
    (18) instruction -> . WHILE ( condition ) instruction
    (10) sys_instruction -> . RETURN expression
    (11) sys_instruction -> . BREAK
    (12) sys_instruction -> . CONTINUE
    (13) sys_instruction -> . PRINT print_values
    (19) assignment -> . var assignment_operator expression
    (20) assignment -> . matrix_element assignment_operator expression
    (21) assignment -> . vector_element assignment_operator expression
    (35) var -> . ID
    (43) matrix_element -> . ID [ INTNUM , INTNUM ]
    (42) vector_element -> . ID [ INTNUM ]

    }               shift and go to state 57
    {               shift and go to state 7
    IF              shift and go to state 8
    FOR             shift and go to state 9
    WHILE           shift and go to state 11
    RETURN          shift and go to state 12
    BREAK           shift and go to state 13
    CONTINUE        shift and go to state 14
    PRINT           shift and go to state 15
    ID              shift and go to state 18

    instruction                    shift and go to state 19
    sys_instruction                shift and go to state 5
    assignment                     shift and go to state 6
    var                            shift and go to state 10
    matrix_element                 shift and go to state 16
    vector_element                 shift and go to state 17

state 23

    (14) instruction -> IF ( . condition ) instruction
    (15) instruction -> IF ( . condition ) instruction ELSE instruction
    (64) condition -> . expression EQ expression
    (65) condition -> . expression NE expression
    (66) condition -> . expression LE expression
    (67) condition -> . expression GE expression
    (68) condition -> . expression LT expression
    (69) condition -> . expression GT expression
    (48) expression -> . number
    (49) expression -> . var
    (50) expression -> . matrix
    (51) expression -> . matrix_function
    (52) expression -> . uminus
    (53) expression -> . transposition
    (54) expression -> . matrix_element
    (55) expression -> . vector_element
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression DOTADD expression
    (61) expression -> . expression DOTSUB expression
    (62) expression -> . expression DOTMUL expression
    (63) expression -> . expression DOTDIV expression
    (36) number -> . INTNUM
    (37) number -> . FLOATNUM
    (35) var -> . ID
    (27) matrix -> . [ vectors ]
    (31) matrix_function -> . function_name ( INTNUM )
    (70) uminus -> . - expression
    (71) transposition -> . expression '
    (43) matrix_element -> . ID [ INTNUM , INTNUM ]
    (42) vector_element -> . ID [ INTNUM ]
    (32) function_name -> . EYE
    (33) function_name -> . ONES
    (34) function_name -> . ZEROS

    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    ID              shift and go to state 18
    [               shift and go to state 45
    -               shift and go to state 42
    EYE             shift and go to state 47
    ONES            shift and go to state 48
    ZEROS           shift and go to state 49

    condition                      shift and go to state 58
    expression                     shift and go to state 59
    number                         shift and go to state 34
    var                            shift and go to state 35
    matrix                         shift and go to state 36
    matrix_function                shift and go to state 37
    uminus                         shift and go to state 38
    transposition                  shift and go to state 39
    matrix_element                 shift and go to state 40
    vector_element                 shift and go to state 41
    function_name                  shift and go to state 46

state 24

    (16) instruction -> FOR var . = range instruction

    =               shift and go to state 60


state 25

    (35) var -> ID .

    =               reduce using rule 35 (var -> ID .)


state 26

    (19) assignment -> var assignment_operator . expression
    (48) expression -> . number
    (49) expression -> . var
    (50) expression -> . matrix
    (51) expression -> . matrix_function
    (52) expression -> . uminus
    (53) expression -> . transposition
    (54) expression -> . matrix_element
    (55) expression -> . vector_element
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression DOTADD expression
    (61) expression -> . expression DOTSUB expression
    (62) expression -> . expression DOTMUL expression
    (63) expression -> . expression DOTDIV expression
    (36) number -> . INTNUM
    (37) number -> . FLOATNUM
    (35) var -> . ID
    (27) matrix -> . [ vectors ]
    (31) matrix_function -> . function_name ( INTNUM )
    (70) uminus -> . - expression
    (71) transposition -> . expression '
    (43) matrix_element -> . ID [ INTNUM , INTNUM ]
    (42) vector_element -> . ID [ INTNUM ]
    (32) function_name -> . EYE
    (33) function_name -> . ONES
    (34) function_name -> . ZEROS

    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    ID              shift and go to state 18
    [               shift and go to state 45
    -               shift and go to state 42
    EYE             shift and go to state 47
    ONES            shift and go to state 48
    ZEROS           shift and go to state 49

    var                            shift and go to state 35
    expression                     shift and go to state 61
    number                         shift and go to state 34
    matrix                         shift and go to state 36
    matrix_function                shift and go to state 37
    uminus                         shift and go to state 38
    transposition                  shift and go to state 39
    matrix_element                 shift and go to state 40
    vector_element                 shift and go to state 41
    function_name                  shift and go to state 46

state 27

    (22) assignment_operator -> = .

    INTNUM          reduce using rule 22 (assignment_operator -> = .)
    FLOATNUM        reduce using rule 22 (assignment_operator -> = .)
    ID              reduce using rule 22 (assignment_operator -> = .)
    [               reduce using rule 22 (assignment_operator -> = .)
    -               reduce using rule 22 (assignment_operator -> = .)
    EYE             reduce using rule 22 (assignment_operator -> = .)
    ONES            reduce using rule 22 (assignment_operator -> = .)
    ZEROS           reduce using rule 22 (assignment_operator -> = .)


state 28

    (23) assignment_operator -> ADDASSIGN .

    INTNUM          reduce using rule 23 (assignment_operator -> ADDASSIGN .)
    FLOATNUM        reduce using rule 23 (assignment_operator -> ADDASSIGN .)
    ID              reduce using rule 23 (assignment_operator -> ADDASSIGN .)
    [               reduce using rule 23 (assignment_operator -> ADDASSIGN .)
    -               reduce using rule 23 (assignment_operator -> ADDASSIGN .)
    EYE             reduce using rule 23 (assignment_operator -> ADDASSIGN .)
    ONES            reduce using rule 23 (assignment_operator -> ADDASSIGN .)
    ZEROS           reduce using rule 23 (assignment_operator -> ADDASSIGN .)


state 29

    (24) assignment_operator -> SUBASSIGN .

    INTNUM          reduce using rule 24 (assignment_operator -> SUBASSIGN .)
    FLOATNUM        reduce using rule 24 (assignment_operator -> SUBASSIGN .)
    ID              reduce using rule 24 (assignment_operator -> SUBASSIGN .)
    [               reduce using rule 24 (assignment_operator -> SUBASSIGN .)
    -               reduce using rule 24 (assignment_operator -> SUBASSIGN .)
    EYE             reduce using rule 24 (assignment_operator -> SUBASSIGN .)
    ONES            reduce using rule 24 (assignment_operator -> SUBASSIGN .)
    ZEROS           reduce using rule 24 (assignment_operator -> SUBASSIGN .)


state 30

    (25) assignment_operator -> MULASSIGN .

    INTNUM          reduce using rule 25 (assignment_operator -> MULASSIGN .)
    FLOATNUM        reduce using rule 25 (assignment_operator -> MULASSIGN .)
    ID              reduce using rule 25 (assignment_operator -> MULASSIGN .)
    [               reduce using rule 25 (assignment_operator -> MULASSIGN .)
    -               reduce using rule 25 (assignment_operator -> MULASSIGN .)
    EYE             reduce using rule 25 (assignment_operator -> MULASSIGN .)
    ONES            reduce using rule 25 (assignment_operator -> MULASSIGN .)
    ZEROS           reduce using rule 25 (assignment_operator -> MULASSIGN .)


state 31

    (26) assignment_operator -> DIVASSIGN .

    INTNUM          reduce using rule 26 (assignment_operator -> DIVASSIGN .)
    FLOATNUM        reduce using rule 26 (assignment_operator -> DIVASSIGN .)
    ID              reduce using rule 26 (assignment_operator -> DIVASSIGN .)
    [               reduce using rule 26 (assignment_operator -> DIVASSIGN .)
    -               reduce using rule 26 (assignment_operator -> DIVASSIGN .)
    EYE             reduce using rule 26 (assignment_operator -> DIVASSIGN .)
    ONES            reduce using rule 26 (assignment_operator -> DIVASSIGN .)
    ZEROS           reduce using rule 26 (assignment_operator -> DIVASSIGN .)


state 32

    (18) instruction -> WHILE ( . condition ) instruction
    (64) condition -> . expression EQ expression
    (65) condition -> . expression NE expression
    (66) condition -> . expression LE expression
    (67) condition -> . expression GE expression
    (68) condition -> . expression LT expression
    (69) condition -> . expression GT expression
    (48) expression -> . number
    (49) expression -> . var
    (50) expression -> . matrix
    (51) expression -> . matrix_function
    (52) expression -> . uminus
    (53) expression -> . transposition
    (54) expression -> . matrix_element
    (55) expression -> . vector_element
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression DOTADD expression
    (61) expression -> . expression DOTSUB expression
    (62) expression -> . expression DOTMUL expression
    (63) expression -> . expression DOTDIV expression
    (36) number -> . INTNUM
    (37) number -> . FLOATNUM
    (35) var -> . ID
    (27) matrix -> . [ vectors ]
    (31) matrix_function -> . function_name ( INTNUM )
    (70) uminus -> . - expression
    (71) transposition -> . expression '
    (43) matrix_element -> . ID [ INTNUM , INTNUM ]
    (42) vector_element -> . ID [ INTNUM ]
    (32) function_name -> . EYE
    (33) function_name -> . ONES
    (34) function_name -> . ZEROS

    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    ID              shift and go to state 18
    [               shift and go to state 45
    -               shift and go to state 42
    EYE             shift and go to state 47
    ONES            shift and go to state 48
    ZEROS           shift and go to state 49

    condition                      shift and go to state 62
    expression                     shift and go to state 59
    number                         shift and go to state 34
    var                            shift and go to state 35
    matrix                         shift and go to state 36
    matrix_function                shift and go to state 37
    uminus                         shift and go to state 38
    transposition                  shift and go to state 39
    matrix_element                 shift and go to state 40
    vector_element                 shift and go to state 41
    function_name                  shift and go to state 46

state 33

    (10) sys_instruction -> RETURN expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . DOTADD expression
    (61) expression -> expression . DOTSUB expression
    (62) expression -> expression . DOTMUL expression
    (63) expression -> expression . DOTDIV expression
    (71) transposition -> expression . '

    ;               reduce using rule 10 (sys_instruction -> RETURN expression .)
    +               shift and go to state 63
    -               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 66
    DOTADD          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70
    '               shift and go to state 71


state 34

    (48) expression -> number .

    +               reduce using rule 48 (expression -> number .)
    -               reduce using rule 48 (expression -> number .)
    *               reduce using rule 48 (expression -> number .)
    /               reduce using rule 48 (expression -> number .)
    DOTADD          reduce using rule 48 (expression -> number .)
    DOTSUB          reduce using rule 48 (expression -> number .)
    DOTMUL          reduce using rule 48 (expression -> number .)
    DOTDIV          reduce using rule 48 (expression -> number .)
    '               reduce using rule 48 (expression -> number .)
    ;               reduce using rule 48 (expression -> number .)
    ,               reduce using rule 48 (expression -> number .)
    EQ              reduce using rule 48 (expression -> number .)
    NE              reduce using rule 48 (expression -> number .)
    LE              reduce using rule 48 (expression -> number .)
    GE              reduce using rule 48 (expression -> number .)
    LT              reduce using rule 48 (expression -> number .)
    GT              reduce using rule 48 (expression -> number .)
    :               reduce using rule 48 (expression -> number .)
    )               reduce using rule 48 (expression -> number .)
    {               reduce using rule 48 (expression -> number .)
    IF              reduce using rule 48 (expression -> number .)
    FOR             reduce using rule 48 (expression -> number .)
    WHILE           reduce using rule 48 (expression -> number .)
    RETURN          reduce using rule 48 (expression -> number .)
    BREAK           reduce using rule 48 (expression -> number .)
    CONTINUE        reduce using rule 48 (expression -> number .)
    PRINT           reduce using rule 48 (expression -> number .)
    ID              reduce using rule 48 (expression -> number .)


state 35

    (49) expression -> var .

    +               reduce using rule 49 (expression -> var .)
    -               reduce using rule 49 (expression -> var .)
    *               reduce using rule 49 (expression -> var .)
    /               reduce using rule 49 (expression -> var .)
    DOTADD          reduce using rule 49 (expression -> var .)
    DOTSUB          reduce using rule 49 (expression -> var .)
    DOTMUL          reduce using rule 49 (expression -> var .)
    DOTDIV          reduce using rule 49 (expression -> var .)
    '               reduce using rule 49 (expression -> var .)
    ;               reduce using rule 49 (expression -> var .)
    ,               reduce using rule 49 (expression -> var .)
    EQ              reduce using rule 49 (expression -> var .)
    NE              reduce using rule 49 (expression -> var .)
    LE              reduce using rule 49 (expression -> var .)
    GE              reduce using rule 49 (expression -> var .)
    LT              reduce using rule 49 (expression -> var .)
    GT              reduce using rule 49 (expression -> var .)
    :               reduce using rule 49 (expression -> var .)
    )               reduce using rule 49 (expression -> var .)
    {               reduce using rule 49 (expression -> var .)
    IF              reduce using rule 49 (expression -> var .)
    FOR             reduce using rule 49 (expression -> var .)
    WHILE           reduce using rule 49 (expression -> var .)
    RETURN          reduce using rule 49 (expression -> var .)
    BREAK           reduce using rule 49 (expression -> var .)
    CONTINUE        reduce using rule 49 (expression -> var .)
    PRINT           reduce using rule 49 (expression -> var .)
    ID              reduce using rule 49 (expression -> var .)


state 36

    (50) expression -> matrix .

    +               reduce using rule 50 (expression -> matrix .)
    -               reduce using rule 50 (expression -> matrix .)
    *               reduce using rule 50 (expression -> matrix .)
    /               reduce using rule 50 (expression -> matrix .)
    DOTADD          reduce using rule 50 (expression -> matrix .)
    DOTSUB          reduce using rule 50 (expression -> matrix .)
    DOTMUL          reduce using rule 50 (expression -> matrix .)
    DOTDIV          reduce using rule 50 (expression -> matrix .)
    '               reduce using rule 50 (expression -> matrix .)
    ;               reduce using rule 50 (expression -> matrix .)
    ,               reduce using rule 50 (expression -> matrix .)
    EQ              reduce using rule 50 (expression -> matrix .)
    NE              reduce using rule 50 (expression -> matrix .)
    LE              reduce using rule 50 (expression -> matrix .)
    GE              reduce using rule 50 (expression -> matrix .)
    LT              reduce using rule 50 (expression -> matrix .)
    GT              reduce using rule 50 (expression -> matrix .)
    :               reduce using rule 50 (expression -> matrix .)
    )               reduce using rule 50 (expression -> matrix .)
    {               reduce using rule 50 (expression -> matrix .)
    IF              reduce using rule 50 (expression -> matrix .)
    FOR             reduce using rule 50 (expression -> matrix .)
    WHILE           reduce using rule 50 (expression -> matrix .)
    RETURN          reduce using rule 50 (expression -> matrix .)
    BREAK           reduce using rule 50 (expression -> matrix .)
    CONTINUE        reduce using rule 50 (expression -> matrix .)
    PRINT           reduce using rule 50 (expression -> matrix .)
    ID              reduce using rule 50 (expression -> matrix .)


state 37

    (51) expression -> matrix_function .

    +               reduce using rule 51 (expression -> matrix_function .)
    -               reduce using rule 51 (expression -> matrix_function .)
    *               reduce using rule 51 (expression -> matrix_function .)
    /               reduce using rule 51 (expression -> matrix_function .)
    DOTADD          reduce using rule 51 (expression -> matrix_function .)
    DOTSUB          reduce using rule 51 (expression -> matrix_function .)
    DOTMUL          reduce using rule 51 (expression -> matrix_function .)
    DOTDIV          reduce using rule 51 (expression -> matrix_function .)
    '               reduce using rule 51 (expression -> matrix_function .)
    ;               reduce using rule 51 (expression -> matrix_function .)
    ,               reduce using rule 51 (expression -> matrix_function .)
    EQ              reduce using rule 51 (expression -> matrix_function .)
    NE              reduce using rule 51 (expression -> matrix_function .)
    LE              reduce using rule 51 (expression -> matrix_function .)
    GE              reduce using rule 51 (expression -> matrix_function .)
    LT              reduce using rule 51 (expression -> matrix_function .)
    GT              reduce using rule 51 (expression -> matrix_function .)
    :               reduce using rule 51 (expression -> matrix_function .)
    )               reduce using rule 51 (expression -> matrix_function .)
    {               reduce using rule 51 (expression -> matrix_function .)
    IF              reduce using rule 51 (expression -> matrix_function .)
    FOR             reduce using rule 51 (expression -> matrix_function .)
    WHILE           reduce using rule 51 (expression -> matrix_function .)
    RETURN          reduce using rule 51 (expression -> matrix_function .)
    BREAK           reduce using rule 51 (expression -> matrix_function .)
    CONTINUE        reduce using rule 51 (expression -> matrix_function .)
    PRINT           reduce using rule 51 (expression -> matrix_function .)
    ID              reduce using rule 51 (expression -> matrix_function .)


state 38

    (52) expression -> uminus .

    +               reduce using rule 52 (expression -> uminus .)
    -               reduce using rule 52 (expression -> uminus .)
    *               reduce using rule 52 (expression -> uminus .)
    /               reduce using rule 52 (expression -> uminus .)
    DOTADD          reduce using rule 52 (expression -> uminus .)
    DOTSUB          reduce using rule 52 (expression -> uminus .)
    DOTMUL          reduce using rule 52 (expression -> uminus .)
    DOTDIV          reduce using rule 52 (expression -> uminus .)
    '               reduce using rule 52 (expression -> uminus .)
    ;               reduce using rule 52 (expression -> uminus .)
    ,               reduce using rule 52 (expression -> uminus .)
    EQ              reduce using rule 52 (expression -> uminus .)
    NE              reduce using rule 52 (expression -> uminus .)
    LE              reduce using rule 52 (expression -> uminus .)
    GE              reduce using rule 52 (expression -> uminus .)
    LT              reduce using rule 52 (expression -> uminus .)
    GT              reduce using rule 52 (expression -> uminus .)
    :               reduce using rule 52 (expression -> uminus .)
    )               reduce using rule 52 (expression -> uminus .)
    {               reduce using rule 52 (expression -> uminus .)
    IF              reduce using rule 52 (expression -> uminus .)
    FOR             reduce using rule 52 (expression -> uminus .)
    WHILE           reduce using rule 52 (expression -> uminus .)
    RETURN          reduce using rule 52 (expression -> uminus .)
    BREAK           reduce using rule 52 (expression -> uminus .)
    CONTINUE        reduce using rule 52 (expression -> uminus .)
    PRINT           reduce using rule 52 (expression -> uminus .)
    ID              reduce using rule 52 (expression -> uminus .)


state 39

    (53) expression -> transposition .

    +               reduce using rule 53 (expression -> transposition .)
    -               reduce using rule 53 (expression -> transposition .)
    *               reduce using rule 53 (expression -> transposition .)
    /               reduce using rule 53 (expression -> transposition .)
    DOTADD          reduce using rule 53 (expression -> transposition .)
    DOTSUB          reduce using rule 53 (expression -> transposition .)
    DOTMUL          reduce using rule 53 (expression -> transposition .)
    DOTDIV          reduce using rule 53 (expression -> transposition .)
    '               reduce using rule 53 (expression -> transposition .)
    ;               reduce using rule 53 (expression -> transposition .)
    ,               reduce using rule 53 (expression -> transposition .)
    EQ              reduce using rule 53 (expression -> transposition .)
    NE              reduce using rule 53 (expression -> transposition .)
    LE              reduce using rule 53 (expression -> transposition .)
    GE              reduce using rule 53 (expression -> transposition .)
    LT              reduce using rule 53 (expression -> transposition .)
    GT              reduce using rule 53 (expression -> transposition .)
    :               reduce using rule 53 (expression -> transposition .)
    )               reduce using rule 53 (expression -> transposition .)
    {               reduce using rule 53 (expression -> transposition .)
    IF              reduce using rule 53 (expression -> transposition .)
    FOR             reduce using rule 53 (expression -> transposition .)
    WHILE           reduce using rule 53 (expression -> transposition .)
    RETURN          reduce using rule 53 (expression -> transposition .)
    BREAK           reduce using rule 53 (expression -> transposition .)
    CONTINUE        reduce using rule 53 (expression -> transposition .)
    PRINT           reduce using rule 53 (expression -> transposition .)
    ID              reduce using rule 53 (expression -> transposition .)


state 40

    (54) expression -> matrix_element .

    +               reduce using rule 54 (expression -> matrix_element .)
    -               reduce using rule 54 (expression -> matrix_element .)
    *               reduce using rule 54 (expression -> matrix_element .)
    /               reduce using rule 54 (expression -> matrix_element .)
    DOTADD          reduce using rule 54 (expression -> matrix_element .)
    DOTSUB          reduce using rule 54 (expression -> matrix_element .)
    DOTMUL          reduce using rule 54 (expression -> matrix_element .)
    DOTDIV          reduce using rule 54 (expression -> matrix_element .)
    '               reduce using rule 54 (expression -> matrix_element .)
    ;               reduce using rule 54 (expression -> matrix_element .)
    ,               reduce using rule 54 (expression -> matrix_element .)
    EQ              reduce using rule 54 (expression -> matrix_element .)
    NE              reduce using rule 54 (expression -> matrix_element .)
    LE              reduce using rule 54 (expression -> matrix_element .)
    GE              reduce using rule 54 (expression -> matrix_element .)
    LT              reduce using rule 54 (expression -> matrix_element .)
    GT              reduce using rule 54 (expression -> matrix_element .)
    :               reduce using rule 54 (expression -> matrix_element .)
    )               reduce using rule 54 (expression -> matrix_element .)
    {               reduce using rule 54 (expression -> matrix_element .)
    IF              reduce using rule 54 (expression -> matrix_element .)
    FOR             reduce using rule 54 (expression -> matrix_element .)
    WHILE           reduce using rule 54 (expression -> matrix_element .)
    RETURN          reduce using rule 54 (expression -> matrix_element .)
    BREAK           reduce using rule 54 (expression -> matrix_element .)
    CONTINUE        reduce using rule 54 (expression -> matrix_element .)
    PRINT           reduce using rule 54 (expression -> matrix_element .)
    ID              reduce using rule 54 (expression -> matrix_element .)


state 41

    (55) expression -> vector_element .

    +               reduce using rule 55 (expression -> vector_element .)
    -               reduce using rule 55 (expression -> vector_element .)
    *               reduce using rule 55 (expression -> vector_element .)
    /               reduce using rule 55 (expression -> vector_element .)
    DOTADD          reduce using rule 55 (expression -> vector_element .)
    DOTSUB          reduce using rule 55 (expression -> vector_element .)
    DOTMUL          reduce using rule 55 (expression -> vector_element .)
    DOTDIV          reduce using rule 55 (expression -> vector_element .)
    '               reduce using rule 55 (expression -> vector_element .)
    ;               reduce using rule 55 (expression -> vector_element .)
    ,               reduce using rule 55 (expression -> vector_element .)
    EQ              reduce using rule 55 (expression -> vector_element .)
    NE              reduce using rule 55 (expression -> vector_element .)
    LE              reduce using rule 55 (expression -> vector_element .)
    GE              reduce using rule 55 (expression -> vector_element .)
    LT              reduce using rule 55 (expression -> vector_element .)
    GT              reduce using rule 55 (expression -> vector_element .)
    :               reduce using rule 55 (expression -> vector_element .)
    )               reduce using rule 55 (expression -> vector_element .)
    {               reduce using rule 55 (expression -> vector_element .)
    IF              reduce using rule 55 (expression -> vector_element .)
    FOR             reduce using rule 55 (expression -> vector_element .)
    WHILE           reduce using rule 55 (expression -> vector_element .)
    RETURN          reduce using rule 55 (expression -> vector_element .)
    BREAK           reduce using rule 55 (expression -> vector_element .)
    CONTINUE        reduce using rule 55 (expression -> vector_element .)
    PRINT           reduce using rule 55 (expression -> vector_element .)
    ID              reduce using rule 55 (expression -> vector_element .)


state 42

    (70) uminus -> - . expression
    (48) expression -> . number
    (49) expression -> . var
    (50) expression -> . matrix
    (51) expression -> . matrix_function
    (52) expression -> . uminus
    (53) expression -> . transposition
    (54) expression -> . matrix_element
    (55) expression -> . vector_element
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression DOTADD expression
    (61) expression -> . expression DOTSUB expression
    (62) expression -> . expression DOTMUL expression
    (63) expression -> . expression DOTDIV expression
    (36) number -> . INTNUM
    (37) number -> . FLOATNUM
    (35) var -> . ID
    (27) matrix -> . [ vectors ]
    (31) matrix_function -> . function_name ( INTNUM )
    (70) uminus -> . - expression
    (71) transposition -> . expression '
    (43) matrix_element -> . ID [ INTNUM , INTNUM ]
    (42) vector_element -> . ID [ INTNUM ]
    (32) function_name -> . EYE
    (33) function_name -> . ONES
    (34) function_name -> . ZEROS

    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    ID              shift and go to state 18
    [               shift and go to state 45
    -               shift and go to state 42
    EYE             shift and go to state 47
    ONES            shift and go to state 48
    ZEROS           shift and go to state 49

    expression                     shift and go to state 72
    number                         shift and go to state 34
    var                            shift and go to state 35
    matrix                         shift and go to state 36
    matrix_function                shift and go to state 37
    uminus                         shift and go to state 38
    transposition                  shift and go to state 39
    matrix_element                 shift and go to state 40
    vector_element                 shift and go to state 41
    function_name                  shift and go to state 46

state 43

    (36) number -> INTNUM .

    +               reduce using rule 36 (number -> INTNUM .)
    -               reduce using rule 36 (number -> INTNUM .)
    *               reduce using rule 36 (number -> INTNUM .)
    /               reduce using rule 36 (number -> INTNUM .)
    DOTADD          reduce using rule 36 (number -> INTNUM .)
    DOTSUB          reduce using rule 36 (number -> INTNUM .)
    DOTMUL          reduce using rule 36 (number -> INTNUM .)
    DOTDIV          reduce using rule 36 (number -> INTNUM .)
    '               reduce using rule 36 (number -> INTNUM .)
    ;               reduce using rule 36 (number -> INTNUM .)
    ,               reduce using rule 36 (number -> INTNUM .)
    EQ              reduce using rule 36 (number -> INTNUM .)
    NE              reduce using rule 36 (number -> INTNUM .)
    LE              reduce using rule 36 (number -> INTNUM .)
    GE              reduce using rule 36 (number -> INTNUM .)
    LT              reduce using rule 36 (number -> INTNUM .)
    GT              reduce using rule 36 (number -> INTNUM .)
    :               reduce using rule 36 (number -> INTNUM .)
    )               reduce using rule 36 (number -> INTNUM .)
    {               reduce using rule 36 (number -> INTNUM .)
    IF              reduce using rule 36 (number -> INTNUM .)
    FOR             reduce using rule 36 (number -> INTNUM .)
    WHILE           reduce using rule 36 (number -> INTNUM .)
    RETURN          reduce using rule 36 (number -> INTNUM .)
    BREAK           reduce using rule 36 (number -> INTNUM .)
    CONTINUE        reduce using rule 36 (number -> INTNUM .)
    PRINT           reduce using rule 36 (number -> INTNUM .)
    ID              reduce using rule 36 (number -> INTNUM .)
    ]               reduce using rule 36 (number -> INTNUM .)


state 44

    (37) number -> FLOATNUM .

    +               reduce using rule 37 (number -> FLOATNUM .)
    -               reduce using rule 37 (number -> FLOATNUM .)
    *               reduce using rule 37 (number -> FLOATNUM .)
    /               reduce using rule 37 (number -> FLOATNUM .)
    DOTADD          reduce using rule 37 (number -> FLOATNUM .)
    DOTSUB          reduce using rule 37 (number -> FLOATNUM .)
    DOTMUL          reduce using rule 37 (number -> FLOATNUM .)
    DOTDIV          reduce using rule 37 (number -> FLOATNUM .)
    '               reduce using rule 37 (number -> FLOATNUM .)
    ;               reduce using rule 37 (number -> FLOATNUM .)
    ,               reduce using rule 37 (number -> FLOATNUM .)
    EQ              reduce using rule 37 (number -> FLOATNUM .)
    NE              reduce using rule 37 (number -> FLOATNUM .)
    LE              reduce using rule 37 (number -> FLOATNUM .)
    GE              reduce using rule 37 (number -> FLOATNUM .)
    LT              reduce using rule 37 (number -> FLOATNUM .)
    GT              reduce using rule 37 (number -> FLOATNUM .)
    :               reduce using rule 37 (number -> FLOATNUM .)
    )               reduce using rule 37 (number -> FLOATNUM .)
    {               reduce using rule 37 (number -> FLOATNUM .)
    IF              reduce using rule 37 (number -> FLOATNUM .)
    FOR             reduce using rule 37 (number -> FLOATNUM .)
    WHILE           reduce using rule 37 (number -> FLOATNUM .)
    RETURN          reduce using rule 37 (number -> FLOATNUM .)
    BREAK           reduce using rule 37 (number -> FLOATNUM .)
    CONTINUE        reduce using rule 37 (number -> FLOATNUM .)
    PRINT           reduce using rule 37 (number -> FLOATNUM .)
    ID              reduce using rule 37 (number -> FLOATNUM .)
    ]               reduce using rule 37 (number -> FLOATNUM .)


state 45

    (27) matrix -> [ . vectors ]
    (29) vectors -> . vectors , vector
    (30) vectors -> . vector
    (28) vector -> . [ variables ]

    [               shift and go to state 73

    vectors                        shift and go to state 74
    vector                         shift and go to state 75

state 46

    (31) matrix_function -> function_name . ( INTNUM )

    (               shift and go to state 76


state 47

    (32) function_name -> EYE .

    (               reduce using rule 32 (function_name -> EYE .)


state 48

    (33) function_name -> ONES .

    (               reduce using rule 33 (function_name -> ONES .)


state 49

    (34) function_name -> ZEROS .

    (               reduce using rule 34 (function_name -> ZEROS .)


state 50

    (13) sys_instruction -> PRINT print_values .
    (72) print_values -> print_values . , string
    (73) print_values -> print_values . , expression

    ;               reduce using rule 13 (sys_instruction -> PRINT print_values .)
    ,               shift and go to state 77


state 51

    (74) print_values -> string .

    ,               reduce using rule 74 (print_values -> string .)
    ;               reduce using rule 74 (print_values -> string .)


state 52

    (75) print_values -> expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . DOTADD expression
    (61) expression -> expression . DOTSUB expression
    (62) expression -> expression . DOTMUL expression
    (63) expression -> expression . DOTDIV expression
    (71) transposition -> expression . '

    ,               reduce using rule 75 (print_values -> expression .)
    ;               reduce using rule 75 (print_values -> expression .)
    +               shift and go to state 63
    -               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 66
    DOTADD          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70
    '               shift and go to state 71


state 53

    (38) string -> STRING .

    ,               reduce using rule 38 (string -> STRING .)
    ;               reduce using rule 38 (string -> STRING .)


state 54

    (20) assignment -> matrix_element assignment_operator . expression
    (48) expression -> . number
    (49) expression -> . var
    (50) expression -> . matrix
    (51) expression -> . matrix_function
    (52) expression -> . uminus
    (53) expression -> . transposition
    (54) expression -> . matrix_element
    (55) expression -> . vector_element
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression DOTADD expression
    (61) expression -> . expression DOTSUB expression
    (62) expression -> . expression DOTMUL expression
    (63) expression -> . expression DOTDIV expression
    (36) number -> . INTNUM
    (37) number -> . FLOATNUM
    (35) var -> . ID
    (27) matrix -> . [ vectors ]
    (31) matrix_function -> . function_name ( INTNUM )
    (70) uminus -> . - expression
    (71) transposition -> . expression '
    (43) matrix_element -> . ID [ INTNUM , INTNUM ]
    (42) vector_element -> . ID [ INTNUM ]
    (32) function_name -> . EYE
    (33) function_name -> . ONES
    (34) function_name -> . ZEROS

    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    ID              shift and go to state 18
    [               shift and go to state 45
    -               shift and go to state 42
    EYE             shift and go to state 47
    ONES            shift and go to state 48
    ZEROS           shift and go to state 49

    matrix_element                 shift and go to state 40
    expression                     shift and go to state 78
    number                         shift and go to state 34
    var                            shift and go to state 35
    matrix                         shift and go to state 36
    matrix_function                shift and go to state 37
    uminus                         shift and go to state 38
    transposition                  shift and go to state 39
    vector_element                 shift and go to state 41
    function_name                  shift and go to state 46

state 55

    (21) assignment -> vector_element assignment_operator . expression
    (48) expression -> . number
    (49) expression -> . var
    (50) expression -> . matrix
    (51) expression -> . matrix_function
    (52) expression -> . uminus
    (53) expression -> . transposition
    (54) expression -> . matrix_element
    (55) expression -> . vector_element
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression DOTADD expression
    (61) expression -> . expression DOTSUB expression
    (62) expression -> . expression DOTMUL expression
    (63) expression -> . expression DOTDIV expression
    (36) number -> . INTNUM
    (37) number -> . FLOATNUM
    (35) var -> . ID
    (27) matrix -> . [ vectors ]
    (31) matrix_function -> . function_name ( INTNUM )
    (70) uminus -> . - expression
    (71) transposition -> . expression '
    (43) matrix_element -> . ID [ INTNUM , INTNUM ]
    (42) vector_element -> . ID [ INTNUM ]
    (32) function_name -> . EYE
    (33) function_name -> . ONES
    (34) function_name -> . ZEROS

    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    ID              shift and go to state 18
    [               shift and go to state 45
    -               shift and go to state 42
    EYE             shift and go to state 47
    ONES            shift and go to state 48
    ZEROS           shift and go to state 49

    vector_element                 shift and go to state 41
    expression                     shift and go to state 79
    number                         shift and go to state 34
    var                            shift and go to state 35
    matrix                         shift and go to state 36
    matrix_function                shift and go to state 37
    uminus                         shift and go to state 38
    transposition                  shift and go to state 39
    matrix_element                 shift and go to state 40
    function_name                  shift and go to state 46

state 56

    (43) matrix_element -> ID [ . INTNUM , INTNUM ]
    (42) vector_element -> ID [ . INTNUM ]

    INTNUM          shift and go to state 80


state 57

    (9) instruction -> { instructions } .

    {               reduce using rule 9 (instruction -> { instructions } .)
    IF              reduce using rule 9 (instruction -> { instructions } .)
    FOR             reduce using rule 9 (instruction -> { instructions } .)
    WHILE           reduce using rule 9 (instruction -> { instructions } .)
    RETURN          reduce using rule 9 (instruction -> { instructions } .)
    BREAK           reduce using rule 9 (instruction -> { instructions } .)
    CONTINUE        reduce using rule 9 (instruction -> { instructions } .)
    PRINT           reduce using rule 9 (instruction -> { instructions } .)
    ID              reduce using rule 9 (instruction -> { instructions } .)
    $end            reduce using rule 9 (instruction -> { instructions } .)
    }               reduce using rule 9 (instruction -> { instructions } .)
    ELSE            reduce using rule 9 (instruction -> { instructions } .)


state 58

    (14) instruction -> IF ( condition . ) instruction
    (15) instruction -> IF ( condition . ) instruction ELSE instruction

    )               shift and go to state 81


state 59

    (64) condition -> expression . EQ expression
    (65) condition -> expression . NE expression
    (66) condition -> expression . LE expression
    (67) condition -> expression . GE expression
    (68) condition -> expression . LT expression
    (69) condition -> expression . GT expression
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . DOTADD expression
    (61) expression -> expression . DOTSUB expression
    (62) expression -> expression . DOTMUL expression
    (63) expression -> expression . DOTDIV expression
    (71) transposition -> expression . '

    EQ              shift and go to state 82
    NE              shift and go to state 83
    LE              shift and go to state 84
    GE              shift and go to state 85
    LT              shift and go to state 86
    GT              shift and go to state 87
    +               shift and go to state 63
    -               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 66
    DOTADD          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70
    '               shift and go to state 71


state 60

    (16) instruction -> FOR var = . range instruction
    (17) range -> . expression : expression
    (48) expression -> . number
    (49) expression -> . var
    (50) expression -> . matrix
    (51) expression -> . matrix_function
    (52) expression -> . uminus
    (53) expression -> . transposition
    (54) expression -> . matrix_element
    (55) expression -> . vector_element
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression DOTADD expression
    (61) expression -> . expression DOTSUB expression
    (62) expression -> . expression DOTMUL expression
    (63) expression -> . expression DOTDIV expression
    (36) number -> . INTNUM
    (37) number -> . FLOATNUM
    (35) var -> . ID
    (27) matrix -> . [ vectors ]
    (31) matrix_function -> . function_name ( INTNUM )
    (70) uminus -> . - expression
    (71) transposition -> . expression '
    (43) matrix_element -> . ID [ INTNUM , INTNUM ]
    (42) vector_element -> . ID [ INTNUM ]
    (32) function_name -> . EYE
    (33) function_name -> . ONES
    (34) function_name -> . ZEROS

    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    ID              shift and go to state 18
    [               shift and go to state 45
    -               shift and go to state 42
    EYE             shift and go to state 47
    ONES            shift and go to state 48
    ZEROS           shift and go to state 49

    var                            shift and go to state 35
    range                          shift and go to state 88
    expression                     shift and go to state 89
    number                         shift and go to state 34
    matrix                         shift and go to state 36
    matrix_function                shift and go to state 37
    uminus                         shift and go to state 38
    transposition                  shift and go to state 39
    matrix_element                 shift and go to state 40
    vector_element                 shift and go to state 41
    function_name                  shift and go to state 46

state 61

    (19) assignment -> var assignment_operator expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . DOTADD expression
    (61) expression -> expression . DOTSUB expression
    (62) expression -> expression . DOTMUL expression
    (63) expression -> expression . DOTDIV expression
    (71) transposition -> expression . '

    ;               reduce using rule 19 (assignment -> var assignment_operator expression .)
    +               shift and go to state 63
    -               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 66
    DOTADD          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70
    '               shift and go to state 71


state 62

    (18) instruction -> WHILE ( condition . ) instruction

    )               shift and go to state 90


state 63

    (56) expression -> expression + . expression
    (48) expression -> . number
    (49) expression -> . var
    (50) expression -> . matrix
    (51) expression -> . matrix_function
    (52) expression -> . uminus
    (53) expression -> . transposition
    (54) expression -> . matrix_element
    (55) expression -> . vector_element
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression DOTADD expression
    (61) expression -> . expression DOTSUB expression
    (62) expression -> . expression DOTMUL expression
    (63) expression -> . expression DOTDIV expression
    (36) number -> . INTNUM
    (37) number -> . FLOATNUM
    (35) var -> . ID
    (27) matrix -> . [ vectors ]
    (31) matrix_function -> . function_name ( INTNUM )
    (70) uminus -> . - expression
    (71) transposition -> . expression '
    (43) matrix_element -> . ID [ INTNUM , INTNUM ]
    (42) vector_element -> . ID [ INTNUM ]
    (32) function_name -> . EYE
    (33) function_name -> . ONES
    (34) function_name -> . ZEROS

    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    ID              shift and go to state 18
    [               shift and go to state 45
    -               shift and go to state 42
    EYE             shift and go to state 47
    ONES            shift and go to state 48
    ZEROS           shift and go to state 49

    expression                     shift and go to state 91
    number                         shift and go to state 34
    var                            shift and go to state 35
    matrix                         shift and go to state 36
    matrix_function                shift and go to state 37
    uminus                         shift and go to state 38
    transposition                  shift and go to state 39
    matrix_element                 shift and go to state 40
    vector_element                 shift and go to state 41
    function_name                  shift and go to state 46

state 64

    (57) expression -> expression - . expression
    (48) expression -> . number
    (49) expression -> . var
    (50) expression -> . matrix
    (51) expression -> . matrix_function
    (52) expression -> . uminus
    (53) expression -> . transposition
    (54) expression -> . matrix_element
    (55) expression -> . vector_element
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression DOTADD expression
    (61) expression -> . expression DOTSUB expression
    (62) expression -> . expression DOTMUL expression
    (63) expression -> . expression DOTDIV expression
    (36) number -> . INTNUM
    (37) number -> . FLOATNUM
    (35) var -> . ID
    (27) matrix -> . [ vectors ]
    (31) matrix_function -> . function_name ( INTNUM )
    (70) uminus -> . - expression
    (71) transposition -> . expression '
    (43) matrix_element -> . ID [ INTNUM , INTNUM ]
    (42) vector_element -> . ID [ INTNUM ]
    (32) function_name -> . EYE
    (33) function_name -> . ONES
    (34) function_name -> . ZEROS

    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    ID              shift and go to state 18
    [               shift and go to state 45
    -               shift and go to state 42
    EYE             shift and go to state 47
    ONES            shift and go to state 48
    ZEROS           shift and go to state 49

    expression                     shift and go to state 92
    number                         shift and go to state 34
    var                            shift and go to state 35
    matrix                         shift and go to state 36
    matrix_function                shift and go to state 37
    uminus                         shift and go to state 38
    transposition                  shift and go to state 39
    matrix_element                 shift and go to state 40
    vector_element                 shift and go to state 41
    function_name                  shift and go to state 46

state 65

    (58) expression -> expression * . expression
    (48) expression -> . number
    (49) expression -> . var
    (50) expression -> . matrix
    (51) expression -> . matrix_function
    (52) expression -> . uminus
    (53) expression -> . transposition
    (54) expression -> . matrix_element
    (55) expression -> . vector_element
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression DOTADD expression
    (61) expression -> . expression DOTSUB expression
    (62) expression -> . expression DOTMUL expression
    (63) expression -> . expression DOTDIV expression
    (36) number -> . INTNUM
    (37) number -> . FLOATNUM
    (35) var -> . ID
    (27) matrix -> . [ vectors ]
    (31) matrix_function -> . function_name ( INTNUM )
    (70) uminus -> . - expression
    (71) transposition -> . expression '
    (43) matrix_element -> . ID [ INTNUM , INTNUM ]
    (42) vector_element -> . ID [ INTNUM ]
    (32) function_name -> . EYE
    (33) function_name -> . ONES
    (34) function_name -> . ZEROS

    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    ID              shift and go to state 18
    [               shift and go to state 45
    -               shift and go to state 42
    EYE             shift and go to state 47
    ONES            shift and go to state 48
    ZEROS           shift and go to state 49

    expression                     shift and go to state 93
    number                         shift and go to state 34
    var                            shift and go to state 35
    matrix                         shift and go to state 36
    matrix_function                shift and go to state 37
    uminus                         shift and go to state 38
    transposition                  shift and go to state 39
    matrix_element                 shift and go to state 40
    vector_element                 shift and go to state 41
    function_name                  shift and go to state 46

state 66

    (59) expression -> expression / . expression
    (48) expression -> . number
    (49) expression -> . var
    (50) expression -> . matrix
    (51) expression -> . matrix_function
    (52) expression -> . uminus
    (53) expression -> . transposition
    (54) expression -> . matrix_element
    (55) expression -> . vector_element
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression DOTADD expression
    (61) expression -> . expression DOTSUB expression
    (62) expression -> . expression DOTMUL expression
    (63) expression -> . expression DOTDIV expression
    (36) number -> . INTNUM
    (37) number -> . FLOATNUM
    (35) var -> . ID
    (27) matrix -> . [ vectors ]
    (31) matrix_function -> . function_name ( INTNUM )
    (70) uminus -> . - expression
    (71) transposition -> . expression '
    (43) matrix_element -> . ID [ INTNUM , INTNUM ]
    (42) vector_element -> . ID [ INTNUM ]
    (32) function_name -> . EYE
    (33) function_name -> . ONES
    (34) function_name -> . ZEROS

    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    ID              shift and go to state 18
    [               shift and go to state 45
    -               shift and go to state 42
    EYE             shift and go to state 47
    ONES            shift and go to state 48
    ZEROS           shift and go to state 49

    expression                     shift and go to state 94
    number                         shift and go to state 34
    var                            shift and go to state 35
    matrix                         shift and go to state 36
    matrix_function                shift and go to state 37
    uminus                         shift and go to state 38
    transposition                  shift and go to state 39
    matrix_element                 shift and go to state 40
    vector_element                 shift and go to state 41
    function_name                  shift and go to state 46

state 67

    (60) expression -> expression DOTADD . expression
    (48) expression -> . number
    (49) expression -> . var
    (50) expression -> . matrix
    (51) expression -> . matrix_function
    (52) expression -> . uminus
    (53) expression -> . transposition
    (54) expression -> . matrix_element
    (55) expression -> . vector_element
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression DOTADD expression
    (61) expression -> . expression DOTSUB expression
    (62) expression -> . expression DOTMUL expression
    (63) expression -> . expression DOTDIV expression
    (36) number -> . INTNUM
    (37) number -> . FLOATNUM
    (35) var -> . ID
    (27) matrix -> . [ vectors ]
    (31) matrix_function -> . function_name ( INTNUM )
    (70) uminus -> . - expression
    (71) transposition -> . expression '
    (43) matrix_element -> . ID [ INTNUM , INTNUM ]
    (42) vector_element -> . ID [ INTNUM ]
    (32) function_name -> . EYE
    (33) function_name -> . ONES
    (34) function_name -> . ZEROS

    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    ID              shift and go to state 18
    [               shift and go to state 45
    -               shift and go to state 42
    EYE             shift and go to state 47
    ONES            shift and go to state 48
    ZEROS           shift and go to state 49

    expression                     shift and go to state 95
    number                         shift and go to state 34
    var                            shift and go to state 35
    matrix                         shift and go to state 36
    matrix_function                shift and go to state 37
    uminus                         shift and go to state 38
    transposition                  shift and go to state 39
    matrix_element                 shift and go to state 40
    vector_element                 shift and go to state 41
    function_name                  shift and go to state 46

state 68

    (61) expression -> expression DOTSUB . expression
    (48) expression -> . number
    (49) expression -> . var
    (50) expression -> . matrix
    (51) expression -> . matrix_function
    (52) expression -> . uminus
    (53) expression -> . transposition
    (54) expression -> . matrix_element
    (55) expression -> . vector_element
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression DOTADD expression
    (61) expression -> . expression DOTSUB expression
    (62) expression -> . expression DOTMUL expression
    (63) expression -> . expression DOTDIV expression
    (36) number -> . INTNUM
    (37) number -> . FLOATNUM
    (35) var -> . ID
    (27) matrix -> . [ vectors ]
    (31) matrix_function -> . function_name ( INTNUM )
    (70) uminus -> . - expression
    (71) transposition -> . expression '
    (43) matrix_element -> . ID [ INTNUM , INTNUM ]
    (42) vector_element -> . ID [ INTNUM ]
    (32) function_name -> . EYE
    (33) function_name -> . ONES
    (34) function_name -> . ZEROS

    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    ID              shift and go to state 18
    [               shift and go to state 45
    -               shift and go to state 42
    EYE             shift and go to state 47
    ONES            shift and go to state 48
    ZEROS           shift and go to state 49

    expression                     shift and go to state 96
    number                         shift and go to state 34
    var                            shift and go to state 35
    matrix                         shift and go to state 36
    matrix_function                shift and go to state 37
    uminus                         shift and go to state 38
    transposition                  shift and go to state 39
    matrix_element                 shift and go to state 40
    vector_element                 shift and go to state 41
    function_name                  shift and go to state 46

state 69

    (62) expression -> expression DOTMUL . expression
    (48) expression -> . number
    (49) expression -> . var
    (50) expression -> . matrix
    (51) expression -> . matrix_function
    (52) expression -> . uminus
    (53) expression -> . transposition
    (54) expression -> . matrix_element
    (55) expression -> . vector_element
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression DOTADD expression
    (61) expression -> . expression DOTSUB expression
    (62) expression -> . expression DOTMUL expression
    (63) expression -> . expression DOTDIV expression
    (36) number -> . INTNUM
    (37) number -> . FLOATNUM
    (35) var -> . ID
    (27) matrix -> . [ vectors ]
    (31) matrix_function -> . function_name ( INTNUM )
    (70) uminus -> . - expression
    (71) transposition -> . expression '
    (43) matrix_element -> . ID [ INTNUM , INTNUM ]
    (42) vector_element -> . ID [ INTNUM ]
    (32) function_name -> . EYE
    (33) function_name -> . ONES
    (34) function_name -> . ZEROS

    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    ID              shift and go to state 18
    [               shift and go to state 45
    -               shift and go to state 42
    EYE             shift and go to state 47
    ONES            shift and go to state 48
    ZEROS           shift and go to state 49

    expression                     shift and go to state 97
    number                         shift and go to state 34
    var                            shift and go to state 35
    matrix                         shift and go to state 36
    matrix_function                shift and go to state 37
    uminus                         shift and go to state 38
    transposition                  shift and go to state 39
    matrix_element                 shift and go to state 40
    vector_element                 shift and go to state 41
    function_name                  shift and go to state 46

state 70

    (63) expression -> expression DOTDIV . expression
    (48) expression -> . number
    (49) expression -> . var
    (50) expression -> . matrix
    (51) expression -> . matrix_function
    (52) expression -> . uminus
    (53) expression -> . transposition
    (54) expression -> . matrix_element
    (55) expression -> . vector_element
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression DOTADD expression
    (61) expression -> . expression DOTSUB expression
    (62) expression -> . expression DOTMUL expression
    (63) expression -> . expression DOTDIV expression
    (36) number -> . INTNUM
    (37) number -> . FLOATNUM
    (35) var -> . ID
    (27) matrix -> . [ vectors ]
    (31) matrix_function -> . function_name ( INTNUM )
    (70) uminus -> . - expression
    (71) transposition -> . expression '
    (43) matrix_element -> . ID [ INTNUM , INTNUM ]
    (42) vector_element -> . ID [ INTNUM ]
    (32) function_name -> . EYE
    (33) function_name -> . ONES
    (34) function_name -> . ZEROS

    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    ID              shift and go to state 18
    [               shift and go to state 45
    -               shift and go to state 42
    EYE             shift and go to state 47
    ONES            shift and go to state 48
    ZEROS           shift and go to state 49

    expression                     shift and go to state 98
    number                         shift and go to state 34
    var                            shift and go to state 35
    matrix                         shift and go to state 36
    matrix_function                shift and go to state 37
    uminus                         shift and go to state 38
    transposition                  shift and go to state 39
    matrix_element                 shift and go to state 40
    vector_element                 shift and go to state 41
    function_name                  shift and go to state 46

state 71

    (71) transposition -> expression ' .

    +               reduce using rule 71 (transposition -> expression ' .)
    -               reduce using rule 71 (transposition -> expression ' .)
    *               reduce using rule 71 (transposition -> expression ' .)
    /               reduce using rule 71 (transposition -> expression ' .)
    DOTADD          reduce using rule 71 (transposition -> expression ' .)
    DOTSUB          reduce using rule 71 (transposition -> expression ' .)
    DOTMUL          reduce using rule 71 (transposition -> expression ' .)
    DOTDIV          reduce using rule 71 (transposition -> expression ' .)
    '               reduce using rule 71 (transposition -> expression ' .)
    ;               reduce using rule 71 (transposition -> expression ' .)
    ,               reduce using rule 71 (transposition -> expression ' .)
    EQ              reduce using rule 71 (transposition -> expression ' .)
    NE              reduce using rule 71 (transposition -> expression ' .)
    LE              reduce using rule 71 (transposition -> expression ' .)
    GE              reduce using rule 71 (transposition -> expression ' .)
    LT              reduce using rule 71 (transposition -> expression ' .)
    GT              reduce using rule 71 (transposition -> expression ' .)
    :               reduce using rule 71 (transposition -> expression ' .)
    )               reduce using rule 71 (transposition -> expression ' .)
    {               reduce using rule 71 (transposition -> expression ' .)
    IF              reduce using rule 71 (transposition -> expression ' .)
    FOR             reduce using rule 71 (transposition -> expression ' .)
    WHILE           reduce using rule 71 (transposition -> expression ' .)
    RETURN          reduce using rule 71 (transposition -> expression ' .)
    BREAK           reduce using rule 71 (transposition -> expression ' .)
    CONTINUE        reduce using rule 71 (transposition -> expression ' .)
    PRINT           reduce using rule 71 (transposition -> expression ' .)
    ID              reduce using rule 71 (transposition -> expression ' .)


state 72

    (70) uminus -> - expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . DOTADD expression
    (61) expression -> expression . DOTSUB expression
    (62) expression -> expression . DOTMUL expression
    (63) expression -> expression . DOTDIV expression
    (71) transposition -> expression . '

    +               reduce using rule 70 (uminus -> - expression .)
    -               reduce using rule 70 (uminus -> - expression .)
    *               reduce using rule 70 (uminus -> - expression .)
    /               reduce using rule 70 (uminus -> - expression .)
    DOTADD          reduce using rule 70 (uminus -> - expression .)
    DOTSUB          reduce using rule 70 (uminus -> - expression .)
    DOTMUL          reduce using rule 70 (uminus -> - expression .)
    DOTDIV          reduce using rule 70 (uminus -> - expression .)
    ;               reduce using rule 70 (uminus -> - expression .)
    ,               reduce using rule 70 (uminus -> - expression .)
    EQ              reduce using rule 70 (uminus -> - expression .)
    NE              reduce using rule 70 (uminus -> - expression .)
    LE              reduce using rule 70 (uminus -> - expression .)
    GE              reduce using rule 70 (uminus -> - expression .)
    LT              reduce using rule 70 (uminus -> - expression .)
    GT              reduce using rule 70 (uminus -> - expression .)
    :               reduce using rule 70 (uminus -> - expression .)
    )               reduce using rule 70 (uminus -> - expression .)
    {               reduce using rule 70 (uminus -> - expression .)
    IF              reduce using rule 70 (uminus -> - expression .)
    FOR             reduce using rule 70 (uminus -> - expression .)
    WHILE           reduce using rule 70 (uminus -> - expression .)
    RETURN          reduce using rule 70 (uminus -> - expression .)
    BREAK           reduce using rule 70 (uminus -> - expression .)
    CONTINUE        reduce using rule 70 (uminus -> - expression .)
    PRINT           reduce using rule 70 (uminus -> - expression .)
    ID              reduce using rule 70 (uminus -> - expression .)
    '               shift and go to state 71

  ! '               [ reduce using rule 70 (uminus -> - expression .) ]
  ! +               [ shift and go to state 63 ]
  ! -               [ shift and go to state 64 ]
  ! *               [ shift and go to state 65 ]
  ! /               [ shift and go to state 66 ]
  ! DOTADD          [ shift and go to state 67 ]
  ! DOTSUB          [ shift and go to state 68 ]
  ! DOTMUL          [ shift and go to state 69 ]
  ! DOTDIV          [ shift and go to state 70 ]


state 73

    (28) vector -> [ . variables ]
    (46) variables -> . variables , variable
    (47) variables -> . variable
    (39) variable -> . number
    (40) variable -> . var
    (41) variable -> . element
    (36) number -> . INTNUM
    (37) number -> . FLOATNUM
    (35) var -> . ID
    (44) element -> . vector_element
    (45) element -> . matrix_element
    (42) vector_element -> . ID [ INTNUM ]
    (43) matrix_element -> . ID [ INTNUM , INTNUM ]

    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    ID              shift and go to state 104

    variables                      shift and go to state 99
    variable                       shift and go to state 100
    number                         shift and go to state 101
    var                            shift and go to state 102
    element                        shift and go to state 103
    vector_element                 shift and go to state 105
    matrix_element                 shift and go to state 106

state 74

    (27) matrix -> [ vectors . ]
    (29) vectors -> vectors . , vector

    ]               shift and go to state 107
    ,               shift and go to state 108


state 75

    (30) vectors -> vector .

    ]               reduce using rule 30 (vectors -> vector .)
    ,               reduce using rule 30 (vectors -> vector .)


state 76

    (31) matrix_function -> function_name ( . INTNUM )

    INTNUM          shift and go to state 109


state 77

    (72) print_values -> print_values , . string
    (73) print_values -> print_values , . expression
    (38) string -> . STRING
    (48) expression -> . number
    (49) expression -> . var
    (50) expression -> . matrix
    (51) expression -> . matrix_function
    (52) expression -> . uminus
    (53) expression -> . transposition
    (54) expression -> . matrix_element
    (55) expression -> . vector_element
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression DOTADD expression
    (61) expression -> . expression DOTSUB expression
    (62) expression -> . expression DOTMUL expression
    (63) expression -> . expression DOTDIV expression
    (36) number -> . INTNUM
    (37) number -> . FLOATNUM
    (35) var -> . ID
    (27) matrix -> . [ vectors ]
    (31) matrix_function -> . function_name ( INTNUM )
    (70) uminus -> . - expression
    (71) transposition -> . expression '
    (43) matrix_element -> . ID [ INTNUM , INTNUM ]
    (42) vector_element -> . ID [ INTNUM ]
    (32) function_name -> . EYE
    (33) function_name -> . ONES
    (34) function_name -> . ZEROS

    STRING          shift and go to state 53
    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    ID              shift and go to state 18
    [               shift and go to state 45
    -               shift and go to state 42
    EYE             shift and go to state 47
    ONES            shift and go to state 48
    ZEROS           shift and go to state 49

    string                         shift and go to state 110
    expression                     shift and go to state 111
    number                         shift and go to state 34
    var                            shift and go to state 35
    matrix                         shift and go to state 36
    matrix_function                shift and go to state 37
    uminus                         shift and go to state 38
    transposition                  shift and go to state 39
    matrix_element                 shift and go to state 40
    vector_element                 shift and go to state 41
    function_name                  shift and go to state 46

state 78

    (20) assignment -> matrix_element assignment_operator expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . DOTADD expression
    (61) expression -> expression . DOTSUB expression
    (62) expression -> expression . DOTMUL expression
    (63) expression -> expression . DOTDIV expression
    (71) transposition -> expression . '

    ;               reduce using rule 20 (assignment -> matrix_element assignment_operator expression .)
    +               shift and go to state 63
    -               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 66
    DOTADD          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70
    '               shift and go to state 71


state 79

    (21) assignment -> vector_element assignment_operator expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . DOTADD expression
    (61) expression -> expression . DOTSUB expression
    (62) expression -> expression . DOTMUL expression
    (63) expression -> expression . DOTDIV expression
    (71) transposition -> expression . '

    ;               reduce using rule 21 (assignment -> vector_element assignment_operator expression .)
    +               shift and go to state 63
    -               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 66
    DOTADD          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70
    '               shift and go to state 71


state 80

    (43) matrix_element -> ID [ INTNUM . , INTNUM ]
    (42) vector_element -> ID [ INTNUM . ]

    ,               shift and go to state 112
    ]               shift and go to state 113


state 81

    (14) instruction -> IF ( condition ) . instruction
    (15) instruction -> IF ( condition ) . instruction ELSE instruction
    (7) instruction -> . sys_instruction ;
    (8) instruction -> . assignment ;
    (9) instruction -> . { instructions }
    (14) instruction -> . IF ( condition ) instruction
    (15) instruction -> . IF ( condition ) instruction ELSE instruction
    (16) instruction -> . FOR var = range instruction
    (18) instruction -> . WHILE ( condition ) instruction
    (10) sys_instruction -> . RETURN expression
    (11) sys_instruction -> . BREAK
    (12) sys_instruction -> . CONTINUE
    (13) sys_instruction -> . PRINT print_values
    (19) assignment -> . var assignment_operator expression
    (20) assignment -> . matrix_element assignment_operator expression
    (21) assignment -> . vector_element assignment_operator expression
    (35) var -> . ID
    (43) matrix_element -> . ID [ INTNUM , INTNUM ]
    (42) vector_element -> . ID [ INTNUM ]

    {               shift and go to state 7
    IF              shift and go to state 8
    FOR             shift and go to state 9
    WHILE           shift and go to state 11
    RETURN          shift and go to state 12
    BREAK           shift and go to state 13
    CONTINUE        shift and go to state 14
    PRINT           shift and go to state 15
    ID              shift and go to state 18

    instruction                    shift and go to state 114
    sys_instruction                shift and go to state 5
    assignment                     shift and go to state 6
    var                            shift and go to state 10
    matrix_element                 shift and go to state 16
    vector_element                 shift and go to state 17

state 82

    (64) condition -> expression EQ . expression
    (48) expression -> . number
    (49) expression -> . var
    (50) expression -> . matrix
    (51) expression -> . matrix_function
    (52) expression -> . uminus
    (53) expression -> . transposition
    (54) expression -> . matrix_element
    (55) expression -> . vector_element
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression DOTADD expression
    (61) expression -> . expression DOTSUB expression
    (62) expression -> . expression DOTMUL expression
    (63) expression -> . expression DOTDIV expression
    (36) number -> . INTNUM
    (37) number -> . FLOATNUM
    (35) var -> . ID
    (27) matrix -> . [ vectors ]
    (31) matrix_function -> . function_name ( INTNUM )
    (70) uminus -> . - expression
    (71) transposition -> . expression '
    (43) matrix_element -> . ID [ INTNUM , INTNUM ]
    (42) vector_element -> . ID [ INTNUM ]
    (32) function_name -> . EYE
    (33) function_name -> . ONES
    (34) function_name -> . ZEROS

    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    ID              shift and go to state 18
    [               shift and go to state 45
    -               shift and go to state 42
    EYE             shift and go to state 47
    ONES            shift and go to state 48
    ZEROS           shift and go to state 49

    expression                     shift and go to state 115
    number                         shift and go to state 34
    var                            shift and go to state 35
    matrix                         shift and go to state 36
    matrix_function                shift and go to state 37
    uminus                         shift and go to state 38
    transposition                  shift and go to state 39
    matrix_element                 shift and go to state 40
    vector_element                 shift and go to state 41
    function_name                  shift and go to state 46

state 83

    (65) condition -> expression NE . expression
    (48) expression -> . number
    (49) expression -> . var
    (50) expression -> . matrix
    (51) expression -> . matrix_function
    (52) expression -> . uminus
    (53) expression -> . transposition
    (54) expression -> . matrix_element
    (55) expression -> . vector_element
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression DOTADD expression
    (61) expression -> . expression DOTSUB expression
    (62) expression -> . expression DOTMUL expression
    (63) expression -> . expression DOTDIV expression
    (36) number -> . INTNUM
    (37) number -> . FLOATNUM
    (35) var -> . ID
    (27) matrix -> . [ vectors ]
    (31) matrix_function -> . function_name ( INTNUM )
    (70) uminus -> . - expression
    (71) transposition -> . expression '
    (43) matrix_element -> . ID [ INTNUM , INTNUM ]
    (42) vector_element -> . ID [ INTNUM ]
    (32) function_name -> . EYE
    (33) function_name -> . ONES
    (34) function_name -> . ZEROS

    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    ID              shift and go to state 18
    [               shift and go to state 45
    -               shift and go to state 42
    EYE             shift and go to state 47
    ONES            shift and go to state 48
    ZEROS           shift and go to state 49

    expression                     shift and go to state 116
    number                         shift and go to state 34
    var                            shift and go to state 35
    matrix                         shift and go to state 36
    matrix_function                shift and go to state 37
    uminus                         shift and go to state 38
    transposition                  shift and go to state 39
    matrix_element                 shift and go to state 40
    vector_element                 shift and go to state 41
    function_name                  shift and go to state 46

state 84

    (66) condition -> expression LE . expression
    (48) expression -> . number
    (49) expression -> . var
    (50) expression -> . matrix
    (51) expression -> . matrix_function
    (52) expression -> . uminus
    (53) expression -> . transposition
    (54) expression -> . matrix_element
    (55) expression -> . vector_element
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression DOTADD expression
    (61) expression -> . expression DOTSUB expression
    (62) expression -> . expression DOTMUL expression
    (63) expression -> . expression DOTDIV expression
    (36) number -> . INTNUM
    (37) number -> . FLOATNUM
    (35) var -> . ID
    (27) matrix -> . [ vectors ]
    (31) matrix_function -> . function_name ( INTNUM )
    (70) uminus -> . - expression
    (71) transposition -> . expression '
    (43) matrix_element -> . ID [ INTNUM , INTNUM ]
    (42) vector_element -> . ID [ INTNUM ]
    (32) function_name -> . EYE
    (33) function_name -> . ONES
    (34) function_name -> . ZEROS

    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    ID              shift and go to state 18
    [               shift and go to state 45
    -               shift and go to state 42
    EYE             shift and go to state 47
    ONES            shift and go to state 48
    ZEROS           shift and go to state 49

    expression                     shift and go to state 117
    number                         shift and go to state 34
    var                            shift and go to state 35
    matrix                         shift and go to state 36
    matrix_function                shift and go to state 37
    uminus                         shift and go to state 38
    transposition                  shift and go to state 39
    matrix_element                 shift and go to state 40
    vector_element                 shift and go to state 41
    function_name                  shift and go to state 46

state 85

    (67) condition -> expression GE . expression
    (48) expression -> . number
    (49) expression -> . var
    (50) expression -> . matrix
    (51) expression -> . matrix_function
    (52) expression -> . uminus
    (53) expression -> . transposition
    (54) expression -> . matrix_element
    (55) expression -> . vector_element
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression DOTADD expression
    (61) expression -> . expression DOTSUB expression
    (62) expression -> . expression DOTMUL expression
    (63) expression -> . expression DOTDIV expression
    (36) number -> . INTNUM
    (37) number -> . FLOATNUM
    (35) var -> . ID
    (27) matrix -> . [ vectors ]
    (31) matrix_function -> . function_name ( INTNUM )
    (70) uminus -> . - expression
    (71) transposition -> . expression '
    (43) matrix_element -> . ID [ INTNUM , INTNUM ]
    (42) vector_element -> . ID [ INTNUM ]
    (32) function_name -> . EYE
    (33) function_name -> . ONES
    (34) function_name -> . ZEROS

    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    ID              shift and go to state 18
    [               shift and go to state 45
    -               shift and go to state 42
    EYE             shift and go to state 47
    ONES            shift and go to state 48
    ZEROS           shift and go to state 49

    expression                     shift and go to state 118
    number                         shift and go to state 34
    var                            shift and go to state 35
    matrix                         shift and go to state 36
    matrix_function                shift and go to state 37
    uminus                         shift and go to state 38
    transposition                  shift and go to state 39
    matrix_element                 shift and go to state 40
    vector_element                 shift and go to state 41
    function_name                  shift and go to state 46

state 86

    (68) condition -> expression LT . expression
    (48) expression -> . number
    (49) expression -> . var
    (50) expression -> . matrix
    (51) expression -> . matrix_function
    (52) expression -> . uminus
    (53) expression -> . transposition
    (54) expression -> . matrix_element
    (55) expression -> . vector_element
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression DOTADD expression
    (61) expression -> . expression DOTSUB expression
    (62) expression -> . expression DOTMUL expression
    (63) expression -> . expression DOTDIV expression
    (36) number -> . INTNUM
    (37) number -> . FLOATNUM
    (35) var -> . ID
    (27) matrix -> . [ vectors ]
    (31) matrix_function -> . function_name ( INTNUM )
    (70) uminus -> . - expression
    (71) transposition -> . expression '
    (43) matrix_element -> . ID [ INTNUM , INTNUM ]
    (42) vector_element -> . ID [ INTNUM ]
    (32) function_name -> . EYE
    (33) function_name -> . ONES
    (34) function_name -> . ZEROS

    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    ID              shift and go to state 18
    [               shift and go to state 45
    -               shift and go to state 42
    EYE             shift and go to state 47
    ONES            shift and go to state 48
    ZEROS           shift and go to state 49

    expression                     shift and go to state 119
    number                         shift and go to state 34
    var                            shift and go to state 35
    matrix                         shift and go to state 36
    matrix_function                shift and go to state 37
    uminus                         shift and go to state 38
    transposition                  shift and go to state 39
    matrix_element                 shift and go to state 40
    vector_element                 shift and go to state 41
    function_name                  shift and go to state 46

state 87

    (69) condition -> expression GT . expression
    (48) expression -> . number
    (49) expression -> . var
    (50) expression -> . matrix
    (51) expression -> . matrix_function
    (52) expression -> . uminus
    (53) expression -> . transposition
    (54) expression -> . matrix_element
    (55) expression -> . vector_element
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression DOTADD expression
    (61) expression -> . expression DOTSUB expression
    (62) expression -> . expression DOTMUL expression
    (63) expression -> . expression DOTDIV expression
    (36) number -> . INTNUM
    (37) number -> . FLOATNUM
    (35) var -> . ID
    (27) matrix -> . [ vectors ]
    (31) matrix_function -> . function_name ( INTNUM )
    (70) uminus -> . - expression
    (71) transposition -> . expression '
    (43) matrix_element -> . ID [ INTNUM , INTNUM ]
    (42) vector_element -> . ID [ INTNUM ]
    (32) function_name -> . EYE
    (33) function_name -> . ONES
    (34) function_name -> . ZEROS

    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    ID              shift and go to state 18
    [               shift and go to state 45
    -               shift and go to state 42
    EYE             shift and go to state 47
    ONES            shift and go to state 48
    ZEROS           shift and go to state 49

    expression                     shift and go to state 120
    number                         shift and go to state 34
    var                            shift and go to state 35
    matrix                         shift and go to state 36
    matrix_function                shift and go to state 37
    uminus                         shift and go to state 38
    transposition                  shift and go to state 39
    matrix_element                 shift and go to state 40
    vector_element                 shift and go to state 41
    function_name                  shift and go to state 46

state 88

    (16) instruction -> FOR var = range . instruction
    (7) instruction -> . sys_instruction ;
    (8) instruction -> . assignment ;
    (9) instruction -> . { instructions }
    (14) instruction -> . IF ( condition ) instruction
    (15) instruction -> . IF ( condition ) instruction ELSE instruction
    (16) instruction -> . FOR var = range instruction
    (18) instruction -> . WHILE ( condition ) instruction
    (10) sys_instruction -> . RETURN expression
    (11) sys_instruction -> . BREAK
    (12) sys_instruction -> . CONTINUE
    (13) sys_instruction -> . PRINT print_values
    (19) assignment -> . var assignment_operator expression
    (20) assignment -> . matrix_element assignment_operator expression
    (21) assignment -> . vector_element assignment_operator expression
    (35) var -> . ID
    (43) matrix_element -> . ID [ INTNUM , INTNUM ]
    (42) vector_element -> . ID [ INTNUM ]

    {               shift and go to state 7
    IF              shift and go to state 8
    FOR             shift and go to state 9
    WHILE           shift and go to state 11
    RETURN          shift and go to state 12
    BREAK           shift and go to state 13
    CONTINUE        shift and go to state 14
    PRINT           shift and go to state 15
    ID              shift and go to state 18

    var                            shift and go to state 10
    instruction                    shift and go to state 121
    sys_instruction                shift and go to state 5
    assignment                     shift and go to state 6
    matrix_element                 shift and go to state 16
    vector_element                 shift and go to state 17

state 89

    (17) range -> expression . : expression
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . DOTADD expression
    (61) expression -> expression . DOTSUB expression
    (62) expression -> expression . DOTMUL expression
    (63) expression -> expression . DOTDIV expression
    (71) transposition -> expression . '

    :               shift and go to state 122
    +               shift and go to state 63
    -               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 66
    DOTADD          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70
    '               shift and go to state 71


state 90

    (18) instruction -> WHILE ( condition ) . instruction
    (7) instruction -> . sys_instruction ;
    (8) instruction -> . assignment ;
    (9) instruction -> . { instructions }
    (14) instruction -> . IF ( condition ) instruction
    (15) instruction -> . IF ( condition ) instruction ELSE instruction
    (16) instruction -> . FOR var = range instruction
    (18) instruction -> . WHILE ( condition ) instruction
    (10) sys_instruction -> . RETURN expression
    (11) sys_instruction -> . BREAK
    (12) sys_instruction -> . CONTINUE
    (13) sys_instruction -> . PRINT print_values
    (19) assignment -> . var assignment_operator expression
    (20) assignment -> . matrix_element assignment_operator expression
    (21) assignment -> . vector_element assignment_operator expression
    (35) var -> . ID
    (43) matrix_element -> . ID [ INTNUM , INTNUM ]
    (42) vector_element -> . ID [ INTNUM ]

    {               shift and go to state 7
    IF              shift and go to state 8
    FOR             shift and go to state 9
    WHILE           shift and go to state 11
    RETURN          shift and go to state 12
    BREAK           shift and go to state 13
    CONTINUE        shift and go to state 14
    PRINT           shift and go to state 15
    ID              shift and go to state 18

    instruction                    shift and go to state 123
    sys_instruction                shift and go to state 5
    assignment                     shift and go to state 6
    var                            shift and go to state 10
    matrix_element                 shift and go to state 16
    vector_element                 shift and go to state 17

state 91

    (56) expression -> expression + expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . DOTADD expression
    (61) expression -> expression . DOTSUB expression
    (62) expression -> expression . DOTMUL expression
    (63) expression -> expression . DOTDIV expression
    (71) transposition -> expression . '

    +               reduce using rule 56 (expression -> expression + expression .)
    -               reduce using rule 56 (expression -> expression + expression .)
    ;               reduce using rule 56 (expression -> expression + expression .)
    ,               reduce using rule 56 (expression -> expression + expression .)
    EQ              reduce using rule 56 (expression -> expression + expression .)
    NE              reduce using rule 56 (expression -> expression + expression .)
    LE              reduce using rule 56 (expression -> expression + expression .)
    GE              reduce using rule 56 (expression -> expression + expression .)
    LT              reduce using rule 56 (expression -> expression + expression .)
    GT              reduce using rule 56 (expression -> expression + expression .)
    :               reduce using rule 56 (expression -> expression + expression .)
    )               reduce using rule 56 (expression -> expression + expression .)
    {               reduce using rule 56 (expression -> expression + expression .)
    IF              reduce using rule 56 (expression -> expression + expression .)
    FOR             reduce using rule 56 (expression -> expression + expression .)
    WHILE           reduce using rule 56 (expression -> expression + expression .)
    RETURN          reduce using rule 56 (expression -> expression + expression .)
    BREAK           reduce using rule 56 (expression -> expression + expression .)
    CONTINUE        reduce using rule 56 (expression -> expression + expression .)
    PRINT           reduce using rule 56 (expression -> expression + expression .)
    ID              reduce using rule 56 (expression -> expression + expression .)
    *               shift and go to state 65
    /               shift and go to state 66
    DOTADD          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70
    '               shift and go to state 71

  ! *               [ reduce using rule 56 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 56 (expression -> expression + expression .) ]
  ! DOTADD          [ reduce using rule 56 (expression -> expression + expression .) ]
  ! DOTSUB          [ reduce using rule 56 (expression -> expression + expression .) ]
  ! DOTMUL          [ reduce using rule 56 (expression -> expression + expression .) ]
  ! DOTDIV          [ reduce using rule 56 (expression -> expression + expression .) ]
  ! '               [ reduce using rule 56 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 63 ]
  ! -               [ shift and go to state 64 ]


state 92

    (57) expression -> expression - expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . DOTADD expression
    (61) expression -> expression . DOTSUB expression
    (62) expression -> expression . DOTMUL expression
    (63) expression -> expression . DOTDIV expression
    (71) transposition -> expression . '

    +               reduce using rule 57 (expression -> expression - expression .)
    -               reduce using rule 57 (expression -> expression - expression .)
    ;               reduce using rule 57 (expression -> expression - expression .)
    ,               reduce using rule 57 (expression -> expression - expression .)
    EQ              reduce using rule 57 (expression -> expression - expression .)
    NE              reduce using rule 57 (expression -> expression - expression .)
    LE              reduce using rule 57 (expression -> expression - expression .)
    GE              reduce using rule 57 (expression -> expression - expression .)
    LT              reduce using rule 57 (expression -> expression - expression .)
    GT              reduce using rule 57 (expression -> expression - expression .)
    :               reduce using rule 57 (expression -> expression - expression .)
    )               reduce using rule 57 (expression -> expression - expression .)
    {               reduce using rule 57 (expression -> expression - expression .)
    IF              reduce using rule 57 (expression -> expression - expression .)
    FOR             reduce using rule 57 (expression -> expression - expression .)
    WHILE           reduce using rule 57 (expression -> expression - expression .)
    RETURN          reduce using rule 57 (expression -> expression - expression .)
    BREAK           reduce using rule 57 (expression -> expression - expression .)
    CONTINUE        reduce using rule 57 (expression -> expression - expression .)
    PRINT           reduce using rule 57 (expression -> expression - expression .)
    ID              reduce using rule 57 (expression -> expression - expression .)
    *               shift and go to state 65
    /               shift and go to state 66
    DOTADD          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70
    '               shift and go to state 71

  ! *               [ reduce using rule 57 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 57 (expression -> expression - expression .) ]
  ! DOTADD          [ reduce using rule 57 (expression -> expression - expression .) ]
  ! DOTSUB          [ reduce using rule 57 (expression -> expression - expression .) ]
  ! DOTMUL          [ reduce using rule 57 (expression -> expression - expression .) ]
  ! DOTDIV          [ reduce using rule 57 (expression -> expression - expression .) ]
  ! '               [ reduce using rule 57 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 63 ]
  ! -               [ shift and go to state 64 ]


state 93

    (58) expression -> expression * expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . DOTADD expression
    (61) expression -> expression . DOTSUB expression
    (62) expression -> expression . DOTMUL expression
    (63) expression -> expression . DOTDIV expression
    (71) transposition -> expression . '

    +               reduce using rule 58 (expression -> expression * expression .)
    -               reduce using rule 58 (expression -> expression * expression .)
    *               reduce using rule 58 (expression -> expression * expression .)
    /               reduce using rule 58 (expression -> expression * expression .)
    DOTADD          reduce using rule 58 (expression -> expression * expression .)
    DOTSUB          reduce using rule 58 (expression -> expression * expression .)
    ;               reduce using rule 58 (expression -> expression * expression .)
    ,               reduce using rule 58 (expression -> expression * expression .)
    EQ              reduce using rule 58 (expression -> expression * expression .)
    NE              reduce using rule 58 (expression -> expression * expression .)
    LE              reduce using rule 58 (expression -> expression * expression .)
    GE              reduce using rule 58 (expression -> expression * expression .)
    LT              reduce using rule 58 (expression -> expression * expression .)
    GT              reduce using rule 58 (expression -> expression * expression .)
    :               reduce using rule 58 (expression -> expression * expression .)
    )               reduce using rule 58 (expression -> expression * expression .)
    {               reduce using rule 58 (expression -> expression * expression .)
    IF              reduce using rule 58 (expression -> expression * expression .)
    FOR             reduce using rule 58 (expression -> expression * expression .)
    WHILE           reduce using rule 58 (expression -> expression * expression .)
    RETURN          reduce using rule 58 (expression -> expression * expression .)
    BREAK           reduce using rule 58 (expression -> expression * expression .)
    CONTINUE        reduce using rule 58 (expression -> expression * expression .)
    PRINT           reduce using rule 58 (expression -> expression * expression .)
    ID              reduce using rule 58 (expression -> expression * expression .)
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70
    '               shift and go to state 71

  ! DOTMUL          [ reduce using rule 58 (expression -> expression * expression .) ]
  ! DOTDIV          [ reduce using rule 58 (expression -> expression * expression .) ]
  ! '               [ reduce using rule 58 (expression -> expression * expression .) ]
  ! +               [ shift and go to state 63 ]
  ! -               [ shift and go to state 64 ]
  ! *               [ shift and go to state 65 ]
  ! /               [ shift and go to state 66 ]
  ! DOTADD          [ shift and go to state 67 ]
  ! DOTSUB          [ shift and go to state 68 ]


state 94

    (59) expression -> expression / expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . DOTADD expression
    (61) expression -> expression . DOTSUB expression
    (62) expression -> expression . DOTMUL expression
    (63) expression -> expression . DOTDIV expression
    (71) transposition -> expression . '

    +               reduce using rule 59 (expression -> expression / expression .)
    -               reduce using rule 59 (expression -> expression / expression .)
    *               reduce using rule 59 (expression -> expression / expression .)
    /               reduce using rule 59 (expression -> expression / expression .)
    DOTADD          reduce using rule 59 (expression -> expression / expression .)
    DOTSUB          reduce using rule 59 (expression -> expression / expression .)
    ;               reduce using rule 59 (expression -> expression / expression .)
    ,               reduce using rule 59 (expression -> expression / expression .)
    EQ              reduce using rule 59 (expression -> expression / expression .)
    NE              reduce using rule 59 (expression -> expression / expression .)
    LE              reduce using rule 59 (expression -> expression / expression .)
    GE              reduce using rule 59 (expression -> expression / expression .)
    LT              reduce using rule 59 (expression -> expression / expression .)
    GT              reduce using rule 59 (expression -> expression / expression .)
    :               reduce using rule 59 (expression -> expression / expression .)
    )               reduce using rule 59 (expression -> expression / expression .)
    {               reduce using rule 59 (expression -> expression / expression .)
    IF              reduce using rule 59 (expression -> expression / expression .)
    FOR             reduce using rule 59 (expression -> expression / expression .)
    WHILE           reduce using rule 59 (expression -> expression / expression .)
    RETURN          reduce using rule 59 (expression -> expression / expression .)
    BREAK           reduce using rule 59 (expression -> expression / expression .)
    CONTINUE        reduce using rule 59 (expression -> expression / expression .)
    PRINT           reduce using rule 59 (expression -> expression / expression .)
    ID              reduce using rule 59 (expression -> expression / expression .)
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70
    '               shift and go to state 71

  ! DOTMUL          [ reduce using rule 59 (expression -> expression / expression .) ]
  ! DOTDIV          [ reduce using rule 59 (expression -> expression / expression .) ]
  ! '               [ reduce using rule 59 (expression -> expression / expression .) ]
  ! +               [ shift and go to state 63 ]
  ! -               [ shift and go to state 64 ]
  ! *               [ shift and go to state 65 ]
  ! /               [ shift and go to state 66 ]
  ! DOTADD          [ shift and go to state 67 ]
  ! DOTSUB          [ shift and go to state 68 ]


state 95

    (60) expression -> expression DOTADD expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . DOTADD expression
    (61) expression -> expression . DOTSUB expression
    (62) expression -> expression . DOTMUL expression
    (63) expression -> expression . DOTDIV expression
    (71) transposition -> expression . '

    +               reduce using rule 60 (expression -> expression DOTADD expression .)
    -               reduce using rule 60 (expression -> expression DOTADD expression .)
    DOTADD          reduce using rule 60 (expression -> expression DOTADD expression .)
    DOTSUB          reduce using rule 60 (expression -> expression DOTADD expression .)
    ;               reduce using rule 60 (expression -> expression DOTADD expression .)
    ,               reduce using rule 60 (expression -> expression DOTADD expression .)
    EQ              reduce using rule 60 (expression -> expression DOTADD expression .)
    NE              reduce using rule 60 (expression -> expression DOTADD expression .)
    LE              reduce using rule 60 (expression -> expression DOTADD expression .)
    GE              reduce using rule 60 (expression -> expression DOTADD expression .)
    LT              reduce using rule 60 (expression -> expression DOTADD expression .)
    GT              reduce using rule 60 (expression -> expression DOTADD expression .)
    :               reduce using rule 60 (expression -> expression DOTADD expression .)
    )               reduce using rule 60 (expression -> expression DOTADD expression .)
    {               reduce using rule 60 (expression -> expression DOTADD expression .)
    IF              reduce using rule 60 (expression -> expression DOTADD expression .)
    FOR             reduce using rule 60 (expression -> expression DOTADD expression .)
    WHILE           reduce using rule 60 (expression -> expression DOTADD expression .)
    RETURN          reduce using rule 60 (expression -> expression DOTADD expression .)
    BREAK           reduce using rule 60 (expression -> expression DOTADD expression .)
    CONTINUE        reduce using rule 60 (expression -> expression DOTADD expression .)
    PRINT           reduce using rule 60 (expression -> expression DOTADD expression .)
    ID              reduce using rule 60 (expression -> expression DOTADD expression .)
    *               shift and go to state 65
    /               shift and go to state 66
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70
    '               shift and go to state 71

  ! *               [ reduce using rule 60 (expression -> expression DOTADD expression .) ]
  ! /               [ reduce using rule 60 (expression -> expression DOTADD expression .) ]
  ! DOTMUL          [ reduce using rule 60 (expression -> expression DOTADD expression .) ]
  ! DOTDIV          [ reduce using rule 60 (expression -> expression DOTADD expression .) ]
  ! '               [ reduce using rule 60 (expression -> expression DOTADD expression .) ]
  ! +               [ shift and go to state 63 ]
  ! -               [ shift and go to state 64 ]
  ! DOTADD          [ shift and go to state 67 ]
  ! DOTSUB          [ shift and go to state 68 ]


state 96

    (61) expression -> expression DOTSUB expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . DOTADD expression
    (61) expression -> expression . DOTSUB expression
    (62) expression -> expression . DOTMUL expression
    (63) expression -> expression . DOTDIV expression
    (71) transposition -> expression . '

    +               reduce using rule 61 (expression -> expression DOTSUB expression .)
    -               reduce using rule 61 (expression -> expression DOTSUB expression .)
    DOTADD          reduce using rule 61 (expression -> expression DOTSUB expression .)
    DOTSUB          reduce using rule 61 (expression -> expression DOTSUB expression .)
    ;               reduce using rule 61 (expression -> expression DOTSUB expression .)
    ,               reduce using rule 61 (expression -> expression DOTSUB expression .)
    EQ              reduce using rule 61 (expression -> expression DOTSUB expression .)
    NE              reduce using rule 61 (expression -> expression DOTSUB expression .)
    LE              reduce using rule 61 (expression -> expression DOTSUB expression .)
    GE              reduce using rule 61 (expression -> expression DOTSUB expression .)
    LT              reduce using rule 61 (expression -> expression DOTSUB expression .)
    GT              reduce using rule 61 (expression -> expression DOTSUB expression .)
    :               reduce using rule 61 (expression -> expression DOTSUB expression .)
    )               reduce using rule 61 (expression -> expression DOTSUB expression .)
    {               reduce using rule 61 (expression -> expression DOTSUB expression .)
    IF              reduce using rule 61 (expression -> expression DOTSUB expression .)
    FOR             reduce using rule 61 (expression -> expression DOTSUB expression .)
    WHILE           reduce using rule 61 (expression -> expression DOTSUB expression .)
    RETURN          reduce using rule 61 (expression -> expression DOTSUB expression .)
    BREAK           reduce using rule 61 (expression -> expression DOTSUB expression .)
    CONTINUE        reduce using rule 61 (expression -> expression DOTSUB expression .)
    PRINT           reduce using rule 61 (expression -> expression DOTSUB expression .)
    ID              reduce using rule 61 (expression -> expression DOTSUB expression .)
    *               shift and go to state 65
    /               shift and go to state 66
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70
    '               shift and go to state 71

  ! *               [ reduce using rule 61 (expression -> expression DOTSUB expression .) ]
  ! /               [ reduce using rule 61 (expression -> expression DOTSUB expression .) ]
  ! DOTMUL          [ reduce using rule 61 (expression -> expression DOTSUB expression .) ]
  ! DOTDIV          [ reduce using rule 61 (expression -> expression DOTSUB expression .) ]
  ! '               [ reduce using rule 61 (expression -> expression DOTSUB expression .) ]
  ! +               [ shift and go to state 63 ]
  ! -               [ shift and go to state 64 ]
  ! DOTADD          [ shift and go to state 67 ]
  ! DOTSUB          [ shift and go to state 68 ]


state 97

    (62) expression -> expression DOTMUL expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . DOTADD expression
    (61) expression -> expression . DOTSUB expression
    (62) expression -> expression . DOTMUL expression
    (63) expression -> expression . DOTDIV expression
    (71) transposition -> expression . '

    +               reduce using rule 62 (expression -> expression DOTMUL expression .)
    -               reduce using rule 62 (expression -> expression DOTMUL expression .)
    *               reduce using rule 62 (expression -> expression DOTMUL expression .)
    /               reduce using rule 62 (expression -> expression DOTMUL expression .)
    DOTADD          reduce using rule 62 (expression -> expression DOTMUL expression .)
    DOTSUB          reduce using rule 62 (expression -> expression DOTMUL expression .)
    DOTMUL          reduce using rule 62 (expression -> expression DOTMUL expression .)
    DOTDIV          reduce using rule 62 (expression -> expression DOTMUL expression .)
    ;               reduce using rule 62 (expression -> expression DOTMUL expression .)
    ,               reduce using rule 62 (expression -> expression DOTMUL expression .)
    EQ              reduce using rule 62 (expression -> expression DOTMUL expression .)
    NE              reduce using rule 62 (expression -> expression DOTMUL expression .)
    LE              reduce using rule 62 (expression -> expression DOTMUL expression .)
    GE              reduce using rule 62 (expression -> expression DOTMUL expression .)
    LT              reduce using rule 62 (expression -> expression DOTMUL expression .)
    GT              reduce using rule 62 (expression -> expression DOTMUL expression .)
    :               reduce using rule 62 (expression -> expression DOTMUL expression .)
    )               reduce using rule 62 (expression -> expression DOTMUL expression .)
    {               reduce using rule 62 (expression -> expression DOTMUL expression .)
    IF              reduce using rule 62 (expression -> expression DOTMUL expression .)
    FOR             reduce using rule 62 (expression -> expression DOTMUL expression .)
    WHILE           reduce using rule 62 (expression -> expression DOTMUL expression .)
    RETURN          reduce using rule 62 (expression -> expression DOTMUL expression .)
    BREAK           reduce using rule 62 (expression -> expression DOTMUL expression .)
    CONTINUE        reduce using rule 62 (expression -> expression DOTMUL expression .)
    PRINT           reduce using rule 62 (expression -> expression DOTMUL expression .)
    ID              reduce using rule 62 (expression -> expression DOTMUL expression .)
    '               shift and go to state 71

  ! '               [ reduce using rule 62 (expression -> expression DOTMUL expression .) ]
  ! +               [ shift and go to state 63 ]
  ! -               [ shift and go to state 64 ]
  ! *               [ shift and go to state 65 ]
  ! /               [ shift and go to state 66 ]
  ! DOTADD          [ shift and go to state 67 ]
  ! DOTSUB          [ shift and go to state 68 ]
  ! DOTMUL          [ shift and go to state 69 ]
  ! DOTDIV          [ shift and go to state 70 ]


state 98

    (63) expression -> expression DOTDIV expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . DOTADD expression
    (61) expression -> expression . DOTSUB expression
    (62) expression -> expression . DOTMUL expression
    (63) expression -> expression . DOTDIV expression
    (71) transposition -> expression . '

    +               reduce using rule 63 (expression -> expression DOTDIV expression .)
    -               reduce using rule 63 (expression -> expression DOTDIV expression .)
    *               reduce using rule 63 (expression -> expression DOTDIV expression .)
    /               reduce using rule 63 (expression -> expression DOTDIV expression .)
    DOTADD          reduce using rule 63 (expression -> expression DOTDIV expression .)
    DOTSUB          reduce using rule 63 (expression -> expression DOTDIV expression .)
    DOTMUL          reduce using rule 63 (expression -> expression DOTDIV expression .)
    DOTDIV          reduce using rule 63 (expression -> expression DOTDIV expression .)
    ;               reduce using rule 63 (expression -> expression DOTDIV expression .)
    ,               reduce using rule 63 (expression -> expression DOTDIV expression .)
    EQ              reduce using rule 63 (expression -> expression DOTDIV expression .)
    NE              reduce using rule 63 (expression -> expression DOTDIV expression .)
    LE              reduce using rule 63 (expression -> expression DOTDIV expression .)
    GE              reduce using rule 63 (expression -> expression DOTDIV expression .)
    LT              reduce using rule 63 (expression -> expression DOTDIV expression .)
    GT              reduce using rule 63 (expression -> expression DOTDIV expression .)
    :               reduce using rule 63 (expression -> expression DOTDIV expression .)
    )               reduce using rule 63 (expression -> expression DOTDIV expression .)
    {               reduce using rule 63 (expression -> expression DOTDIV expression .)
    IF              reduce using rule 63 (expression -> expression DOTDIV expression .)
    FOR             reduce using rule 63 (expression -> expression DOTDIV expression .)
    WHILE           reduce using rule 63 (expression -> expression DOTDIV expression .)
    RETURN          reduce using rule 63 (expression -> expression DOTDIV expression .)
    BREAK           reduce using rule 63 (expression -> expression DOTDIV expression .)
    CONTINUE        reduce using rule 63 (expression -> expression DOTDIV expression .)
    PRINT           reduce using rule 63 (expression -> expression DOTDIV expression .)
    ID              reduce using rule 63 (expression -> expression DOTDIV expression .)
    '               shift and go to state 71

  ! '               [ reduce using rule 63 (expression -> expression DOTDIV expression .) ]
  ! +               [ shift and go to state 63 ]
  ! -               [ shift and go to state 64 ]
  ! *               [ shift and go to state 65 ]
  ! /               [ shift and go to state 66 ]
  ! DOTADD          [ shift and go to state 67 ]
  ! DOTSUB          [ shift and go to state 68 ]
  ! DOTMUL          [ shift and go to state 69 ]
  ! DOTDIV          [ shift and go to state 70 ]


state 99

    (28) vector -> [ variables . ]
    (46) variables -> variables . , variable

    ]               shift and go to state 124
    ,               shift and go to state 125


state 100

    (47) variables -> variable .

    ]               reduce using rule 47 (variables -> variable .)
    ,               reduce using rule 47 (variables -> variable .)


state 101

    (39) variable -> number .

    ]               reduce using rule 39 (variable -> number .)
    ,               reduce using rule 39 (variable -> number .)


state 102

    (40) variable -> var .

    ]               reduce using rule 40 (variable -> var .)
    ,               reduce using rule 40 (variable -> var .)


state 103

    (41) variable -> element .

    ]               reduce using rule 41 (variable -> element .)
    ,               reduce using rule 41 (variable -> element .)


state 104

    (35) var -> ID .
    (42) vector_element -> ID . [ INTNUM ]
    (43) matrix_element -> ID . [ INTNUM , INTNUM ]

    ]               reduce using rule 35 (var -> ID .)
    ,               reduce using rule 35 (var -> ID .)
    [               shift and go to state 126


state 105

    (44) element -> vector_element .

    ]               reduce using rule 44 (element -> vector_element .)
    ,               reduce using rule 44 (element -> vector_element .)


state 106

    (45) element -> matrix_element .

    ]               reduce using rule 45 (element -> matrix_element .)
    ,               reduce using rule 45 (element -> matrix_element .)


state 107

    (27) matrix -> [ vectors ] .

    +               reduce using rule 27 (matrix -> [ vectors ] .)
    -               reduce using rule 27 (matrix -> [ vectors ] .)
    *               reduce using rule 27 (matrix -> [ vectors ] .)
    /               reduce using rule 27 (matrix -> [ vectors ] .)
    DOTADD          reduce using rule 27 (matrix -> [ vectors ] .)
    DOTSUB          reduce using rule 27 (matrix -> [ vectors ] .)
    DOTMUL          reduce using rule 27 (matrix -> [ vectors ] .)
    DOTDIV          reduce using rule 27 (matrix -> [ vectors ] .)
    '               reduce using rule 27 (matrix -> [ vectors ] .)
    ;               reduce using rule 27 (matrix -> [ vectors ] .)
    ,               reduce using rule 27 (matrix -> [ vectors ] .)
    EQ              reduce using rule 27 (matrix -> [ vectors ] .)
    NE              reduce using rule 27 (matrix -> [ vectors ] .)
    LE              reduce using rule 27 (matrix -> [ vectors ] .)
    GE              reduce using rule 27 (matrix -> [ vectors ] .)
    LT              reduce using rule 27 (matrix -> [ vectors ] .)
    GT              reduce using rule 27 (matrix -> [ vectors ] .)
    :               reduce using rule 27 (matrix -> [ vectors ] .)
    )               reduce using rule 27 (matrix -> [ vectors ] .)
    {               reduce using rule 27 (matrix -> [ vectors ] .)
    IF              reduce using rule 27 (matrix -> [ vectors ] .)
    FOR             reduce using rule 27 (matrix -> [ vectors ] .)
    WHILE           reduce using rule 27 (matrix -> [ vectors ] .)
    RETURN          reduce using rule 27 (matrix -> [ vectors ] .)
    BREAK           reduce using rule 27 (matrix -> [ vectors ] .)
    CONTINUE        reduce using rule 27 (matrix -> [ vectors ] .)
    PRINT           reduce using rule 27 (matrix -> [ vectors ] .)
    ID              reduce using rule 27 (matrix -> [ vectors ] .)


state 108

    (29) vectors -> vectors , . vector
    (28) vector -> . [ variables ]

    [               shift and go to state 73

    vector                         shift and go to state 127

state 109

    (31) matrix_function -> function_name ( INTNUM . )

    )               shift and go to state 128


state 110

    (72) print_values -> print_values , string .

    ,               reduce using rule 72 (print_values -> print_values , string .)
    ;               reduce using rule 72 (print_values -> print_values , string .)


state 111

    (73) print_values -> print_values , expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . DOTADD expression
    (61) expression -> expression . DOTSUB expression
    (62) expression -> expression . DOTMUL expression
    (63) expression -> expression . DOTDIV expression
    (71) transposition -> expression . '

    ,               reduce using rule 73 (print_values -> print_values , expression .)
    ;               reduce using rule 73 (print_values -> print_values , expression .)
    +               shift and go to state 63
    -               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 66
    DOTADD          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70
    '               shift and go to state 71


state 112

    (43) matrix_element -> ID [ INTNUM , . INTNUM ]

    INTNUM          shift and go to state 129


state 113

    (42) vector_element -> ID [ INTNUM ] .

    =               reduce using rule 42 (vector_element -> ID [ INTNUM ] .)
    ADDASSIGN       reduce using rule 42 (vector_element -> ID [ INTNUM ] .)
    SUBASSIGN       reduce using rule 42 (vector_element -> ID [ INTNUM ] .)
    MULASSIGN       reduce using rule 42 (vector_element -> ID [ INTNUM ] .)
    DIVASSIGN       reduce using rule 42 (vector_element -> ID [ INTNUM ] .)
    +               reduce using rule 42 (vector_element -> ID [ INTNUM ] .)
    -               reduce using rule 42 (vector_element -> ID [ INTNUM ] .)
    *               reduce using rule 42 (vector_element -> ID [ INTNUM ] .)
    /               reduce using rule 42 (vector_element -> ID [ INTNUM ] .)
    DOTADD          reduce using rule 42 (vector_element -> ID [ INTNUM ] .)
    DOTSUB          reduce using rule 42 (vector_element -> ID [ INTNUM ] .)
    DOTMUL          reduce using rule 42 (vector_element -> ID [ INTNUM ] .)
    DOTDIV          reduce using rule 42 (vector_element -> ID [ INTNUM ] .)
    '               reduce using rule 42 (vector_element -> ID [ INTNUM ] .)
    ;               reduce using rule 42 (vector_element -> ID [ INTNUM ] .)
    ,               reduce using rule 42 (vector_element -> ID [ INTNUM ] .)
    EQ              reduce using rule 42 (vector_element -> ID [ INTNUM ] .)
    NE              reduce using rule 42 (vector_element -> ID [ INTNUM ] .)
    LE              reduce using rule 42 (vector_element -> ID [ INTNUM ] .)
    GE              reduce using rule 42 (vector_element -> ID [ INTNUM ] .)
    LT              reduce using rule 42 (vector_element -> ID [ INTNUM ] .)
    GT              reduce using rule 42 (vector_element -> ID [ INTNUM ] .)
    :               reduce using rule 42 (vector_element -> ID [ INTNUM ] .)
    )               reduce using rule 42 (vector_element -> ID [ INTNUM ] .)
    {               reduce using rule 42 (vector_element -> ID [ INTNUM ] .)
    IF              reduce using rule 42 (vector_element -> ID [ INTNUM ] .)
    FOR             reduce using rule 42 (vector_element -> ID [ INTNUM ] .)
    WHILE           reduce using rule 42 (vector_element -> ID [ INTNUM ] .)
    RETURN          reduce using rule 42 (vector_element -> ID [ INTNUM ] .)
    BREAK           reduce using rule 42 (vector_element -> ID [ INTNUM ] .)
    CONTINUE        reduce using rule 42 (vector_element -> ID [ INTNUM ] .)
    PRINT           reduce using rule 42 (vector_element -> ID [ INTNUM ] .)
    ID              reduce using rule 42 (vector_element -> ID [ INTNUM ] .)
    ]               reduce using rule 42 (vector_element -> ID [ INTNUM ] .)


state 114

    (14) instruction -> IF ( condition ) instruction .
    (15) instruction -> IF ( condition ) instruction . ELSE instruction

    {               reduce using rule 14 (instruction -> IF ( condition ) instruction .)
    IF              reduce using rule 14 (instruction -> IF ( condition ) instruction .)
    FOR             reduce using rule 14 (instruction -> IF ( condition ) instruction .)
    WHILE           reduce using rule 14 (instruction -> IF ( condition ) instruction .)
    RETURN          reduce using rule 14 (instruction -> IF ( condition ) instruction .)
    BREAK           reduce using rule 14 (instruction -> IF ( condition ) instruction .)
    CONTINUE        reduce using rule 14 (instruction -> IF ( condition ) instruction .)
    PRINT           reduce using rule 14 (instruction -> IF ( condition ) instruction .)
    ID              reduce using rule 14 (instruction -> IF ( condition ) instruction .)
    $end            reduce using rule 14 (instruction -> IF ( condition ) instruction .)
    }               reduce using rule 14 (instruction -> IF ( condition ) instruction .)
    ELSE            shift and go to state 130

  ! ELSE            [ reduce using rule 14 (instruction -> IF ( condition ) instruction .) ]


state 115

    (64) condition -> expression EQ expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . DOTADD expression
    (61) expression -> expression . DOTSUB expression
    (62) expression -> expression . DOTMUL expression
    (63) expression -> expression . DOTDIV expression
    (71) transposition -> expression . '

    )               reduce using rule 64 (condition -> expression EQ expression .)
    +               shift and go to state 63
    -               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 66
    DOTADD          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70
    '               shift and go to state 71


state 116

    (65) condition -> expression NE expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . DOTADD expression
    (61) expression -> expression . DOTSUB expression
    (62) expression -> expression . DOTMUL expression
    (63) expression -> expression . DOTDIV expression
    (71) transposition -> expression . '

    )               reduce using rule 65 (condition -> expression NE expression .)
    +               shift and go to state 63
    -               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 66
    DOTADD          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70
    '               shift and go to state 71


state 117

    (66) condition -> expression LE expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . DOTADD expression
    (61) expression -> expression . DOTSUB expression
    (62) expression -> expression . DOTMUL expression
    (63) expression -> expression . DOTDIV expression
    (71) transposition -> expression . '

    )               reduce using rule 66 (condition -> expression LE expression .)
    +               shift and go to state 63
    -               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 66
    DOTADD          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70
    '               shift and go to state 71


state 118

    (67) condition -> expression GE expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . DOTADD expression
    (61) expression -> expression . DOTSUB expression
    (62) expression -> expression . DOTMUL expression
    (63) expression -> expression . DOTDIV expression
    (71) transposition -> expression . '

    )               reduce using rule 67 (condition -> expression GE expression .)
    +               shift and go to state 63
    -               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 66
    DOTADD          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70
    '               shift and go to state 71


state 119

    (68) condition -> expression LT expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . DOTADD expression
    (61) expression -> expression . DOTSUB expression
    (62) expression -> expression . DOTMUL expression
    (63) expression -> expression . DOTDIV expression
    (71) transposition -> expression . '

    )               reduce using rule 68 (condition -> expression LT expression .)
    +               shift and go to state 63
    -               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 66
    DOTADD          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70
    '               shift and go to state 71


state 120

    (69) condition -> expression GT expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . DOTADD expression
    (61) expression -> expression . DOTSUB expression
    (62) expression -> expression . DOTMUL expression
    (63) expression -> expression . DOTDIV expression
    (71) transposition -> expression . '

    )               reduce using rule 69 (condition -> expression GT expression .)
    +               shift and go to state 63
    -               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 66
    DOTADD          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70
    '               shift and go to state 71


state 121

    (16) instruction -> FOR var = range instruction .

    {               reduce using rule 16 (instruction -> FOR var = range instruction .)
    IF              reduce using rule 16 (instruction -> FOR var = range instruction .)
    FOR             reduce using rule 16 (instruction -> FOR var = range instruction .)
    WHILE           reduce using rule 16 (instruction -> FOR var = range instruction .)
    RETURN          reduce using rule 16 (instruction -> FOR var = range instruction .)
    BREAK           reduce using rule 16 (instruction -> FOR var = range instruction .)
    CONTINUE        reduce using rule 16 (instruction -> FOR var = range instruction .)
    PRINT           reduce using rule 16 (instruction -> FOR var = range instruction .)
    ID              reduce using rule 16 (instruction -> FOR var = range instruction .)
    $end            reduce using rule 16 (instruction -> FOR var = range instruction .)
    }               reduce using rule 16 (instruction -> FOR var = range instruction .)
    ELSE            reduce using rule 16 (instruction -> FOR var = range instruction .)


state 122

    (17) range -> expression : . expression
    (48) expression -> . number
    (49) expression -> . var
    (50) expression -> . matrix
    (51) expression -> . matrix_function
    (52) expression -> . uminus
    (53) expression -> . transposition
    (54) expression -> . matrix_element
    (55) expression -> . vector_element
    (56) expression -> . expression + expression
    (57) expression -> . expression - expression
    (58) expression -> . expression * expression
    (59) expression -> . expression / expression
    (60) expression -> . expression DOTADD expression
    (61) expression -> . expression DOTSUB expression
    (62) expression -> . expression DOTMUL expression
    (63) expression -> . expression DOTDIV expression
    (36) number -> . INTNUM
    (37) number -> . FLOATNUM
    (35) var -> . ID
    (27) matrix -> . [ vectors ]
    (31) matrix_function -> . function_name ( INTNUM )
    (70) uminus -> . - expression
    (71) transposition -> . expression '
    (43) matrix_element -> . ID [ INTNUM , INTNUM ]
    (42) vector_element -> . ID [ INTNUM ]
    (32) function_name -> . EYE
    (33) function_name -> . ONES
    (34) function_name -> . ZEROS

    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    ID              shift and go to state 18
    [               shift and go to state 45
    -               shift and go to state 42
    EYE             shift and go to state 47
    ONES            shift and go to state 48
    ZEROS           shift and go to state 49

    expression                     shift and go to state 131
    number                         shift and go to state 34
    var                            shift and go to state 35
    matrix                         shift and go to state 36
    matrix_function                shift and go to state 37
    uminus                         shift and go to state 38
    transposition                  shift and go to state 39
    matrix_element                 shift and go to state 40
    vector_element                 shift and go to state 41
    function_name                  shift and go to state 46

state 123

    (18) instruction -> WHILE ( condition ) instruction .

    {               reduce using rule 18 (instruction -> WHILE ( condition ) instruction .)
    IF              reduce using rule 18 (instruction -> WHILE ( condition ) instruction .)
    FOR             reduce using rule 18 (instruction -> WHILE ( condition ) instruction .)
    WHILE           reduce using rule 18 (instruction -> WHILE ( condition ) instruction .)
    RETURN          reduce using rule 18 (instruction -> WHILE ( condition ) instruction .)
    BREAK           reduce using rule 18 (instruction -> WHILE ( condition ) instruction .)
    CONTINUE        reduce using rule 18 (instruction -> WHILE ( condition ) instruction .)
    PRINT           reduce using rule 18 (instruction -> WHILE ( condition ) instruction .)
    ID              reduce using rule 18 (instruction -> WHILE ( condition ) instruction .)
    $end            reduce using rule 18 (instruction -> WHILE ( condition ) instruction .)
    }               reduce using rule 18 (instruction -> WHILE ( condition ) instruction .)
    ELSE            reduce using rule 18 (instruction -> WHILE ( condition ) instruction .)


state 124

    (28) vector -> [ variables ] .

    ]               reduce using rule 28 (vector -> [ variables ] .)
    ,               reduce using rule 28 (vector -> [ variables ] .)


state 125

    (46) variables -> variables , . variable
    (39) variable -> . number
    (40) variable -> . var
    (41) variable -> . element
    (36) number -> . INTNUM
    (37) number -> . FLOATNUM
    (35) var -> . ID
    (44) element -> . vector_element
    (45) element -> . matrix_element
    (42) vector_element -> . ID [ INTNUM ]
    (43) matrix_element -> . ID [ INTNUM , INTNUM ]

    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    ID              shift and go to state 104

    variable                       shift and go to state 132
    number                         shift and go to state 101
    var                            shift and go to state 102
    element                        shift and go to state 103
    vector_element                 shift and go to state 105
    matrix_element                 shift and go to state 106

state 126

    (42) vector_element -> ID [ . INTNUM ]
    (43) matrix_element -> ID [ . INTNUM , INTNUM ]

    INTNUM          shift and go to state 133


state 127

    (29) vectors -> vectors , vector .

    ]               reduce using rule 29 (vectors -> vectors , vector .)
    ,               reduce using rule 29 (vectors -> vectors , vector .)


state 128

    (31) matrix_function -> function_name ( INTNUM ) .

    +               reduce using rule 31 (matrix_function -> function_name ( INTNUM ) .)
    -               reduce using rule 31 (matrix_function -> function_name ( INTNUM ) .)
    *               reduce using rule 31 (matrix_function -> function_name ( INTNUM ) .)
    /               reduce using rule 31 (matrix_function -> function_name ( INTNUM ) .)
    DOTADD          reduce using rule 31 (matrix_function -> function_name ( INTNUM ) .)
    DOTSUB          reduce using rule 31 (matrix_function -> function_name ( INTNUM ) .)
    DOTMUL          reduce using rule 31 (matrix_function -> function_name ( INTNUM ) .)
    DOTDIV          reduce using rule 31 (matrix_function -> function_name ( INTNUM ) .)
    '               reduce using rule 31 (matrix_function -> function_name ( INTNUM ) .)
    ;               reduce using rule 31 (matrix_function -> function_name ( INTNUM ) .)
    ,               reduce using rule 31 (matrix_function -> function_name ( INTNUM ) .)
    EQ              reduce using rule 31 (matrix_function -> function_name ( INTNUM ) .)
    NE              reduce using rule 31 (matrix_function -> function_name ( INTNUM ) .)
    LE              reduce using rule 31 (matrix_function -> function_name ( INTNUM ) .)
    GE              reduce using rule 31 (matrix_function -> function_name ( INTNUM ) .)
    LT              reduce using rule 31 (matrix_function -> function_name ( INTNUM ) .)
    GT              reduce using rule 31 (matrix_function -> function_name ( INTNUM ) .)
    :               reduce using rule 31 (matrix_function -> function_name ( INTNUM ) .)
    )               reduce using rule 31 (matrix_function -> function_name ( INTNUM ) .)
    {               reduce using rule 31 (matrix_function -> function_name ( INTNUM ) .)
    IF              reduce using rule 31 (matrix_function -> function_name ( INTNUM ) .)
    FOR             reduce using rule 31 (matrix_function -> function_name ( INTNUM ) .)
    WHILE           reduce using rule 31 (matrix_function -> function_name ( INTNUM ) .)
    RETURN          reduce using rule 31 (matrix_function -> function_name ( INTNUM ) .)
    BREAK           reduce using rule 31 (matrix_function -> function_name ( INTNUM ) .)
    CONTINUE        reduce using rule 31 (matrix_function -> function_name ( INTNUM ) .)
    PRINT           reduce using rule 31 (matrix_function -> function_name ( INTNUM ) .)
    ID              reduce using rule 31 (matrix_function -> function_name ( INTNUM ) .)


state 129

    (43) matrix_element -> ID [ INTNUM , INTNUM . ]

    ]               shift and go to state 134


state 130

    (15) instruction -> IF ( condition ) instruction ELSE . instruction
    (7) instruction -> . sys_instruction ;
    (8) instruction -> . assignment ;
    (9) instruction -> . { instructions }
    (14) instruction -> . IF ( condition ) instruction
    (15) instruction -> . IF ( condition ) instruction ELSE instruction
    (16) instruction -> . FOR var = range instruction
    (18) instruction -> . WHILE ( condition ) instruction
    (10) sys_instruction -> . RETURN expression
    (11) sys_instruction -> . BREAK
    (12) sys_instruction -> . CONTINUE
    (13) sys_instruction -> . PRINT print_values
    (19) assignment -> . var assignment_operator expression
    (20) assignment -> . matrix_element assignment_operator expression
    (21) assignment -> . vector_element assignment_operator expression
    (35) var -> . ID
    (43) matrix_element -> . ID [ INTNUM , INTNUM ]
    (42) vector_element -> . ID [ INTNUM ]

    {               shift and go to state 7
    IF              shift and go to state 8
    FOR             shift and go to state 9
    WHILE           shift and go to state 11
    RETURN          shift and go to state 12
    BREAK           shift and go to state 13
    CONTINUE        shift and go to state 14
    PRINT           shift and go to state 15
    ID              shift and go to state 18

    instruction                    shift and go to state 135
    sys_instruction                shift and go to state 5
    assignment                     shift and go to state 6
    var                            shift and go to state 10
    matrix_element                 shift and go to state 16
    vector_element                 shift and go to state 17

state 131

    (17) range -> expression : expression .
    (56) expression -> expression . + expression
    (57) expression -> expression . - expression
    (58) expression -> expression . * expression
    (59) expression -> expression . / expression
    (60) expression -> expression . DOTADD expression
    (61) expression -> expression . DOTSUB expression
    (62) expression -> expression . DOTMUL expression
    (63) expression -> expression . DOTDIV expression
    (71) transposition -> expression . '

    {               reduce using rule 17 (range -> expression : expression .)
    IF              reduce using rule 17 (range -> expression : expression .)
    FOR             reduce using rule 17 (range -> expression : expression .)
    WHILE           reduce using rule 17 (range -> expression : expression .)
    RETURN          reduce using rule 17 (range -> expression : expression .)
    BREAK           reduce using rule 17 (range -> expression : expression .)
    CONTINUE        reduce using rule 17 (range -> expression : expression .)
    PRINT           reduce using rule 17 (range -> expression : expression .)
    ID              reduce using rule 17 (range -> expression : expression .)
    +               shift and go to state 63
    -               shift and go to state 64
    *               shift and go to state 65
    /               shift and go to state 66
    DOTADD          shift and go to state 67
    DOTSUB          shift and go to state 68
    DOTMUL          shift and go to state 69
    DOTDIV          shift and go to state 70
    '               shift and go to state 71


state 132

    (46) variables -> variables , variable .

    ]               reduce using rule 46 (variables -> variables , variable .)
    ,               reduce using rule 46 (variables -> variables , variable .)


state 133

    (42) vector_element -> ID [ INTNUM . ]
    (43) matrix_element -> ID [ INTNUM . , INTNUM ]

    ]               shift and go to state 113
    ,               shift and go to state 112


state 134

    (43) matrix_element -> ID [ INTNUM , INTNUM ] .

    =               reduce using rule 43 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    ADDASSIGN       reduce using rule 43 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    SUBASSIGN       reduce using rule 43 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    MULASSIGN       reduce using rule 43 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    DIVASSIGN       reduce using rule 43 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    +               reduce using rule 43 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    -               reduce using rule 43 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    *               reduce using rule 43 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    /               reduce using rule 43 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    DOTADD          reduce using rule 43 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    DOTSUB          reduce using rule 43 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    DOTMUL          reduce using rule 43 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    DOTDIV          reduce using rule 43 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    '               reduce using rule 43 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    ;               reduce using rule 43 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    ,               reduce using rule 43 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    EQ              reduce using rule 43 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    NE              reduce using rule 43 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    LE              reduce using rule 43 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    GE              reduce using rule 43 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    LT              reduce using rule 43 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    GT              reduce using rule 43 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    :               reduce using rule 43 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    )               reduce using rule 43 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    {               reduce using rule 43 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    IF              reduce using rule 43 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    FOR             reduce using rule 43 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    WHILE           reduce using rule 43 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    RETURN          reduce using rule 43 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    BREAK           reduce using rule 43 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    CONTINUE        reduce using rule 43 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    PRINT           reduce using rule 43 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    ID              reduce using rule 43 (matrix_element -> ID [ INTNUM , INTNUM ] .)
    ]               reduce using rule 43 (matrix_element -> ID [ INTNUM , INTNUM ] .)


state 135

    (15) instruction -> IF ( condition ) instruction ELSE instruction .

    {               reduce using rule 15 (instruction -> IF ( condition ) instruction ELSE instruction .)
    IF              reduce using rule 15 (instruction -> IF ( condition ) instruction ELSE instruction .)
    FOR             reduce using rule 15 (instruction -> IF ( condition ) instruction ELSE instruction .)
    WHILE           reduce using rule 15 (instruction -> IF ( condition ) instruction ELSE instruction .)
    RETURN          reduce using rule 15 (instruction -> IF ( condition ) instruction ELSE instruction .)
    BREAK           reduce using rule 15 (instruction -> IF ( condition ) instruction ELSE instruction .)
    CONTINUE        reduce using rule 15 (instruction -> IF ( condition ) instruction ELSE instruction .)
    PRINT           reduce using rule 15 (instruction -> IF ( condition ) instruction ELSE instruction .)
    ID              reduce using rule 15 (instruction -> IF ( condition ) instruction ELSE instruction .)
    $end            reduce using rule 15 (instruction -> IF ( condition ) instruction ELSE instruction .)
    }               reduce using rule 15 (instruction -> IF ( condition ) instruction ELSE instruction .)
    ELSE            reduce using rule 15 (instruction -> IF ( condition ) instruction ELSE instruction .)

