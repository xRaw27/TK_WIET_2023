
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programnonassocIFXnonassocELSErightMULASSIGNDIVASSIGNSUBASSIGNADDASSIGNnonassocLTGTGELEEQNEleft+-leftDOTADDDOTSUBleft*/leftDOTMULDOTDIVrightUMINUSleft\'ADDASSIGN BREAK CONTINUE DIVASSIGN DOTADD DOTDIV DOTMUL DOTSUB ELSE EQ EYE FLOATNUM FOR GE GT ID IF INTNUM LE LT MULASSIGN NE ONES PRINT RETURN STRING SUBASSIGN WHILE ZEROS empty :program : instructions_optinstructions_opt : instructions instructions_opt : instructions : instructions instruction instructions : instruction instruction : sys_instruction \';\'\n                   | assignment \';\'\n                   | \'{\' instructions \'}\' sys_instruction : RETURN expression sys_instruction : BREAK sys_instruction : CONTINUEsys_instruction : PRINT print_values instruction : IF \'(\' condition \')\' instruction %prec IFX instruction : IF \'(\' condition \')\' instruction ELSE instruction instruction : FOR var \'=\' range instruction range : expression \':\' expression instruction : WHILE \'(\' condition \')\' instruction assignment : var assignment_operator expression\n                  | matrix_element assignment_operator expression\n                  | vector_element assignment_operator expression assignment_operator : \'=\'\n                           | ADDASSIGN\n                           | SUBASSIGN\n                           | MULASSIGN\n                           | DIVASSIGN matrix : \'[\' vectors \']\' vector : \'[\' variables \']\' vectors : vectors \',\' vector\n                | vector matrix_function : function_name \'(\' INTNUM \')\' function_name : EYE\n                     | ONES\n                     | ZEROS var : ID number : INTNUM\n              | FLOATNUM string : STRING variable : number\n                 | var\n                 | element  vector_element : ID "[" INTNUM "]"  matrix_element : ID "[" INTNUM "," INTNUM "]"  element : vector_element\n               | matrix_elementvariables : variables \',\' variable\n                 | variable expression : number\n                  | var\n                  | matrix\n                  | matrix_function\n                  | uminus\n                  | transposition\n                  | matrix_element\n                  | vector_element expression : expression \'+\' expression\n                  | expression \'-\' expression\n                  | expression \'*\' expression\n                  | expression \'/\' expression\n                  | expression DOTADD expression\n                  | expression DOTSUB expression\n                  | expression DOTMUL expression\n                  | expression DOTDIV expression condition : expression EQ expression\n                 | expression NE expression\n                 | expression LE expression\n                 | expression GE expression\n                 | expression LT expression\n                 | expression GT expression uminus : \'-\' expression %prec UMINUS transposition : expression "\'" print_values : print_values \',\' string\n                    | print_values \',\' expression\n                    | string\n                    | expression '
    
_lr_action_items = {'$end':([0,1,2,3,4,19,20,21,57,114,121,123,135,],[-4,0,-2,-3,-6,-5,-7,-8,-9,-14,-16,-18,-15,]),'{':([0,3,4,7,18,19,20,21,22,34,35,36,37,38,39,40,41,43,44,57,71,72,81,88,90,91,92,93,94,95,96,97,98,107,113,114,121,123,128,130,131,134,135,],[7,7,-6,7,-35,-5,-7,-8,7,-48,-49,-50,-51,-52,-53,-54,-55,-36,-37,-9,-71,-70,7,7,7,-56,-57,-58,-59,-60,-61,-62,-63,-27,-42,-14,-16,-18,-31,7,-17,-43,-15,]),'IF':([0,3,4,7,18,19,20,21,22,34,35,36,37,38,39,40,41,43,44,57,71,72,81,88,90,91,92,93,94,95,96,97,98,107,113,114,121,123,128,130,131,134,135,],[8,8,-6,8,-35,-5,-7,-8,8,-48,-49,-50,-51,-52,-53,-54,-55,-36,-37,-9,-71,-70,8,8,8,-56,-57,-58,-59,-60,-61,-62,-63,-27,-42,-14,-16,-18,-31,8,-17,-43,-15,]),'FOR':([0,3,4,7,18,19,20,21,22,34,35,36,37,38,39,40,41,43,44,57,71,72,81,88,90,91,92,93,94,95,96,97,98,107,113,114,121,123,128,130,131,134,135,],[9,9,-6,9,-35,-5,-7,-8,9,-48,-49,-50,-51,-52,-53,-54,-55,-36,-37,-9,-71,-70,9,9,9,-56,-57,-58,-59,-60,-61,-62,-63,-27,-42,-14,-16,-18,-31,9,-17,-43,-15,]),'WHILE':([0,3,4,7,18,19,20,21,22,34,35,36,37,38,39,40,41,43,44,57,71,72,81,88,90,91,92,93,94,95,96,97,98,107,113,114,121,123,128,130,131,134,135,],[11,11,-6,11,-35,-5,-7,-8,11,-48,-49,-50,-51,-52,-53,-54,-55,-36,-37,-9,-71,-70,11,11,11,-56,-57,-58,-59,-60,-61,-62,-63,-27,-42,-14,-16,-18,-31,11,-17,-43,-15,]),'RETURN':([0,3,4,7,18,19,20,21,22,34,35,36,37,38,39,40,41,43,44,57,71,72,81,88,90,91,92,93,94,95,96,97,98,107,113,114,121,123,128,130,131,134,135,],[12,12,-6,12,-35,-5,-7,-8,12,-48,-49,-50,-51,-52,-53,-54,-55,-36,-37,-9,-71,-70,12,12,12,-56,-57,-58,-59,-60,-61,-62,-63,-27,-42,-14,-16,-18,-31,12,-17,-43,-15,]),'BREAK':([0,3,4,7,18,19,20,21,22,34,35,36,37,38,39,40,41,43,44,57,71,72,81,88,90,91,92,93,94,95,96,97,98,107,113,114,121,123,128,130,131,134,135,],[13,13,-6,13,-35,-5,-7,-8,13,-48,-49,-50,-51,-52,-53,-54,-55,-36,-37,-9,-71,-70,13,13,13,-56,-57,-58,-59,-60,-61,-62,-63,-27,-42,-14,-16,-18,-31,13,-17,-43,-15,]),'CONTINUE':([0,3,4,7,18,19,20,21,22,34,35,36,37,38,39,40,41,43,44,57,71,72,81,88,90,91,92,93,94,95,96,97,98,107,113,114,121,123,128,130,131,134,135,],[14,14,-6,14,-35,-5,-7,-8,14,-48,-49,-50,-51,-52,-53,-54,-55,-36,-37,-9,-71,-70,14,14,14,-56,-57,-58,-59,-60,-61,-62,-63,-27,-42,-14,-16,-18,-31,14,-17,-43,-15,]),'PRINT':([0,3,4,7,18,19,20,21,22,34,35,36,37,38,39,40,41,43,44,57,71,72,81,88,90,91,92,93,94,95,96,97,98,107,113,114,121,123,128,130,131,134,135,],[15,15,-6,15,-35,-5,-7,-8,15,-48,-49,-50,-51,-52,-53,-54,-55,-36,-37,-9,-71,-70,15,15,15,-56,-57,-58,-59,-60,-61,-62,-63,-27,-42,-14,-16,-18,-31,15,-17,-43,-15,]),'ID':([0,3,4,7,9,12,15,18,19,20,21,22,23,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,54,55,57,60,63,64,65,66,67,68,69,70,71,72,73,77,81,82,83,84,85,86,87,88,90,91,92,93,94,95,96,97,98,107,113,114,121,122,123,125,128,130,131,134,135,],[18,18,-6,18,25,18,18,-35,-5,-7,-8,18,18,18,-22,-23,-24,-25,-26,18,-48,-49,-50,-51,-52,-53,-54,-55,18,-36,-37,18,18,-9,18,18,18,18,18,18,18,18,18,-71,-70,104,18,18,18,18,18,18,18,18,18,18,-56,-57,-58,-59,-60,-61,-62,-63,-27,-42,-14,-16,18,-18,104,-31,18,-17,-43,-15,]),'}':([4,19,20,21,22,57,114,121,123,135,],[-6,-5,-7,-8,57,-9,-14,-16,-18,-15,]),';':([5,6,13,14,18,33,34,35,36,37,38,39,40,41,43,44,50,51,52,53,61,71,72,78,79,91,92,93,94,95,96,97,98,107,110,111,113,128,134,],[20,21,-11,-12,-35,-10,-48,-49,-50,-51,-52,-53,-54,-55,-36,-37,-13,-74,-75,-38,-19,-71,-70,-20,-21,-56,-57,-58,-59,-60,-61,-62,-63,-27,-72,-73,-42,-31,-43,]),'(':([8,11,46,47,48,49,],[23,32,76,-32,-33,-34,]),'=':([10,16,17,18,24,25,113,134,],[27,27,27,-35,60,-35,-42,-43,]),'ADDASSIGN':([10,16,17,18,113,134,],[28,28,28,-35,-42,-43,]),'SUBASSIGN':([10,16,17,18,113,134,],[29,29,29,-35,-42,-43,]),'MULASSIGN':([10,16,17,18,113,134,],[30,30,30,-35,-42,-43,]),'DIVASSIGN':([10,16,17,18,113,134,],[31,31,31,-35,-42,-43,]),'INTNUM':([12,15,23,26,27,28,29,30,31,32,42,54,55,56,60,63,64,65,66,67,68,69,70,73,76,77,82,83,84,85,86,87,112,122,125,126,],[43,43,43,43,-22,-23,-24,-25,-26,43,43,43,43,80,43,43,43,43,43,43,43,43,43,43,109,43,43,43,43,43,43,43,129,43,43,133,]),'FLOATNUM':([12,15,23,26,27,28,29,30,31,32,42,54,55,60,63,64,65,66,67,68,69,70,73,77,82,83,84,85,86,87,122,125,],[44,44,44,44,-22,-23,-24,-25,-26,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'[':([12,15,18,23,26,27,28,29,30,31,32,42,45,54,55,60,63,64,65,66,67,68,69,70,77,82,83,84,85,86,87,104,108,122,],[45,45,56,45,45,-22,-23,-24,-25,-26,45,45,73,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,126,73,45,]),'-':([12,15,18,23,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,52,54,55,59,60,61,63,64,65,66,67,68,69,70,71,72,77,78,79,82,83,84,85,86,87,89,91,92,93,94,95,96,97,98,107,111,113,115,116,117,118,119,120,122,128,131,134,],[42,42,-35,42,42,-22,-23,-24,-25,-26,42,64,-48,-49,-50,-51,-52,-53,-54,-55,42,-36,-37,64,42,42,64,42,64,42,42,42,42,42,42,42,42,-71,-70,42,64,64,42,42,42,42,42,42,64,-56,-57,-58,-59,-60,-61,-62,-63,-27,64,-42,64,64,64,64,64,64,42,-31,64,-43,]),'EYE':([12,15,23,26,27,28,29,30,31,32,42,54,55,60,63,64,65,66,67,68,69,70,77,82,83,84,85,86,87,122,],[47,47,47,47,-22,-23,-24,-25,-26,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'ONES':([12,15,23,26,27,28,29,30,31,32,42,54,55,60,63,64,65,66,67,68,69,70,77,82,83,84,85,86,87,122,],[48,48,48,48,-22,-23,-24,-25,-26,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'ZEROS':([12,15,23,26,27,28,29,30,31,32,42,54,55,60,63,64,65,66,67,68,69,70,77,82,83,84,85,86,87,122,],[49,49,49,49,-22,-23,-24,-25,-26,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'STRING':([15,77,],[53,53,]),'+':([18,33,34,35,36,37,38,39,40,41,43,44,52,59,61,71,72,78,79,89,91,92,93,94,95,96,97,98,107,111,113,115,116,117,118,119,120,128,131,134,],[-35,63,-48,-49,-50,-51,-52,-53,-54,-55,-36,-37,63,63,63,-71,-70,63,63,63,-56,-57,-58,-59,-60,-61,-62,-63,-27,63,-42,63,63,63,63,63,63,-31,63,-43,]),'*':([18,33,34,35,36,37,38,39,40,41,43,44,52,59,61,71,72,78,79,89,91,92,93,94,95,96,97,98,107,111,113,115,116,117,118,119,120,128,131,134,],[-35,65,-48,-49,-50,-51,-52,-53,-54,-55,-36,-37,65,65,65,-71,-70,65,65,65,65,65,-58,-59,65,65,-62,-63,-27,65,-42,65,65,65,65,65,65,-31,65,-43,]),'/':([18,33,34,35,36,37,38,39,40,41,43,44,52,59,61,71,72,78,79,89,91,92,93,94,95,96,97,98,107,111,113,115,116,117,118,119,120,128,131,134,],[-35,66,-48,-49,-50,-51,-52,-53,-54,-55,-36,-37,66,66,66,-71,-70,66,66,66,66,66,-58,-59,66,66,-62,-63,-27,66,-42,66,66,66,66,66,66,-31,66,-43,]),'DOTADD':([18,33,34,35,36,37,38,39,40,41,43,44,52,59,61,71,72,78,79,89,91,92,93,94,95,96,97,98,107,111,113,115,116,117,118,119,120,128,131,134,],[-35,67,-48,-49,-50,-51,-52,-53,-54,-55,-36,-37,67,67,67,-71,-70,67,67,67,67,67,-58,-59,-60,-61,-62,-63,-27,67,-42,67,67,67,67,67,67,-31,67,-43,]),'DOTSUB':([18,33,34,35,36,37,38,39,40,41,43,44,52,59,61,71,72,78,79,89,91,92,93,94,95,96,97,98,107,111,113,115,116,117,118,119,120,128,131,134,],[-35,68,-48,-49,-50,-51,-52,-53,-54,-55,-36,-37,68,68,68,-71,-70,68,68,68,68,68,-58,-59,-60,-61,-62,-63,-27,68,-42,68,68,68,68,68,68,-31,68,-43,]),'DOTMUL':([18,33,34,35,36,37,38,39,40,41,43,44,52,59,61,71,72,78,79,89,91,92,93,94,95,96,97,98,107,111,113,115,116,117,118,119,120,128,131,134,],[-35,69,-48,-49,-50,-51,-52,-53,-54,-55,-36,-37,69,69,69,-71,-70,69,69,69,69,69,69,69,69,69,-62,-63,-27,69,-42,69,69,69,69,69,69,-31,69,-43,]),'DOTDIV':([18,33,34,35,36,37,38,39,40,41,43,44,52,59,61,71,72,78,79,89,91,92,93,94,95,96,97,98,107,111,113,115,116,117,118,119,120,128,131,134,],[-35,70,-48,-49,-50,-51,-52,-53,-54,-55,-36,-37,70,70,70,-71,-70,70,70,70,70,70,70,70,70,70,-62,-63,-27,70,-42,70,70,70,70,70,70,-31,70,-43,]),"'":([18,33,34,35,36,37,38,39,40,41,43,44,52,59,61,71,72,78,79,89,91,92,93,94,95,96,97,98,107,111,113,115,116,117,118,119,120,128,131,134,],[-35,71,-48,-49,-50,-51,-52,-53,-54,-55,-36,-37,71,71,71,-71,71,71,71,71,71,71,71,71,71,71,71,71,-27,71,-42,71,71,71,71,71,71,-31,71,-43,]),',':([18,34,35,36,37,38,39,40,41,43,44,50,51,52,53,71,72,74,75,80,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,110,111,113,124,127,128,132,133,134,],[-35,-48,-49,-50,-51,-52,-53,-54,-55,-36,-37,77,-74,-75,-38,-71,-70,108,-30,112,-56,-57,-58,-59,-60,-61,-62,-63,125,-47,-39,-40,-41,-35,-44,-45,-27,-72,-73,-42,-28,-29,-31,-46,112,-43,]),'EQ':([18,34,35,36,37,38,39,40,41,43,44,59,71,72,91,92,93,94,95,96,97,98,107,113,128,134,],[-35,-48,-49,-50,-51,-52,-53,-54,-55,-36,-37,82,-71,-70,-56,-57,-58,-59,-60,-61,-62,-63,-27,-42,-31,-43,]),'NE':([18,34,35,36,37,38,39,40,41,43,44,59,71,72,91,92,93,94,95,96,97,98,107,113,128,134,],[-35,-48,-49,-50,-51,-52,-53,-54,-55,-36,-37,83,-71,-70,-56,-57,-58,-59,-60,-61,-62,-63,-27,-42,-31,-43,]),'LE':([18,34,35,36,37,38,39,40,41,43,44,59,71,72,91,92,93,94,95,96,97,98,107,113,128,134,],[-35,-48,-49,-50,-51,-52,-53,-54,-55,-36,-37,84,-71,-70,-56,-57,-58,-59,-60,-61,-62,-63,-27,-42,-31,-43,]),'GE':([18,34,35,36,37,38,39,40,41,43,44,59,71,72,91,92,93,94,95,96,97,98,107,113,128,134,],[-35,-48,-49,-50,-51,-52,-53,-54,-55,-36,-37,85,-71,-70,-56,-57,-58,-59,-60,-61,-62,-63,-27,-42,-31,-43,]),'LT':([18,34,35,36,37,38,39,40,41,43,44,59,71,72,91,92,93,94,95,96,97,98,107,113,128,134,],[-35,-48,-49,-50,-51,-52,-53,-54,-55,-36,-37,86,-71,-70,-56,-57,-58,-59,-60,-61,-62,-63,-27,-42,-31,-43,]),'GT':([18,34,35,36,37,38,39,40,41,43,44,59,71,72,91,92,93,94,95,96,97,98,107,113,128,134,],[-35,-48,-49,-50,-51,-52,-53,-54,-55,-36,-37,87,-71,-70,-56,-57,-58,-59,-60,-61,-62,-63,-27,-42,-31,-43,]),':':([18,34,35,36,37,38,39,40,41,43,44,71,72,89,91,92,93,94,95,96,97,98,107,113,128,134,],[-35,-48,-49,-50,-51,-52,-53,-54,-55,-36,-37,-71,-70,122,-56,-57,-58,-59,-60,-61,-62,-63,-27,-42,-31,-43,]),')':([18,34,35,36,37,38,39,40,41,43,44,58,62,71,72,91,92,93,94,95,96,97,98,107,109,113,115,116,117,118,119,120,128,134,],[-35,-48,-49,-50,-51,-52,-53,-54,-55,-36,-37,81,90,-71,-70,-56,-57,-58,-59,-60,-61,-62,-63,-27,128,-42,-64,-65,-66,-67,-68,-69,-31,-43,]),'ELSE':([20,21,57,114,121,123,135,],[-7,-8,-9,130,-16,-18,-15,]),']':([43,44,74,75,80,99,100,101,102,103,104,105,106,113,124,127,129,132,133,134,],[-36,-37,107,-30,113,124,-47,-39,-40,-41,-35,-44,-45,-42,-28,-29,134,-46,113,-43,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'instructions_opt':([0,],[2,]),'instructions':([0,7,],[3,22,]),'instruction':([0,3,7,22,81,88,90,130,],[4,19,4,19,114,121,123,135,]),'sys_instruction':([0,3,7,22,81,88,90,130,],[5,5,5,5,5,5,5,5,]),'assignment':([0,3,7,22,81,88,90,130,],[6,6,6,6,6,6,6,6,]),'var':([0,3,7,9,12,15,22,23,26,32,42,54,55,60,63,64,65,66,67,68,69,70,73,77,81,82,83,84,85,86,87,88,90,122,125,130,],[10,10,10,24,35,35,10,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,102,35,10,35,35,35,35,35,35,10,10,35,102,10,]),'matrix_element':([0,3,7,12,15,22,23,26,32,42,54,55,60,63,64,65,66,67,68,69,70,73,77,81,82,83,84,85,86,87,88,90,122,125,130,],[16,16,16,40,40,16,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,106,40,16,40,40,40,40,40,40,16,16,40,106,16,]),'vector_element':([0,3,7,12,15,22,23,26,32,42,54,55,60,63,64,65,66,67,68,69,70,73,77,81,82,83,84,85,86,87,88,90,122,125,130,],[17,17,17,41,41,17,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,105,41,17,41,41,41,41,41,41,17,17,41,105,17,]),'assignment_operator':([10,16,17,],[26,54,55,]),'expression':([12,15,23,26,32,42,54,55,60,63,64,65,66,67,68,69,70,77,82,83,84,85,86,87,122,],[33,52,59,61,59,72,78,79,89,91,92,93,94,95,96,97,98,111,115,116,117,118,119,120,131,]),'number':([12,15,23,26,32,42,54,55,60,63,64,65,66,67,68,69,70,73,77,82,83,84,85,86,87,122,125,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,101,34,34,34,34,34,34,34,34,101,]),'matrix':([12,15,23,26,32,42,54,55,60,63,64,65,66,67,68,69,70,77,82,83,84,85,86,87,122,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'matrix_function':([12,15,23,26,32,42,54,55,60,63,64,65,66,67,68,69,70,77,82,83,84,85,86,87,122,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'uminus':([12,15,23,26,32,42,54,55,60,63,64,65,66,67,68,69,70,77,82,83,84,85,86,87,122,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'transposition':([12,15,23,26,32,42,54,55,60,63,64,65,66,67,68,69,70,77,82,83,84,85,86,87,122,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'function_name':([12,15,23,26,32,42,54,55,60,63,64,65,66,67,68,69,70,77,82,83,84,85,86,87,122,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'print_values':([15,],[50,]),'string':([15,77,],[51,110,]),'condition':([23,32,],[58,62,]),'vectors':([45,],[74,]),'vector':([45,108,],[75,127,]),'range':([60,],[88,]),'variables':([73,],[99,]),'variable':([73,125,],[100,132,]),'element':([73,125,],[103,103,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('empty -> <empty>','empty',0,'p_empty','Mparser.py',30),
  ('program -> instructions_opt','program',1,'p_program','Mparser.py',35),
  ('instructions_opt -> instructions','instructions_opt',1,'p_instructions_opt_1','Mparser.py',40),
  ('instructions_opt -> <empty>','instructions_opt',0,'p_instructions_opt_2','Mparser.py',45),
  ('instructions -> instructions instruction','instructions',2,'p_instructions_1','Mparser.py',50),
  ('instructions -> instruction','instructions',1,'p_instructions_2','Mparser.py',58),
  ('instruction -> sys_instruction ;','instruction',2,'p_instruction','Mparser.py',63),
  ('instruction -> assignment ;','instruction',2,'p_instruction','Mparser.py',64),
  ('instruction -> { instructions }','instruction',3,'p_instruction','Mparser.py',65),
  ('sys_instruction -> RETURN expression','sys_instruction',2,'p_sys_instruction_return','Mparser.py',73),
  ('sys_instruction -> BREAK','sys_instruction',1,'p_sys_instruction_break','Mparser.py',78),
  ('sys_instruction -> CONTINUE','sys_instruction',1,'p_sys_instruction_continue','Mparser.py',83),
  ('sys_instruction -> PRINT print_values','sys_instruction',2,'p_sys_instruction_print','Mparser.py',88),
  ('instruction -> IF ( condition ) instruction','instruction',5,'p_instruction_if','Mparser.py',93),
  ('instruction -> IF ( condition ) instruction ELSE instruction','instruction',7,'p_instruction_if_else','Mparser.py',98),
  ('instruction -> FOR var = range instruction','instruction',5,'p_instruction_for','Mparser.py',103),
  ('range -> expression : expression','range',3,'p_range','Mparser.py',107),
  ('instruction -> WHILE ( condition ) instruction','instruction',5,'p_instruction_while','Mparser.py',111),
  ('assignment -> var assignment_operator expression','assignment',3,'p_assignment','Mparser.py',116),
  ('assignment -> matrix_element assignment_operator expression','assignment',3,'p_assignment','Mparser.py',117),
  ('assignment -> vector_element assignment_operator expression','assignment',3,'p_assignment','Mparser.py',118),
  ('assignment_operator -> =','assignment_operator',1,'p_assignment_operator','Mparser.py',123),
  ('assignment_operator -> ADDASSIGN','assignment_operator',1,'p_assignment_operator','Mparser.py',124),
  ('assignment_operator -> SUBASSIGN','assignment_operator',1,'p_assignment_operator','Mparser.py',125),
  ('assignment_operator -> MULASSIGN','assignment_operator',1,'p_assignment_operator','Mparser.py',126),
  ('assignment_operator -> DIVASSIGN','assignment_operator',1,'p_assignment_operator','Mparser.py',127),
  ('matrix -> [ vectors ]','matrix',3,'p_matrix','Mparser.py',132),
  ('vector -> [ variables ]','vector',3,'p_vector','Mparser.py',137),
  ('vectors -> vectors , vector','vectors',3,'p_vectors','Mparser.py',142),
  ('vectors -> vector','vectors',1,'p_vectors','Mparser.py',143),
  ('matrix_function -> function_name ( INTNUM )','matrix_function',4,'p_matrix_function','Mparser.py',151),
  ('function_name -> EYE','function_name',1,'p_function_name','Mparser.py',156),
  ('function_name -> ONES','function_name',1,'p_function_name','Mparser.py',157),
  ('function_name -> ZEROS','function_name',1,'p_function_name','Mparser.py',158),
  ('var -> ID','var',1,'p_var','Mparser.py',163),
  ('number -> INTNUM','number',1,'p_number','Mparser.py',168),
  ('number -> FLOATNUM','number',1,'p_number','Mparser.py',169),
  ('string -> STRING','string',1,'p_string','Mparser.py',174),
  ('variable -> number','variable',1,'p_variable','Mparser.py',179),
  ('variable -> var','variable',1,'p_variable','Mparser.py',180),
  ('variable -> element','variable',1,'p_variable','Mparser.py',181),
  ('vector_element -> ID [ INTNUM ]','vector_element',4,'p_vector_element','Mparser.py',186),
  ('matrix_element -> ID [ INTNUM , INTNUM ]','matrix_element',6,'p_matrix_element','Mparser.py',191),
  ('element -> vector_element','element',1,'p_element','Mparser.py',196),
  ('element -> matrix_element','element',1,'p_element','Mparser.py',197),
  ('variables -> variables , variable','variables',3,'p_variables','Mparser.py',202),
  ('variables -> variable','variables',1,'p_variables','Mparser.py',203),
  ('expression -> number','expression',1,'p_expression','Mparser.py',211),
  ('expression -> var','expression',1,'p_expression','Mparser.py',212),
  ('expression -> matrix','expression',1,'p_expression','Mparser.py',213),
  ('expression -> matrix_function','expression',1,'p_expression','Mparser.py',214),
  ('expression -> uminus','expression',1,'p_expression','Mparser.py',215),
  ('expression -> transposition','expression',1,'p_expression','Mparser.py',216),
  ('expression -> matrix_element','expression',1,'p_expression','Mparser.py',217),
  ('expression -> vector_element','expression',1,'p_expression','Mparser.py',218),
  ('expression -> expression + expression','expression',3,'p_bin_expression','Mparser.py',223),
  ('expression -> expression - expression','expression',3,'p_bin_expression','Mparser.py',224),
  ('expression -> expression * expression','expression',3,'p_bin_expression','Mparser.py',225),
  ('expression -> expression / expression','expression',3,'p_bin_expression','Mparser.py',226),
  ('expression -> expression DOTADD expression','expression',3,'p_bin_expression','Mparser.py',227),
  ('expression -> expression DOTSUB expression','expression',3,'p_bin_expression','Mparser.py',228),
  ('expression -> expression DOTMUL expression','expression',3,'p_bin_expression','Mparser.py',229),
  ('expression -> expression DOTDIV expression','expression',3,'p_bin_expression','Mparser.py',230),
  ('condition -> expression EQ expression','condition',3,'p_condition','Mparser.py',235),
  ('condition -> expression NE expression','condition',3,'p_condition','Mparser.py',236),
  ('condition -> expression LE expression','condition',3,'p_condition','Mparser.py',237),
  ('condition -> expression GE expression','condition',3,'p_condition','Mparser.py',238),
  ('condition -> expression LT expression','condition',3,'p_condition','Mparser.py',239),
  ('condition -> expression GT expression','condition',3,'p_condition','Mparser.py',240),
  ('uminus -> - expression','uminus',2,'p_uminus','Mparser.py',245),
  ("transposition -> expression '",'transposition',2,'p_transposition','Mparser.py',250),
  ('print_values -> print_values , string','print_values',3,'p_print_values','Mparser.py',255),
  ('print_values -> print_values , expression','print_values',3,'p_print_values','Mparser.py',256),
  ('print_values -> string','print_values',1,'p_print_values','Mparser.py',257),
  ('print_values -> expression','print_values',1,'p_print_values','Mparser.py',258),
]
